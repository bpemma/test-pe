@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
.text
	.align	2, 0
	.type	 findslot,function
	.thumb_func
findslot:
	add	r3, r0, #0
	mov	r1, #0
	ldr	r2, .L10
	b	.L9
.L11:
	.align	2, 0
.L10:
	.word	openfiles
.L5:
	add	r2, r2, #8
	add	r1, r1, #1
	cmp	r1, #19
	bgt	.L4	@cond_branch
.L9:
	ldr	r0, [r2]
	cmp	r0, r3
	bne	.L5	@cond_branch
.L4:
	add	r0, r1, #0
	bx	lr
.Lfe1:
	.size	 findslot,.Lfe1-findslot
	.align	2, 0
	.type	 remap_handle,function
	.thumb_func
remap_handle:
	add	r2, r0, #0
	ldr	r0, .L22
	ldr	r1, [r0]
	ldr	r0, [r1, #4]
	mov	r3, #14
	ldrsh	r0, [r0, r3]
	cmp	r2, r0
	bne	.L14	@cond_branch
	ldr	r0, .L22+4
	b	.L19
.L23:
	.align	2, 0
.L22:
	.word	_impure_ptr
	.word	monitor_stdin
.L14:
	ldr	r0, [r1, #8]
	mov	r3, #14
	ldrsh	r0, [r0, r3]
	cmp	r2, r0
	bne	.L15	@cond_branch
	ldr	r0, .L24
	b	.L19
.L25:
	.align	2, 0
.L24:
	.word	monitor_stdout
.L15:
	ldr	r0, [r1, #12]
	mov	r1, #14
	ldrsh	r0, [r0, r1]
	cmp	r2, r0
	beq	.L16	@cond_branch
	add	r0, r2, #0
	sub	r0, r0, #32
	b	.L21
.L16:
	ldr	r0, .L26
.L19:
	ldr	r0, [r0]
.L21:
	bx	lr
.L27:
	.align	2, 0
.L26:
	.word	monitor_stderr
.Lfe2:
	.size	 remap_handle,.Lfe2-remap_handle
	.section .rodata
	.align	2, 0
.LC5:
	.ascii	":tt\000"
.text
	.align	2, 0
	.globl	initialise_monitor_handles
	.type	 initialise_monitor_handles,function
	.thumb_func
initialise_monitor_handles:
	push	{r4, r5, lr}
	add	sp, sp, #-12
	ldr	r4, .L36
	str	r4, [sp]
	mov	r3, #3
	str	r3, [sp, #8]
	mov	r0, #0
	str	r0, [sp, #4]
	mov	r5, #1
	mov r0, r5; mov r1, sp; swi 171; mov r2, r0
	.code	16
	ldr	r5, .L36+4
	str	r2, [r5]
	str	r4, [sp]
	str	r3, [sp, #8]
	mov	r0, #4
	str	r0, [sp, #4]
	ldr	r3, .L36+8
	mov	r4, #1
	mov r0, r4; mov r1, sp; swi 171; mov r2, r0
	.code	16
	ldr	r0, .L36+12
	str	r2, [r0]
	str	r2, [r3]
	ldr	r2, .L36+16
	add	r1, r2, #0
	sub	r4, r4, #2
	add	r0, r2, #0
	add	r0, r0, #152
.L34:
	str	r4, [r0]
	sub	r0, r0, #8
	cmp	r0, r1
	bge	.L34	@cond_branch
	mov	r0, #0
	ldr	r1, [r5]
	str	r1, [r2]
	str	r0, [r2, #4]
	ldr	r1, [r3]
	str	r1, [r2, #8]
	str	r0, [r2, #12]
	add	sp, sp, #12
	pop	{r4, r5, pc}
.L37:
	.align	2, 0
.L36:
	.word	.LC5
	.word	monitor_stdin
	.word	monitor_stdout
	.word	monitor_stderr
	.word	openfiles
.Lfe3:
	.size	 initialise_monitor_handles,.Lfe3-initialise_monitor_handles
	.align	2, 0
	.type	 get_errno,function
	.thumb_func
get_errno:
	push	{r4, lr}
	mov	r3, #19
	mov	r4, #0
	mov r0, r3; mov r1, r4; swi 171; mov r2, r0
	.code	16
	add	r0, r2, #0
	pop	{r4, pc}
.Lfe4:
	.size	 get_errno,.Lfe4-get_errno
	.align	2, 0
	.type	 error,function
	.thumb_func
error:
	push	{r4, r5, lr}
	add	r5, r0, #0
	bl	__errno
	add	r4, r0, #0
	bl	get_errno
	str	r0, [r4]
	add	r0, r5, #0
	pop	{r4, r5, pc}
.Lfe5:
	.size	 error,.Lfe5-error
	.align	2, 0
	.type	 wrap,function
	.thumb_func
wrap:
	push	{lr}
	add	r1, r0, #0
	mov	r0, #1
	neg	r0, r0
	cmp	r1, r0
	beq	.L42	@cond_branch
	add	r0, r1, #0
	b	.L43
.L42:
	add	r0, r1, #0
	bl	error
.L43:
	pop	{pc}
.Lfe6:
	.size	 wrap,.Lfe6-wrap
	.align	2, 0
	.globl	_swiread
	.type	 _swiread,function
	.thumb_func
_swiread:
	push	{r4, r5, lr}
	add	sp, sp, #-12
	add	r4, r1, #0
	add	r5, r2, #0
	bl	remap_handle
	str	r0, [sp]
	str	r4, [sp, #4]
	str	r5, [sp, #8]
	mov	r3, #6
	mov r0, r3; mov r1, sp; swi 171; mov r2, r0
	.code	16
	add	r0, r2, #0
	add	sp, sp, #12
	pop	{r4, r5, pc}
.Lfe7:
	.size	 _swiread,.Lfe7-_swiread
	.align	2, 0
	.globl	_read
	.type	 _read,function
	.thumb_func
_read:
	push	{r4, r5, r6, r7, lr}
	add	r4, r0, #0
	add	r5, r1, #0
	add	r7, r2, #0
	bl	remap_handle
	bl	findslot
	add	r6, r0, #0
	add	r0, r4, #0
	add	r1, r5, #0
	add	r2, r7, #0
	bl	_swiread
	cmp	r0, #0
	bge	.L47	@cond_branch
	mov	r0, #1
	neg	r0, r0
	bl	error
	b	.L49
.L47:
	sub	r2, r7, r0
	cmp	r6, #20
	beq	.L48	@cond_branch
	ldr	r0, .L50
	lsl	r1, r6, #3
	add	r0, r0, #4
	add	r1, r1, r0
	ldr	r0, [r1]
	add	r0, r0, r2
	str	r0, [r1]
.L48:
	add	r0, r2, #0
.L49:
	pop	{r4, r5, r6, r7, pc}
.L51:
	.align	2, 0
.L50:
	.word	openfiles
.Lfe8:
	.size	 _read,.Lfe8-_read
	.align	2, 0
	.globl	_swilseek
	.type	 _swilseek,function
	.thumb_func
_swilseek:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-8
	mov	r8, r0
	add	r5, r1, #0
	add	r4, r2, #0
	bl	remap_handle
	add	r7, r0, #0
	bl	findslot
	add	r6, r0, #0
	cmp	r4, #1
	bne	.L53	@cond_branch
	cmp	r6, #20
	bne	.L54	@cond_branch
	mov	r0, #1
	neg	r0, r0
	b	.L61
.L54:
	ldr	r0, .L62
	lsl	r1, r6, #3
	add	r0, r0, #4
	add	r1, r1, r0
	ldr	r0, [r1]
	add	r5, r5, r0
	mov	r4, #0
.L53:
	cmp	r4, #2
	bne	.L55	@cond_branch
	str	r7, [sp]
	mov	r3, #12
	mov r0, r3; mov r1, sp; swi 171; mov r2, r0
	.code	16
	add	r5, r5, r2
.L55:
	mov	r0, r8
	bl	remap_handle
	str	r0, [sp]
	str	r5, [sp, #4]
	mov	r3, #10
	mov r0, r3; mov r1, sp; swi 171; mov r2, r0
	.code	16
	cmp	r6, #20
	beq	.L58	@cond_branch
	cmp	r2, #0
	bne	.L58	@cond_branch
	ldr	r0, .L62
	lsl	r1, r6, #3
	add	r0, r0, #4
	add	r1, r1, r0
	str	r5, [r1]
.L58:
	mov	r0, #1
	neg	r0, r0
	cmp	r2, #0
	bne	.L61	@cond_branch
	add	r0, r5, #0
.L61:
	add	sp, sp, #8
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7, pc}
.L63:
	.align	2, 0
.L62:
	.word	openfiles
.Lfe9:
	.size	 _swilseek,.Lfe9-_swilseek
	.align	2, 0
	.globl	_lseek
	.type	 _lseek,function
	.thumb_func
_lseek:
	push	{lr}
	bl	_swilseek
	bl	wrap
	pop	{pc}
.Lfe10:
	.size	 _lseek,.Lfe10-_lseek
	.align	2, 0
	.globl	_swiwrite
	.type	 _swiwrite,function
	.thumb_func
_swiwrite:
	push	{r4, r5, lr}
	add	sp, sp, #-12
	add	r4, r1, #0
	add	r5, r2, #0
	bl	remap_handle
	str	r0, [sp]
	str	r4, [sp, #4]
	str	r5, [sp, #8]
	mov	r3, #5
	mov r0, r3; mov r1, sp; swi 171; mov r2, r0
	.code	16
	add	r0, r2, #0
	add	sp, sp, #12
	pop	{r4, r5, pc}
.Lfe11:
	.size	 _swiwrite,.Lfe11-_swiwrite
	.align	2, 0
	.globl	_write
	.type	 _write,function
	.thumb_func
_write:
	push	{r4, r5, r6, r7, lr}
	add	r4, r0, #0
	add	r5, r1, #0
	add	r6, r2, #0
	bl	remap_handle
	bl	findslot
	add	r7, r0, #0
	add	r0, r4, #0
	add	r1, r5, #0
	add	r2, r6, #0
	bl	_swiwrite
	mov	r1, #1
	neg	r1, r1
	cmp	r0, r1
	beq	.L69	@cond_branch
	cmp	r0, r6
	bne	.L68	@cond_branch
.L69:
	add	r0, r1, #0
	bl	error
	b	.L71
.L68:
	sub	r2, r6, r0
	cmp	r7, #20
	beq	.L70	@cond_branch
	ldr	r0, .L72
	lsl	r1, r7, #3
	add	r0, r0, #4
	add	r1, r1, r0
	ldr	r0, [r1]
	add	r0, r0, r2
	str	r0, [r1]
.L70:
	add	r0, r2, #0
.L71:
	pop	{r4, r5, r6, r7, pc}
.L73:
	.align	2, 0
.L72:
	.word	openfiles
.Lfe12:
	.size	 _write,.Lfe12-_write
	.align	2, 0
	.globl	_swiopen
	.type	 _swiopen,function
	.thumb_func
_swiopen:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-12
	add	r7, r0, #0
	add	r4, r1, #0
	mov	r5, #0
	mov	r6, #1
	neg	r6, r6
	add	r0, r6, #0
	bl	findslot
	mov	r8, r0
	cmp	r0, #20
	bne	.L75	@cond_branch
	add	r0, r6, #0
	b	.L84
.L75:
	mov	r0, #2
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L76	@cond_branch
	mov	r5, #2
.L76:
	mov	r0, #128
	lsl	r0, r0, #2
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L77	@cond_branch
	mov	r0, #4
	orr	r5, r5, r0
.L77:
	mov	r0, #128
	lsl	r0, r0, #3
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L78	@cond_branch
	mov	r0, #4
	orr	r5, r5, r0
.L78:
	mov	r1, #8
	and	r4, r4, r1
	cmp	r4, #0
	beq	.L79	@cond_branch
	mov	r0, #5
	neg	r0, r0
	and	r5, r5, r0
	orr	r5, r5, r1
.L79:
	str	r7, [sp]
	add	r0, r7, #0
	bl	strlen
	str	r0, [sp, #8]
	str	r5, [sp, #4]
	mov	r2, #1
	mov r0, r2; mov r1, sp; swi 171; mov r3, r0
	.code	16
	cmp	r3, #0
	blt	.L82	@cond_branch
	ldr	r0, .L85
	mov	r1, r8
	lsl	r2, r1, #3
	add	r1, r2, r0
	str	r3, [r1]
	add	r0, r0, #4
	add	r2, r2, r0
	mov	r0, #0
	str	r0, [r2]
	add	r0, r3, #0
	add	r0, r0, #32
	b	.L84
.L86:
	.align	2, 0
.L85:
	.word	openfiles
.L82:
	add	r0, r3, #0
	bl	error
.L84:
	add	sp, sp, #12
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7, pc}
.Lfe13:
	.size	 _swiopen,.Lfe13-_swiopen
	.align	2, 0
	.globl	_open
	.type	 _open,function
	.thumb_func
_open:
	push	{r1, r2, r3}
	push	{lr}
	ldr	r1, [sp, #4]
	bl	_swiopen
	bl	wrap
	pop	{r3}
	add	sp, sp, #12
	bx	r3
.Lfe14:
	.size	 _open,.Lfe14-_open
	.align	2, 0
	.globl	_swiclose
	.type	 _swiclose,function
	.thumb_func
_swiclose:
	push	{lr}
	add	sp, sp, #-4
	bl	remap_handle
	str	r0, [sp]
	bl	findslot
	add	r1, r0, #0
	cmp	r1, #20
	beq	.L89	@cond_branch
	ldr	r0, .L91
	lsl	r1, r1, #3
	add	r1, r1, r0
	mov	r0, #1
	neg	r0, r0
	str	r0, [r1]
.L89:
	mov	r3, #2
	mov r0, r3; mov r1, sp; swi 171; mov r2, r0
	.code	16
	add	r0, r2, #0
	add	sp, sp, #4
	pop	{pc}
.L92:
	.align	2, 0
.L91:
	.word	openfiles
.Lfe15:
	.size	 _swiclose,.Lfe15-_swiclose
	.align	2, 0
	.globl	_close
	.type	 _close,function
	.thumb_func
_close:
	push	{lr}
	bl	_swiclose
	bl	wrap
	pop	{pc}
.Lfe16:
	.size	 _close,.Lfe16-_close
	.align	2, 0
	.globl	_exit
	.type	 _exit,function
	.thumb_func
_exit:
	mov	ip, r3
	mov	r3, r8
	push	{r3}
	mov	r3, ip
	mov	r2, #24
	ldr	r3, .L96
	mov r0, r2; mov r1, r3; swi 171; mov r8, r0
	.code	16
	pop	{r3}
	mov	r8, r3
	bx	lr
.L97:
	.align	2, 0
.L96:
	.word	131110
.Lfe17:
	.size	 _exit,.Lfe17-_exit
	.align	2, 0
	.globl	_kill
	.type	 _kill,function
	.thumb_func
_kill:
	mov	ip, r3
	mov	r3, r8
	push	{r3}
	mov	r3, ip
	mov	r2, #24
	ldr	r3, .L100
	mov r0, r2; mov r1, r3; swi 171; mov r8, r0
	.code	16
	pop	{r3}
	mov	r8, r3
	bx	lr
.L101:
	.align	2, 0
.L100:
	.word	131110
.Lfe18:
	.size	 _kill,.Lfe18-_kill
	.align	2, 0
	.globl	_getpid
	.type	 _getpid,function
	.thumb_func
_getpid:
	mov	r0, #1
	bx	lr
.Lfe19:
	.size	 _getpid,.Lfe19-_getpid

	.lcomm	heap_end.63,4
	.section .rodata
	.align	2, 0
.LC25:
	.ascii	"_sbrk: Heap and stack collision\n\000"
.text
	.align	2, 0
	.globl	_sbrk
	.type	 _sbrk,function
	.thumb_func
_sbrk:
	push	{r4, r5, r6, lr}
	add	r6, r0, #0
	ldr	r4, .L106
	ldr	r0, [r4]
	cmp	r0, #0
	bne	.L104	@cond_branch
	ldr	r0, .L106+4
	str	r0, [r4]
.L104:
	ldr	r5, [r4]
	add	r0, r5, r6
	cmp	r0, sp
	bls	.L105	@cond_branch
	ldr	r1, .L106+8
	mov	r0, #1
	mov	r2, #32
	bl	_write
	bl	abort
.L105:
	ldr	r0, [r4]
	add	r0, r0, r6
	str	r0, [r4]
	add	r0, r5, #0
	pop	{r4, r5, r6, pc}
.L107:
	.align	2, 0
.L106:
	.word	heap_end.63
	.word	end
	.word	.LC25
.Lfe20:
	.size	 _sbrk,.Lfe20-_sbrk
	.align	2, 0
	.globl	_fstat
	.type	 _fstat,function
	.thumb_func
_fstat:
	mov	r0, #128
	lsl	r0, r0, #6
	str	r0, [r1, #4]
	mov	r0, #0
	bx	lr
.Lfe21:
	.size	 _fstat,.Lfe21-_fstat
	.align	2, 0
	.globl	_unlink
	.type	 _unlink,function
	.thumb_func
_unlink:
	mov	r0, #1
	neg	r0, r0
	bx	lr
.Lfe22:
	.size	 _unlink,.Lfe22-_unlink
	.align	2, 0
	.globl	_raise
	.type	 _raise,function
	.thumb_func
_raise:
	bx	lr
.Lfe23:
	.size	 _raise,.Lfe23-_raise
	.align	2, 0
	.globl	_gettimeofday
	.type	 _gettimeofday,function
	.thumb_func
_gettimeofday:
	push	{r4, r5, lr}
	add	r2, r0, #0
	add	r3, r1, #0
	cmp	r2, #0
	beq	.L112	@cond_branch
	mov	r4, #17
	mov	r5, #0
	mov r0, r4; mov r1, r5; swi 171; mov r5, r0
	.code	16
	add	r4, r5, #0
	str	r4, [r2]
	mov	r0, #0
	str	r0, [r2, #4]
.L112:
	cmp	r3, #0
	beq	.L114	@cond_branch
	mov	r0, #0
	str	r0, [r3]
	str	r0, [r3, #4]
.L114:
	mov	r0, #0
	pop	{r4, r5, pc}
.Lfe24:
	.size	 _gettimeofday,.Lfe24-_gettimeofday
	.align	2, 0
	.globl	_times
	.type	 _times,function
	.thumb_func
_times:
	push	{r4, r5, lr}
	add	r2, r0, #0
	mov	r4, #16
	mov	r5, #0
	mov r0, r4; mov r1, r5; swi 171; mov r3, r0
	.code	16
	cmp	r2, #0
	beq	.L117	@cond_branch
	str	r3, [r2]
	mov	r0, #0
	str	r0, [r2, #4]
	str	r0, [r2, #8]
	str	r0, [r2, #12]
.L117:
	add	r0, r3, #0
	pop	{r4, r5, pc}
.Lfe25:
	.size	 _times,.Lfe25-_times

	.lcomm	monitor_stdin,4

	.lcomm	monitor_stdout,4

	.lcomm	monitor_stderr,4

	.lcomm	openfiles,160
.text
	.align	2, 0
