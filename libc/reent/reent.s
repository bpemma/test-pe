@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
.text
	.align	2, 0
	.globl	cleanup_glue
	.type	 cleanup_glue,function
	.thumb_func
cleanup_glue:
	push	{r4, r5, lr}
	add	r4, r0, #0
	add	r5, r1, #0
	ldr	r1, [r5]
	cmp	r1, #0
	beq	.L3	@cond_branch
	bl	cleanup_glue
.L3:
	add	r0, r4, #0
	add	r1, r5, #0
	bl	_free_r
	pop	{r4, r5, pc}
.Lfe1:
	.size	 cleanup_glue,.Lfe1-cleanup_glue
	.align	2, 0
	.globl	_reclaim_reent
	.type	 _reclaim_reent,function
	.thumb_func
_reclaim_reent:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	ldr	r0, .L25
	ldr	r0, [r0]
	cmp	r5, r0
	beq	.L5	@cond_branch
	ldr	r1, [r5, #76]
	cmp	r1, #0
	beq	.L6	@cond_branch
	mov	r2, #0
.L10:
	lsl	r0, r2, #2
	add	r0, r0, r1
	ldr	r4, [r0]
	add	r6, r2, #1
	cmp	r4, #0
	beq	.L9	@cond_branch
.L13:
	add	r1, r4, #0
	ldr	r4, [r4]
	add	r0, r5, #0
	bl	_free_r
	cmp	r4, #0
	bne	.L13	@cond_branch
.L9:
	add	r2, r6, #0
	ldr	r1, [r5, #76]
	cmp	r2, #14
	ble	.L10	@cond_branch
	add	r0, r5, #0
	bl	_free_r
.L6:
	mov	r1, #164
	lsl	r1, r1, #1
	add	r0, r5, r1
	ldr	r1, [r0]
	cmp	r1, #0
	beq	.L16	@cond_branch
	mov	r2, #166
	lsl	r2, r2, #1
	add	r0, r5, r2
	cmp	r1, r0
	beq	.L16	@cond_branch
	add	r4, r1, #0
	add	r6, r0, #0
.L20:
	add	r1, r4, #0
	ldr	r4, [r4]
	add	r0, r5, #0
	bl	_free_r
	cmp	r4, r6
	bne	.L20	@cond_branch
.L16:
	ldr	r1, [r5, #84]
	cmp	r1, #0
	beq	.L22	@cond_branch
	add	r0, r5, #0
	bl	_free_r
.L22:
	ldr	r0, [r5, #56]
	cmp	r0, #0
	beq	.L5	@cond_branch
	ldr	r1, [r5, #60]
	add	r0, r5, #0
	bl	_call_via_r1
	mov	r1, #236
	lsl	r1, r1, #1
	add	r0, r5, r1
	ldr	r1, [r0]
	cmp	r1, #0
	beq	.L5	@cond_branch
	add	r0, r5, #0
	bl	cleanup_glue
.L5:
	pop	{r4, r5, r6, pc}
.L26:
	.align	2, 0
.L25:
	.word	_impure_ptr
.Lfe2:
	.size	 _reclaim_reent,.Lfe2-_reclaim_reent
	.align	2, 0
	.globl	_wrapup_reent
	.type	 _wrapup_reent,function
	.thumb_func
_wrapup_reent:
	push	{r4, r5, r6, r7, lr}
	add	r7, r0, #0
	cmp	r7, #0
	bne	.L28	@cond_branch
	ldr	r0, .L40
	ldr	r7, [r0]
.L28:
	mov	r1, #164
	lsl	r1, r1, #1
	add	r0, r7, r1
	ldr	r6, [r0]
	cmp	r6, #0
	beq	.L30	@cond_branch
.L32:
	ldr	r4, [r6, #4]
	sub	r4, r4, #1
	cmp	r4, #0
	blt	.L31	@cond_branch
	lsl	r0, r4, #2
	add	r0, r0, #8
	add	r5, r0, r6
.L36:
	ldr	r0, [r5]
	bl	_call_via_r0
	sub	r5, r5, #4
	sub	r4, r4, #1
	cmp	r4, #0
	bge	.L36	@cond_branch
.L31:
	ldr	r6, [r6]
	cmp	r6, #0
	bne	.L32	@cond_branch
.L30:
	ldr	r1, [r7, #60]
	cmp	r1, #0
	beq	.L39	@cond_branch
	add	r0, r7, #0
	bl	_call_via_r1
.L39:
	pop	{r4, r5, r6, r7, pc}
.L41:
	.align	2, 0
.L40:
	.word	_impure_ptr
.Lfe3:
	.size	 _wrapup_reent,.Lfe3-_wrapup_reent
.text
	.align	2, 0
