@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
.text
	.align	2, 0
	.globl	_init_signal_r
	.type	 _init_signal_r,function
	.thumb_func
_init_signal_r:
	push	{r4, lr}
	add	r1, r0, #0
	mov	r0, #234
	lsl	r0, r0, #1
	add	r4, r1, r0
	ldr	r0, [r4]
	cmp	r0, #0
	bne	.L3	@cond_branch
	add	r0, r1, #0
	mov	r1, #128
	bl	_malloc_r
	str	r0, [r4]
	cmp	r0, #0
	bne	.L4	@cond_branch
	mov	r0, #1
	neg	r0, r0
	b	.L10
.L4:
	mov	r2, #0
	add	r3, r4, #0
	mov	r4, #0
.L8:
	ldr	r1, [r3]
	lsl	r0, r2, #2
	add	r0, r0, r1
	str	r4, [r0]
	add	r2, r2, #1
	cmp	r2, #31
	ble	.L8	@cond_branch
.L3:
	mov	r0, #0
.L10:
	pop	{r4, pc}
.Lfe1:
	.size	 _init_signal_r,.Lfe1-_init_signal_r
	.align	2, 0
	.globl	_signal_r
	.type	 _signal_r,function
	.thumb_func
_signal_r:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	add	r5, r1, #0
	add	r6, r2, #0
	cmp	r5, #31
	bls	.L12	@cond_branch
	mov	r0, #22
	str	r0, [r4]
	mov	r0, #1
	neg	r0, r0
	b	.L14
.L12:
	mov	r1, #234
	lsl	r1, r1, #1
	add	r0, r4, r1
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L13	@cond_branch
	add	r0, r4, #0
	bl	_init_signal_r
	cmp	r0, #0
	beq	.L13	@cond_branch
	mov	r0, #1
	neg	r0, r0
	b	.L14
.L13:
	mov	r1, #234
	lsl	r1, r1, #1
	add	r0, r4, r1
	ldr	r0, [r0]
	lsl	r1, r5, #2
	add	r1, r1, r0
	ldr	r0, [r1]
	str	r6, [r1]
.L14:
	pop	{r4, r5, r6, pc}
.Lfe2:
	.size	 _signal_r,.Lfe2-_signal_r
	.align	2, 0
	.globl	_raise_r
	.type	 _raise_r,function
	.thumb_func
_raise_r:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	add	r5, r1, #0
	mov	r6, #0
	cmp	r5, #31
	bls	.L16	@cond_branch
	mov	r0, #22
	str	r0, [r4]
	mov	r0, #1
	neg	r0, r0
	b	.L25
.L16:
	mov	r1, #234
	lsl	r1, r1, #1
	add	r0, r4, r1
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L17	@cond_branch
	add	r0, r4, #0
	bl	_init_signal_r
	cmp	r0, #0
	beq	.L17	@cond_branch
	mov	r0, #1
	neg	r0, r0
	b	.L25
.L17:
	mov	r2, #234
	lsl	r2, r2, #1
	add	r0, r4, r2
	ldr	r0, [r0]
	lsl	r1, r5, #2
	add	r0, r1, r0
	ldr	r2, [r0]
	cmp	r2, #0
	beq	.L19	@cond_branch
	cmp	r2, #0
	bgt	.L24	@cond_branch
	mov	r0, #1
	neg	r0, r0
	cmp	r2, r0
	beq	.L21	@cond_branch
	b	.L22
.L24:
	cmp	r2, #1
	beq	.L18	@cond_branch
	b	.L22
.L19:
	add	r0, r4, #0
	bl	_getpid_r
	add	r1, r0, #0
	add	r0, r4, #0
	add	r2, r5, #0
	bl	_kill_r
	b	.L25
.L21:
	mov	r0, #22
	str	r0, [r4]
	mov	r6, #1
	b	.L18
.L22:
	mov	r2, #234
	lsl	r2, r2, #1
	add	r0, r4, r2
	ldr	r0, [r0]
	add	r0, r1, r0
	ldr	r2, [r0]
	mov	r1, #0
	str	r1, [r0]
	add	r0, r5, #0
	bl	_call_via_r2
.L18:
	add	r0, r6, #0
.L25:
	pop	{r4, r5, r6, pc}
.Lfe3:
	.size	 _raise_r,.Lfe3-_raise_r
	.align	2, 0
	.globl	__sigtramp_r
	.type	 __sigtramp_r,function
	.thumb_func
__sigtramp_r:
	push	{r4, r5, lr}
	add	r4, r0, #0
	add	r5, r1, #0
	cmp	r5, #31
	bhi	.L37	@cond_branch
	mov	r1, #234
	lsl	r1, r1, #1
	add	r0, r4, r1
	ldr	r0, [r0]
	cmp	r0, #0
	bne	.L28	@cond_branch
	add	r0, r4, #0
	bl	_init_signal_r
	cmp	r0, #0
	beq	.L28	@cond_branch
.L37:
	mov	r0, #1
	neg	r0, r0
	b	.L36
.L28:
	mov	r2, #234
	lsl	r2, r2, #1
	add	r0, r4, r2
	ldr	r0, [r0]
	lsl	r1, r5, #2
	add	r0, r1, r0
	ldr	r2, [r0]
	cmp	r2, #0
	beq	.L30	@cond_branch
	cmp	r2, #0
	bgt	.L35	@cond_branch
	mov	r0, #1
	neg	r0, r0
	cmp	r2, r0
	beq	.L31	@cond_branch
	b	.L33
.L35:
	cmp	r2, #1
	beq	.L32	@cond_branch
	b	.L33
.L30:
	mov	r0, #1
	b	.L36
.L31:
	mov	r0, #2
	b	.L36
.L32:
	mov	r0, #3
	b	.L36
.L33:
	mov	r2, #234
	lsl	r2, r2, #1
	add	r0, r4, r2
	ldr	r0, [r0]
	add	r0, r1, r0
	ldr	r2, [r0]
	mov	r1, #0
	str	r1, [r0]
	add	r0, r5, #0
	bl	_call_via_r2
	mov	r0, #0
.L36:
	pop	{r4, r5, pc}
.Lfe4:
	.size	 __sigtramp_r,.Lfe4-__sigtramp_r
	.align	2, 0
	.globl	raise
	.type	 raise,function
	.thumb_func
raise:
	push	{lr}
	add	r1, r0, #0
	ldr	r0, .L39
	ldr	r0, [r0]
	bl	_raise_r
	pop	{pc}
.L40:
	.align	2, 0
.L39:
	.word	_impure_ptr
.Lfe5:
	.size	 raise,.Lfe5-raise
	.align	2, 0
	.globl	signal
	.type	 signal,function
	.thumb_func
signal:
	push	{lr}
	add	r3, r0, #0
	add	r2, r1, #0
	ldr	r0, .L42
	ldr	r0, [r0]
	add	r1, r3, #0
	bl	_signal_r
	pop	{pc}
.L43:
	.align	2, 0
.L42:
	.word	_impure_ptr
.Lfe6:
	.size	 signal,.Lfe6-signal
	.align	2, 0
	.globl	_init_signal
	.type	 _init_signal,function
	.thumb_func
_init_signal:
	push	{lr}
	ldr	r0, .L45
	ldr	r0, [r0]
	bl	_init_signal_r
	pop	{pc}
.L46:
	.align	2, 0
.L45:
	.word	_impure_ptr
.Lfe7:
	.size	 _init_signal,.Lfe7-_init_signal
	.align	2, 0
	.globl	__sigtramp
	.type	 __sigtramp,function
	.thumb_func
__sigtramp:
	push	{lr}
	add	r1, r0, #0
	ldr	r0, .L48
	ldr	r0, [r0]
	bl	__sigtramp_r
	pop	{pc}
.L49:
	.align	2, 0
.L48:
	.word	_impure_ptr
.Lfe8:
	.size	 __sigtramp,.Lfe8-__sigtramp
.text
	.align	2, 0
