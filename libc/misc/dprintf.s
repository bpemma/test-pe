@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
.text
	.align	2, 0
	.globl	__dprintf
	.type	 __dprintf,function
	.thumb_func
__dprintf:
	push	{r0, r1, r2, r3}
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-8
	ldr	r0, [sp, #36]
	mov	r8, r0
	mov	r1, #1
	mov	r0, sp
	strh	r1, [r0]
	ldr	r2, .L43
	mov	r1, #0
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L3	@cond_branch
	mov	r1, #1
.L3:
	str	r1, [r2]
	add	r6, sp, #40
	mov	r1, r8
	ldrb	r0, [r1]
	cmp	r0, #0
	bne	.LCB31
	b	.L5	@long jump
.LCB31:
.L6:
	cmp	r0, #37
	bne	.L8	@cond_branch
	mov	r2, #1
	add	r8, r8, r2
	mov	r1, r8
	ldrb	r0, [r1]
	cmp	r0, #37
	bne	.L7	@cond_branch
.L8:
	mov	r2, r8
	ldrb	r0, [r2]
	mov	r1, #1
	add	r8, r8, r1
	bl	write_char
	b	.L4
.L44:
	.align	2, 0
.L43:
	.word	big_endian_p
.L7:
	cmp	r0, #78
	beq	.LCB66
	b	.L9	@long jump
.LCB66:
	add	r6, r6, #4
	sub	r0, r6, #4
	ldr	r7, [r0]
	add	r6, r6, #4
	sub	r0, r6, #4
	ldr	r5, [r0]
	mov	r2, #1
	add	r8, r8, r2
	mov	r0, r8
	ldrb	r0, [r0]
	mov	r9, r0
	add	r8, r8, r2
	sub	r7, r7, #1
	cmp	r7, #0
	bge	.LCB82
	b	.L4	@long jump
.LCB82:
.L12:
	mov	r0, r9
	sub	r0, r0, #99
	cmp	r0, #21
	bhi	.L13	@cond_branch
	lsl	r0, r0, #2
	ldr	r1, .L45
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L46:
	.align	2, 0
.L45:
	.word	.L24
	.align	2, 0
	.align	2, 0
.L24:
	.word	.L14
	.word	.L18
	.word	.L13
	.word	.L13
	.word	.L13
	.word	.L13
	.word	.L13
	.word	.L13
	.word	.L13
	.word	.L13
	.word	.L13
	.word	.L13
	.word	.L13
	.word	.L15
	.word	.L13
	.word	.L13
	.word	.L23
	.word	.L13
	.word	.L18
	.word	.L13
	.word	.L13
	.word	.L18
.L14:
	ldr	r0, .L47
	ldrb	r2, [r5]
	lsl	r1, r2, #2
	add	r1, r1, r0
	add	r5, r5, #1
	ldr	r0, [r1]
	bl	write_string
	b	.L13
.L48:
	.align	2, 0
.L47:
	.word	__unctrl
.L15:
	add	r0, r5, #0
	mov	r1, #4
	mov	r2, #1
	bl	get_number
	add	r2, r0, #0
	mov	r0, #16
	mov	r1, #1
	b	.L42
.L18:
	mov	r3, #10
	mov	r0, r9
	cmp	r0, #120
	bne	.L19	@cond_branch
	mov	r3, #16
.L19:
	mov	r0, #100
	mov	r1, r9
	eor	r0, r0, r1
	neg	r4, r0
	orr	r4, r4, r0
	lsr	r4, r4, #31
	add	r0, r5, #0
	mov	r1, #4
	add	r2, r4, #0
	str	r3, [sp, #4]
	bl	get_number
	add	r2, r0, #0
	ldr	r3, [sp, #4]
	add	r0, r3, #0
	add	r1, r4, #0
.L42:
	bl	print_number
	add	r5, r5, #4
	b	.L13
.L23:
	ldmia	r5!, {r0}
	bl	write_string
.L13:
	cmp	r7, #0
	ble	.L10	@cond_branch
	mov	r0, #32
	bl	write_char
.L10:
	sub	r7, r7, #1
	cmp	r7, #0
	bge	.L12	@cond_branch
	b	.L4
.L9:
	mov	r2, r8
	ldrb	r2, [r2]
	mov	r9, r2
	mov	r0, r9
	sub	r0, r0, #99
	mov	r1, #1
	add	r8, r8, r1
	cmp	r0, #21
	bhi	.L4	@cond_branch
	lsl	r0, r0, #2
	ldr	r1, .L49
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L50:
	.align	2, 0
.L49:
	.word	.L39
	.align	2, 0
	.align	2, 0
.L39:
	.word	.L30
	.word	.L34
	.word	.L4
	.word	.L4
	.word	.L4
	.word	.L4
	.word	.L4
	.word	.L4
	.word	.L4
	.word	.L4
	.word	.L4
	.word	.L4
	.word	.L4
	.word	.L31
	.word	.L4
	.word	.L4
	.word	.L38
	.word	.L4
	.word	.L34
	.word	.L4
	.word	.L4
	.word	.L34
.L30:
	add	r6, r6, #4
	sub	r0, r6, #4
	ldr	r1, .L51
	ldrb	r0, [r0]
	lsl	r0, r0, #2
	add	r0, r0, r1
	ldr	r0, [r0]
	bl	write_string
	b	.L4
.L52:
	.align	2, 0
.L51:
	.word	__unctrl
.L31:
	add	r6, r6, #4
	sub	r0, r6, #4
	ldr	r2, [r0]
	mov	r0, #16
	mov	r1, #1
	bl	print_number
	b	.L4
.L34:
	add	r6, r6, #4
	sub	r0, r6, #4
	ldr	r2, [r0]
	mov	r3, #10
	mov	r0, r9
	cmp	r0, #120
	bne	.L35	@cond_branch
	mov	r3, #16
.L35:
	mov	r0, #100
	mov	r1, r9
	eor	r0, r0, r1
	neg	r1, r0
	orr	r1, r1, r0
	lsr	r1, r1, #31
	add	r0, r3, #0
	bl	print_number
	b	.L4
.L38:
	add	r6, r6, #4
	sub	r0, r6, #4
	ldr	r5, [r0]
	add	r0, r5, #0
	bl	write_string
.L4:
	mov	r2, r8
	ldrb	r0, [r2]
	cmp	r0, #0
	beq	.LCB283
	b	.L6	@long jump
.LCB283:
.L5:
	add	sp, sp, #8
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7}
	pop	{r3}
	add	sp, sp, #16
	bx	r3
.Lfe1:
	.size	 __dprintf,.Lfe1-__dprintf
	.align	2, 0
	.type	 parse_number,function
	.thumb_func
parse_number:
	push	{r4, r5, r6, r7, lr}
	add	r3, r0, #0
	add	r7, r1, #0
	mov	r4, #0
	ldrb	r2, [r3]
	ldr	r5, .L58
	add	r1, r2, r5
	mov	r0, #4
	ldrb	r1, [r1]
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L55	@cond_branch
	mov	r6, #4
.L56:
	lsl	r0, r4, #2
	add	r0, r0, r4
	lsl	r0, r0, #1
	sub	r0, r0, #48
	add	r4, r0, r2
	add	r3, r3, #1
	ldrb	r2, [r3]
	add	r1, r2, r5
	add	r0, r6, #0
	ldrb	r1, [r1]
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L56	@cond_branch
.L55:
	str	r4, [r7]
	add	r0, r3, #0
	pop	{r4, r5, r6, r7, pc}
.L59:
	.align	2, 0
.L58:
	.word	_ctype_+1
.Lfe2:
	.size	 parse_number,.Lfe2-parse_number
	.align	2, 0
	.type	 get_number,function
	.thumb_func
get_number:
	push	{r4, lr}
	add	r3, r0, #0
	cmp	r1, #2
	beq	.L64	@cond_branch
	cmp	r1, #2
	bgt	.L74	@cond_branch
	cmp	r1, #1
	beq	.L62	@cond_branch
	b	.L72
.L74:
	cmp	r1, #4
	beq	.L68	@cond_branch
	b	.L72
.L62:
	ldrb	r1, [r3]
	cmp	r2, #0
	bne	.L71	@cond_branch
	mov	r0, #128
	eor	r0, r0, r1
	add	r1, r0, #0
	sub	r1, r1, #128
	b	.L71
.L64:
	ldr	r0, .L79
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L65	@cond_branch
	ldrb	r0, [r3]
	lsl	r1, r0, #8
	ldrb	r3, [r3, #1]
	b	.L76
.L80:
	.align	2, 0
.L79:
	.word	big_endian_p
.L65:
	ldrb	r4, [r3, #1]
	lsl	r1, r4, #8
	ldrb	r3, [r3]
.L76:
	orr	r1, r1, r3
	cmp	r2, #0
	bne	.L71	@cond_branch
	mov	r0, #128
	lsl	r0, r0, #8
	eor	r0, r0, r1
	ldr	r2, .L81
	b	.L78
.L82:
	.align	2, 0
.L81:
	.word	-32768
.L68:
	ldr	r0, .L83
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L69	@cond_branch
	ldrb	r4, [r3]
	lsl	r1, r4, #24
	ldrb	r4, [r3, #1]
	lsl	r0, r4, #16
	orr	r1, r1, r0
	ldrb	r4, [r3, #2]
	lsl	r0, r4, #8
	orr	r1, r1, r0
	ldrb	r3, [r3, #3]
	b	.L77
.L84:
	.align	2, 0
.L83:
	.word	big_endian_p
.L69:
	ldrb	r0, [r3, #3]
	lsl	r1, r0, #24
	ldrb	r4, [r3, #2]
	lsl	r0, r4, #16
	orr	r1, r1, r0
	ldrb	r4, [r3, #1]
	lsl	r0, r4, #8
	orr	r1, r1, r0
	ldrb	r3, [r3]
.L77:
	orr	r1, r1, r3
	cmp	r2, #0
	bne	.L71	@cond_branch
	mov	r0, #128
	lsl	r0, r0, #24
	eor	r0, r0, r1
	mov	r2, #128
	lsl	r2, r2, #24
.L78:
	add	r1, r0, r2
.L71:
	add	r0, r1, #0
	b	.L75
.L72:
	mov	r0, #0
.L75:
	pop	{r4, pc}
.Lfe3:
	.size	 get_number,.Lfe3-get_number
.data
	.align	2, 0
	.type	 chars.12,object
	.size	 chars.12,16
chars.12:
	.ascii	"0123456789abcdef"
.text
	.align	2, 0
	.type	 print_number,function
	.thumb_func
print_number:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-32
	add	r6, r0, #0
	add	r4, r2, #0
	cmp	r1, #0
	bne	.L87	@cond_branch
	cmp	r4, #0
	bge	.L87	@cond_branch
	mov	r0, #45
	bl	write_char
	neg	r4, r4
.L87:
	mov	r5, sp
	add	r5, r5, #31
	mov	r0, #0
	strb	r0, [r5]
	ldr	r7, .L93
.L88:
	sub	r5, r5, #1
	add	r0, r4, #0
	add	r1, r6, #0
	bl	__umodsi3
	add	r0, r0, r7
	ldrb	r0, [r0]
	strb	r0, [r5]
	add	r0, r4, #0
	add	r1, r6, #0
	bl	__udivsi3
	add	r4, r0, #0
	cmp	r4, #0
	bne	.L88	@cond_branch
	add	r0, r5, #0
	bl	write_string
	add	sp, sp, #32
	pop	{r4, r5, r6, r7, pc}
.L94:
	.align	2, 0
.L93:
	.word	chars.12
.Lfe4:
	.size	 print_number,.Lfe4-print_number
	.align	2, 0
	.type	 write_char,function
	.thumb_func
write_char:
	push	{lr}
	add	sp, sp, #-4
	mov	r1, sp
	strb	r0, [r1]
	ldr	r0, .L96
	ldr	r0, [r0]
	mov	r1, #2
	mov	r2, sp
	mov	r3, #1
	bl	_write_r
	add	sp, sp, #4
	pop	{pc}
.L97:
	.align	2, 0
.L96:
	.word	_impure_ptr
.Lfe5:
	.size	 write_char,.Lfe5-write_char
	.align	2, 0
	.type	 write_string,function
	.thumb_func
write_string:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r0, .L99
	ldr	r4, [r0]
	add	r0, r5, #0
	bl	strlen
	add	r3, r0, #0
	add	r0, r4, #0
	mov	r1, #2
	add	r2, r5, #0
	bl	_write_r
	pop	{r4, r5, pc}
.L100:
	.align	2, 0
.L99:
	.word	_impure_ptr
.Lfe6:
	.size	 write_string,.Lfe6-write_string

	.lcomm	big_endian_p,4
.text
	.align	2, 0
