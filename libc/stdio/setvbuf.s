@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
.text
	.align	2, 0
	.globl	setvbuf
	.type	 setvbuf,function
	.thumb_func
setvbuf:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r4, r0, #0
	add	r5, r1, #0
	add	r6, r2, #0
	add	r7, r3, #0
	mov	r0, #0
	mov	r8, r0
	ldr	r0, [r4, #84]
	cmp	r0, #0
	bne	.L6	@cond_branch
	ldr	r0, .L29
	ldr	r0, [r0]
	str	r0, [r4, #84]
.L6:
	ldr	r1, [r4, #84]
	ldr	r0, [r1, #56]
	cmp	r0, #0
	bne	.L4	@cond_branch
	add	r0, r1, #0
	bl	__sinit
.L4:
	cmp	r6, #2
	bhi	.L11	@cond_branch
	cmp	r7, #0
	bge	.L10	@cond_branch
.L11:
	mov	r0, #1
	neg	r0, r0
	b	.L28
.L30:
	.align	2, 0
.L29:
	.word	_impure_ptr
.L10:
	add	r0, r4, #0
	bl	fflush
	mov	r1, r8
	str	r1, [r4, #4]
	str	r1, [r4, #24]
	mov	r0, #128
	ldrh	r2, [r4, #12]
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L12	@cond_branch
	ldr	r0, [r4, #84]
	ldr	r1, [r4, #16]
	bl	_free_r
.L12:
	mov	r0, #132
	neg	r0, r0
	ldrh	r1, [r4, #12]
	and	r0, r0, r1
	strh	r0, [r4, #12]
	cmp	r6, #2
	beq	.L14	@cond_branch
	cmp	r5, #0
	bne	.L15	@cond_branch
	add	r0, r7, #0
	bl	malloc
	add	r5, r0, #0
	cmp	r5, #0
	bne	.L17	@cond_branch
	mov	r2, #1
	neg	r2, r2
	mov	r8, r2
	mov	r0, #128
	lsl	r0, r0, #3
	bl	malloc
	add	r5, r0, #0
	cmp	r5, #0
	bne	.L17	@cond_branch
.L14:
	mov	r0, #2
	mov	r1, #0
	ldrh	r2, [r4, #12]
	orr	r0, r0, r2
	strh	r0, [r4, #12]
	str	r1, [r4, #8]
	add	r0, r4, #0
	add	r0, r0, #67
	str	r0, [r4]
	str	r0, [r4, #16]
	mov	r0, #1
	str	r0, [r4, #20]
	mov	r0, r8
	b	.L28
.L17:
	mov	r0, #128
	ldrh	r1, [r4, #12]
	orr	r0, r0, r1
	strh	r0, [r4, #12]
.L15:
	cmp	r6, #0
	beq	.L22	@cond_branch
	cmp	r6, #1
	bne	.L18	@cond_branch
	mov	r0, #1
	ldrh	r2, [r4, #12]
	orr	r0, r0, r2
	strh	r0, [r4, #12]
	cmp	r5, #0
	beq	.L20	@cond_branch
	neg	r0, r7
	str	r0, [r4, #24]
	b	.L22
.L20:
	str	r5, [r4, #24]
.L22:
	ldr	r1, [r4, #84]
	ldr	r0, .L31
	str	r0, [r1, #60]
	str	r5, [r4]
	str	r5, [r4, #16]
	str	r7, [r4, #20]
.L18:
	ldrh	r1, [r4, #12]
	mov	r0, #8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L25	@cond_branch
	mov	r0, #3
	and	r0, r0, r1
	mov	r1, #0
	cmp	r0, #0
	bne	.L26	@cond_branch
	add	r1, r7, #0
.L26:
	str	r1, [r4, #8]
.L25:
	mov	r0, #0
.L28:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7, pc}
.L32:
	.align	2, 0
.L31:
	.word	_cleanup_r
.Lfe1:
	.size	 setvbuf,.Lfe1-setvbuf
.text
	.align	2, 0
