@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
.text
	.align	2, 0
	.type	 __sprint,function
	.thumb_func
__sprint:
	push	{r4, lr}
	add	r4, r1, #0
	ldr	r1, [r4, #8]
	cmp	r1, #0
	beq	.L3	@cond_branch
	add	r1, r4, #0
	bl	__sfvwrite
	mov	r1, #0
	str	r1, [r4, #8]
	str	r1, [r4, #4]
	b	.L4
.L3:
	str	r1, [r4, #4]
	mov	r0, #0
.L4:
	pop	{r4, pc}
.Lfe1:
	.size	 __sprint,.Lfe1-__sprint
	.align	2, 0
	.type	 __sbprintf,function
	.thumb_func
__sbprintf:
	push	{r4, r5, lr}
	ldr	r4, .L8
	add	sp, sp, r4
	add	r5, r0, #0
	ldr	r0, [r5, #84]
	str	r0, [sp, #84]
	mov	r3, sp
	mov	r0, #3
	neg	r0, r0
	ldrh	r4, [r5, #12]
	and	r0, r0, r4
	mov	r4, #0
	strh	r0, [r3, #12]
	ldrh	r0, [r5, #14]
	strh	r0, [r3, #14]
	ldr	r0, [r5, #28]
	str	r0, [sp, #28]
	ldr	r0, [r5, #36]
	str	r0, [sp, #36]
	add	r0, sp, #88
	str	r0, [sp]
	str	r0, [sp, #16]
	mov	r0, #128
	lsl	r0, r0, #3
	str	r0, [sp, #8]
	str	r0, [sp, #20]
	str	r4, [sp, #24]
	mov	r0, sp
	bl	vfprintf
	add	r4, r0, #0
	cmp	r4, #0
	blt	.L6	@cond_branch
	mov	r0, sp
	bl	fflush
	cmp	r0, #0
	beq	.L6	@cond_branch
	mov	r4, #1
	neg	r4, r4
.L6:
	mov	r1, sp
	mov	r0, #64
	ldrh	r1, [r1, #12]
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L7	@cond_branch
	mov	r0, #64
	ldrh	r1, [r5, #12]
	orr	r0, r0, r1
	strh	r0, [r5, #12]
.L7:
	add	r0, r4, #0
	mov	r3, #139
	lsl	r3, r3, #3
	add	sp, sp, r3
	pop	{r4, r5, pc}
.L9:
	.align	2, 0
.L8:
	.word	-1112
.Lfe2:
	.size	 __sbprintf,.Lfe2-__sbprintf
	.align	2, 0
	.globl	vfprintf
	.type	 vfprintf,function
	.thumb_func
vfprintf:
	push	{r4, r5, lr}
	add	r4, r0, #0
	add	r5, r1, #0
	add	r3, r2, #0
	ldr	r0, [r4, #84]
	add	r1, r4, #0
	add	r2, r5, #0
	bl	_vfprintf_r
	pop	{r4, r5, pc}
.Lfe3:
	.size	 vfprintf,.Lfe3-vfprintf
	.section .rodata
	.type	 blanks.12,object
	.size	 blanks.12,16
blanks.12:
	.byte	32
	.byte	32
	.byte	32
	.byte	32
	.byte	32
	.byte	32
	.byte	32
	.byte	32
	.byte	32
	.byte	32
	.byte	32
	.byte	32
	.byte	32
	.byte	32
	.byte	32
	.byte	32
	.type	 zeroes.13,object
	.size	 zeroes.13,16
zeroes.13:
	.byte	48
	.byte	48
	.byte	48
	.byte	48
	.byte	48
	.byte	48
	.byte	48
	.byte	48
	.byte	48
	.byte	48
	.byte	48
	.byte	48
	.byte	48
	.byte	48
	.byte	48
	.byte	48
	.align	2, 0
.LC2:
	.ascii	"Inf\000"
	.align	2, 0
.LC4:
	.ascii	"NaN\000"
	.align	2, 0
.LC6:
	.ascii	"0123456789abcdef\000"
	.align	2, 0
.LC8:
	.ascii	"(null)\000"
	.align	2, 0
.LC10:
	.ascii	"0123456789ABCDEF\000"
	.align	2, 0
.LC12:
	.ascii	"bug in vfprintf: bad base\000"
	.align	2, 0
.LC17:
	.ascii	"0\000"
	.align	2, 0
.LC19:
	.ascii	".\000"
.text
	.align	2, 0
	.globl	_vfprintf_r
	.type	 _vfprintf_r,function
	.thumb_func
_vfprintf_r:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	ldr	r4, .L343
	add	sp, sp, r4
	str	r0, [sp, #476]
	str	r1, [sp, #480]
	add	r4, r2, #0
	mov	sl, r3
	bl	localeconv
	ldr	r0, [r0]
	str	r0, [sp, #504]
	mov	r1, #0
	add	r0, sp, #464
	str	r1, [r0]
	ldr	r1, [sp, #480]
	ldr	r0, [r1, #84]
	cmp	r0, #0
	bne	.L15	@cond_branch
	ldr	r0, .L343+4
	ldr	r0, [r0]
	str	r0, [r1, #84]
.L15:
	ldr	r2, [sp, #480]
	ldr	r1, [r2, #84]
	ldr	r0, [r1, #56]
	cmp	r0, #0
	bne	.L13	@cond_branch
	add	r0, r1, #0
	bl	__sinit
.L13:
	mov	r0, #8
	ldr	r1, [sp, #480]
	ldrh	r1, [r1, #12]
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L20	@cond_branch
	ldr	r2, [sp, #480]
	ldr	r0, [r2, #16]
	cmp	r0, #0
	bne	.L19	@cond_branch
.L20:
	ldr	r0, [sp, #480]
	bl	__swsetup
	cmp	r0, #0
	beq	.L19	@cond_branch
	mov	r0, #1
	neg	r0, r0
	bl	.L323	@ far jump
.L344:
	.align	2, 0
.L343:
	.word	-544
	.word	_impure_ptr
.L19:
	mov	r0, #26
	ldr	r1, [sp, #480]
	ldrh	r1, [r1, #12]
	and	r0, r0, r1
	cmp	r0, #10
	bne	.L21	@cond_branch
	ldr	r2, [sp, #480]
	mov	r1, #14
	ldrsh	r0, [r2, r1]
	cmp	r0, #0
	blt	.L21	@cond_branch
	add	r0, r2, #0
	add	r1, r4, #0
	mov	r2, sl
	bl	__sbprintf
	bl	.L323	@ far jump
.L21:
	str	r4, [sp, #484]
	add	r1, sp, #28
	add	r5, sp, #40
	str	r5, [sp, #28]
	mov	r0, #0
	str	r0, [r1, #8]
	str	r0, [r1, #4]
	mov	r2, #0
	str	r2, [sp, #496]
	mov	r9, r1
	mov	r4, #230
	lsl	r4, r4, #1
	add	r4, r4, sp
	str	r4, [sp, #532]
	mov	r0, #232
	lsl	r0, r0, #1
	add	r0, r0, sp
	str	r0, [sp, #536]
.L22:
	ldr	r1, [sp, #484]
	mov	r8, r1
.L25:
	ldr	r0, .L345
	ldr	r0, [r0]
	ldr	r1, .L345+4
	ldr	r3, [r1]
	ldr	r2, [sp, #536]
	str	r2, [sp]
	ldr	r1, [sp, #532]
	ldr	r2, [sp, #484]
	bl	_mbtowc_r
	add	r4, r0, #0
	cmp	r4, #0
	ble	.L26	@cond_branch
	ldr	r0, [sp, #484]
	add	r0, r0, r4
	str	r0, [sp, #484]
	add	r0, sp, #460
	ldr	r0, [r0]
	cmp	r0, #37
	bne	.L25	@cond_branch
	ldr	r1, [sp, #484]
	sub	r1, r1, #1
	str	r1, [sp, #484]
.L26:
	ldr	r2, [sp, #484]
	mov	r0, r8
	sub	r6, r2, r0
	cmp	r6, #0
	beq	.L30	@cond_branch
	str	r0, [r5]
	str	r6, [r5, #4]
	mov	r1, r9
	ldr	r0, [r1, #8]
	add	r0, r0, r6
	str	r0, [r1, #8]
	add	r5, r5, #8
	ldr	r0, [r1, #4]
	add	r0, r0, #1
	str	r0, [r1, #4]
	cmp	r0, #7
	ble	.L31	@cond_branch
	ldr	r0, [sp, #480]
	bl	__sprint
	cmp	r0, #0
	beq	.LCB317
	bl	.L33	@far jump
.LCB317:
	add	r5, sp, #40
.L31:
	ldr	r2, [sp, #496]
	add	r2, r2, r6
	str	r2, [sp, #496]
.L30:
	cmp	r4, #0
	bgt	.LCB325
	bl	.L35	@far jump
.LCB325:
	ldr	r4, [sp, #484]
	add	r4, r4, #1
	str	r4, [sp, #484]
	mov	r0, #0
	str	r0, [sp, #492]
	mov	r1, #0
	str	r1, [sp, #520]
	mov	r2, #0
	str	r2, [sp, #500]
	mov	r6, #1
	neg	r6, r6
	ldr	r0, .L345+8
	add	r0, r0, sp
	strb	r2, [r0]
.L36:
	ldr	r0, [sp, #484]
	ldrb	r0, [r0]
	str	r0, [sp, #488]
	ldr	r1, [sp, #484]
	add	r1, r1, #1
	str	r1, [sp, #484]
.L37:
	ldr	r0, [sp, #488]
	sub	r0, r0, #32
	cmp	r0, #88
	bls	.LCB354
	b	.L181	@long jump
.LCB354:
	lsl	r0, r0, #2
	ldr	r1, .L345+12
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L346:
	.align	2, 0
.L345:
	.word	_impure_ptr
	.word	__mb_cur_max
	.word	457
	.word	.L183
	.align	2, 0
	.align	2, 0
.L183:
	.word	.L39
	.word	.L181
	.word	.L181
	.word	.L41
	.word	.L181
	.word	.L181
	.word	.L181
	.word	.L181
	.word	.L181
	.word	.L181
	.word	.L42
	.word	.L45
	.word	.L181
	.word	.L44
	.word	.L46
	.word	.L181
	.word	.L54
	.word	.L63
	.word	.L63
	.word	.L63
	.word	.L63
	.word	.L63
	.word	.L63
	.word	.L63
	.word	.L63
	.word	.L63
	.word	.L181
	.word	.L181
	.word	.L181
	.word	.L181
	.word	.L181
	.word	.L181
	.word	.L181
	.word	.L181
	.word	.L181
	.word	.L181
	.word	.L76
	.word	.L89
	.word	.L181
	.word	.L89
	.word	.L181
	.word	.L181
	.word	.L181
	.word	.L181
	.word	.L69
	.word	.L181
	.word	.L181
	.word	.L127
	.word	.L181
	.word	.L181
	.word	.L181
	.word	.L181
	.word	.L181
	.word	.L142
	.word	.L181
	.word	.L181
	.word	.L148
	.word	.L181
	.word	.L181
	.word	.L181
	.word	.L181
	.word	.L181
	.word	.L181
	.word	.L181
	.word	.L181
	.word	.L181
	.word	.L181
	.word	.L75
	.word	.L78
	.word	.L89
	.word	.L89
	.word	.L89
	.word	.L70
	.word	.L78
	.word	.L181
	.word	.L181
	.word	.L71
	.word	.L181
	.word	.L122
	.word	.L128
	.word	.L134
	.word	.L74
	.word	.L181
	.word	.L135
	.word	.L181
	.word	.L143
	.word	.L181
	.word	.L181
	.word	.L150
.L39:
	ldr	r1, .L347
	add	r1, r1, sp
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.LCB381
	b	.L36	@long jump
.LCB381:
	mov	r0, #32
	strb	r0, [r1]
	b	.L36
.L348:
	.align	2, 0
.L347:
	.word	457
.L41:
	mov	r0, #1
	b	.L324
.L42:
	mov	r4, #4
	add	sl, sl, r4
	mov	r0, sl
	sub	r0, r0, #4
	ldr	r0, [r0]
	str	r0, [sp, #500]
	cmp	r0, #0
	blt	.LCB404
	b	.L36	@long jump
.LCB404:
	neg	r0, r0
	str	r0, [sp, #500]
.L44:
	mov	r0, #4
	b	.L325
.L45:
	ldr	r1, .L349
	add	r1, r1, sp
	mov	r0, #43
	strb	r0, [r1]
	b	.L36
.L350:
	.align	2, 0
.L349:
	.word	457
.L46:
	ldr	r2, [sp, #484]
	ldrb	r2, [r2]
	str	r2, [sp, #488]
	ldr	r4, [sp, #484]
	add	r4, r4, #1
	str	r4, [sp, #484]
	cmp	r2, #42
	bne	.L47	@cond_branch
	mov	r0, #4
	add	sl, sl, r0
	mov	r0, sl
	sub	r0, r0, #4
	ldr	r4, [r0]
	add	r6, r4, #0
	mov	r0, #1
	neg	r0, r0
	cmp	r6, r0
	blt	.LCB444
	b	.L36	@long jump
.LCB444:
	add	r6, r0, #0
	b	.L36
.L47:
	mov	r4, #0
	ldr	r0, [sp, #488]
	b	.L326
.L51:
	lsl	r0, r4, #2
	add	r0, r0, r4
	lsl	r0, r0, #1
	sub	r0, r0, #48
	ldr	r1, [sp, #488]
	add	r4, r0, r1
	ldr	r2, [sp, #484]
	ldrb	r2, [r2]
	str	r2, [sp, #488]
	ldr	r0, [sp, #484]
	add	r0, r0, #1
	str	r0, [sp, #484]
	add	r0, r2, #0
.L326:
	sub	r0, r0, #48
	cmp	r0, #9
	bls	.L51	@cond_branch
	add	r6, r4, #0
	mov	r0, #1
	neg	r0, r0
	cmp	r6, r0
	blt	.LCB480
	b	.L37	@long jump
.LCB480:
	add	r6, r0, #0
	b	.L37
.L54:
	mov	r0, #128
	b	.L325
.L63:
	mov	r4, #0
.L64:
	lsl	r0, r4, #2
	add	r0, r0, r4
	lsl	r0, r0, #1
	sub	r0, r0, #48
	ldr	r2, [sp, #488]
	add	r4, r0, r2
	ldr	r0, [sp, #484]
	ldrb	r0, [r0]
	str	r0, [sp, #488]
	ldr	r1, [sp, #484]
	add	r1, r1, #1
	str	r1, [sp, #484]
	sub	r0, r0, #48
	cmp	r0, #9
	bls	.L64	@cond_branch
	str	r4, [sp, #500]
	b	.L37
.L69:
	mov	r0, #8
	b	.L324
.L70:
	mov	r0, #64
	b	.L327
.L71:
	ldr	r0, [sp, #484]
	ldrb	r0, [r0]
	cmp	r0, #108
	bne	.L72	@cond_branch
	ldr	r1, [sp, #484]
	add	r1, r1, #1
	str	r1, [sp, #484]
	mov	r0, #32
.L324:
	ldr	r2, [sp, #492]
	orr	r2, r2, r0
	str	r2, [sp, #492]
	b	.L36
.L72:
	mov	r0, #16
.L327:
	ldr	r4, [sp, #492]
	orr	r4, r4, r0
	str	r4, [sp, #492]
	b	.L36
.L74:
	mov	r0, #32
.L325:
	ldr	r1, [sp, #492]
	orr	r1, r1, r0
	str	r1, [sp, #492]
	b	.L36
.L75:
	add	r2, sp, #104
	mov	r8, r2
	mov	r4, #4
	add	sl, sl, r4
	mov	r0, sl
	sub	r0, r0, #4
	ldr	r0, [r0]
	strb	r0, [r2]
	b	.L328
.L76:
	mov	r0, #16
	ldr	r1, [sp, #492]
	orr	r1, r1, r0
	str	r1, [sp, #492]
.L78:
	mov	r0, #16
	ldr	r2, [sp, #492]
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L79	@cond_branch
	mov	r4, #4
	add	sl, sl, r4
	b	.L329
.L79:
	mov	r0, #64
	ldr	r1, [sp, #492]
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L81	@cond_branch
	mov	r2, #4
	add	sl, sl, r2
	mov	r0, sl
	sub	r0, r0, #4
	mov	r1, #0
	ldrsh	r4, [r0, r1]
	b	.L80
.L81:
	mov	r2, #4
	add	sl, sl, r2
.L329:
	mov	r0, sl
	sub	r0, r0, #4
	ldr	r4, [r0]
.L80:
	cmp	r4, #0
	bge	.L83	@cond_branch
	neg	r4, r4
	ldr	r1, .L351
	add	r1, r1, sp
	mov	r0, #45
	strb	r0, [r1]
.L83:
	mov	r2, #1
	b	.L84
.L352:
	.align	2, 0
.L351:
	.word	457
.L89:
	mov	r0, #1
	neg	r0, r0
	cmp	r6, r0
	bne	.L90	@cond_branch
	mov	r6, #6
	b	.L91
.L90:
	ldr	r4, [sp, #488]
	cmp	r4, #103
	beq	.L93	@cond_branch
	cmp	r4, #71
	bne	.L91	@cond_branch
.L93:
	cmp	r6, #0
	bne	.L91	@cond_branch
	mov	r6, #1
.L91:
	mov	r0, #8
	ldr	r1, [sp, #492]
	and	r0, r0, r1
	mov	r2, #8
	add	sl, sl, r2
	mov	r0, sl
	sub	r0, r0, #8
	ldr	r1, [r0]		@ created by thumb_load_double_from_address
	ldr	r2, [r0, #4]		@ created by thumb_load_double_from_address
	str	r1, [sp, #508]
	str	r2, [sp, #512]
	ldr	r0, [sp, #508]		@ created by thumb_load_double_from_address
	ldr	r1, [sp, #512]		@ created by thumb_load_double_from_address
	bl	isinf
	cmp	r0, #0
	beq	.L96	@cond_branch
	ldr	r3, .L353+4		@ created by thumb_load_double_from_address
	ldr	r2, .L353		@ created by thumb_load_double_from_address
	ldr	r0, [sp, #508]		@ created by thumb_load_double_from_address
	ldr	r1, [sp, #512]		@ created by thumb_load_double_from_address
	bl	__ltdf2
	cmp	r0, #0
	bge	.L97	@cond_branch
	ldr	r1, .L353+8
	add	r1, r1, sp
	mov	r0, #45
	strb	r0, [r1]
.L97:
	ldr	r2, .L353+12
	mov	r8, r2
	mov	r3, #3
	b	.L330
.L354:
	.align	2, 0
.L353:
	.long 0x0, 0x0	@ double 0.00000000000000000000e0
	.word	457
	.word	.LC2
.L96:
	ldr	r0, [sp, #508]		@ created by thumb_load_double_from_address
	ldr	r1, [sp, #512]		@ created by thumb_load_double_from_address
	bl	isnan
	cmp	r0, #0
	beq	.L98	@cond_branch
	ldr	r4, .L355
	mov	r8, r4
	mov	r3, #3
	b	.L330
.L356:
	.align	2, 0
.L355:
	.word	.LC4
.L98:
	mov	r0, #128
	lsl	r0, r0, #1
	ldr	r1, [sp, #492]
	orr	r1, r1, r0
	str	r1, [sp, #492]
	str	r1, [sp]
	add	r0, sp, #456
	str	r0, [sp, #4]
	add	r0, sp, #468
	str	r0, [sp, #8]
	ldr	r2, [sp, #488]
	str	r2, [sp, #12]
	add	r0, sp, #472
	str	r0, [sp, #16]
	ldr	r0, [sp, #476]
	ldr	r1, [sp, #508]		@ created by thumb_load_double_from_address
	ldr	r2, [sp, #512]		@ created by thumb_load_double_from_address
	add	r3, r6, #0
	bl	cvt
	mov	r8, r0
	ldr	r4, [sp, #488]
	cmp	r4, #103
	beq	.L100	@cond_branch
	cmp	r4, #71
	bne	.L99	@cond_branch
.L100:
	add	r0, sp, #468
	ldr	r1, [r0]
	mov	r0, #4
	neg	r0, r0
	cmp	r1, r0
	ble	.L102	@cond_branch
	cmp	r1, r6
	ble	.L101	@cond_branch
.L102:
	mov	r0, #69
	ldr	r1, [sp, #488]
	cmp	r1, #103
	bne	.L103	@cond_branch
	mov	r0, #101
.L103:
	str	r0, [sp, #488]
	b	.L99
.L101:
	mov	r2, #103
	str	r2, [sp, #488]
.L99:
	ldr	r4, [sp, #488]
	cmp	r4, #101
	bgt	.L106	@cond_branch
	add	r0, sp, #468
	ldr	r1, [r0]
	sub	r1, r1, #1
	str	r1, [r0]
	add	r0, sp, #20
	ldr	r2, [sp, #488]
	bl	exponent
	str	r0, [sp, #516]
	add	r0, sp, #472
	ldr	r0, [r0]
	ldr	r1, [sp, #516]
	add	r3, r1, r0
	cmp	r0, #1
	bgt	.L331	@cond_branch
	b	.L342
.L106:
	ldr	r4, [sp, #488]
	cmp	r4, #102
	bne	.L110	@cond_branch
	add	r0, sp, #468
	ldr	r0, [r0]
	cmp	r0, #0
	ble	.L111	@cond_branch
	add	r3, r0, #0
	cmp	r6, #0
	bne	.L113	@cond_branch
	mov	r0, #1
	ldr	r1, [sp, #492]
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L109	@cond_branch
.L113:
	add	r0, r3, #1
	add	r3, r0, r6
	b	.L109
.L111:
	add	r3, r6, #2
	b	.L109
.L110:
	add	r0, sp, #468
	ldr	r1, [r0]
	add	r0, sp, #472
	ldr	r0, [r0]
	cmp	r1, r0
	blt	.L116	@cond_branch
	add	r3, r1, #0
.L342:
	mov	r0, #1
	ldr	r2, [sp, #492]
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L109	@cond_branch
.L331:
	add	r3, r3, #1
	b	.L109
.L116:
	cmp	r1, #0
	bgt	.L119	@cond_branch
	add	r0, r0, #2
	sub	r3, r0, r1
	b	.L109
.L119:
	add	r3, r0, #1
.L109:
	add	r0, sp, #456
	ldrb	r0, [r0]
	add	r7, r5, #0
	add	r7, r7, #8
	cmp	r0, #0
	bne	.LCB855
	b	.L38	@long jump
.LCB855:
	ldr	r1, .L357
	add	r1, r1, sp
	mov	r0, #45
	strb	r0, [r1]
	b	.L38
.L358:
	.align	2, 0
.L357:
	.word	457
.L122:
	mov	r0, #16
	ldr	r4, [sp, #492]
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L123	@cond_branch
	mov	r0, #4
	add	sl, sl, r0
	mov	r0, sl
	sub	r0, r0, #4
	ldr	r0, [r0]
	ldr	r1, [sp, #496]
	str	r1, [r0]
	b	.L22
.L123:
	mov	r0, #64
	ldr	r2, [sp, #492]
	and	r2, r2, r0
	cmp	r2, #0
	beq	.L125	@cond_branch
	mov	r4, #4
	add	sl, sl, r4
	mov	r0, sl
	sub	r0, r0, #4
	ldr	r0, [r0]
	add	r1, sp, #496
	ldrh	r1, [r1]
	strh	r1, [r0]
	b	.L22
.L125:
	mov	r2, #4
	add	sl, sl, r2
	mov	r0, sl
	sub	r0, r0, #4
	ldr	r0, [r0]
	ldr	r4, [sp, #496]
	str	r4, [r0]
	b	.L22
.L127:
	mov	r0, #16
	ldr	r1, [sp, #492]
	orr	r1, r1, r0
	str	r1, [sp, #492]
.L128:
	mov	r0, #16
	ldr	r2, [sp, #492]
	and	r0, r0, r2
	cmp	r0, #0
	bne	.L131	@cond_branch
	mov	r0, #64
	ldr	r1, [sp, #492]
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L131	@cond_branch
	mov	r2, #4
	add	sl, sl, r2
	mov	r0, sl
	sub	r0, r0, #4
	ldrh	r4, [r0]
	b	.L130
.L131:
	mov	r4, #4
	add	sl, sl, r4
	mov	r0, sl
	sub	r0, r0, #4
	ldr	r4, [r0]
.L130:
	mov	r2, #0
	b	.L133
.L134:
	mov	r0, #4
	add	sl, sl, r0
	mov	r0, sl
	sub	r0, r0, #4
	ldr	r4, [r0]
	mov	r2, #2
	ldr	r1, .L359
	str	r1, [sp, #528]
	ldr	r0, [sp, #492]
	orr	r0, r0, r2
	str	r0, [sp, #492]
	mov	r1, #120
	str	r1, [sp, #488]
	b	.L133
.L360:
	.align	2, 0
.L359:
	.word	.LC6
.L135:
	mov	r2, #4
	add	sl, sl, r2
	mov	r0, sl
	sub	r0, r0, #4
	ldr	r0, [r0]
	mov	r8, r0
	cmp	r0, #0
	bne	.L136	@cond_branch
	ldr	r4, .L361
	mov	r8, r4
.L136:
	cmp	r6, #0
	blt	.L137	@cond_branch
	mov	r0, r8
	mov	r1, #0
	add	r2, r6, #0
	bl	memchr
	cmp	r0, #0
	beq	.L332	@cond_branch
	mov	r1, r8
	sub	r3, r0, r1
	cmp	r3, r6
	bgt	.LCB997
	b	.L333	@long jump
.LCB997:
.L332:
	add	r3, r6, #0
	b	.L333
.L362:
	.align	2, 0
.L361:
	.word	.LC8
.L137:
	mov	r0, r8
	bl	strlen
	add	r3, r0, #0
	b	.L333
.L142:
	mov	r0, #16
	ldr	r2, [sp, #492]
	orr	r2, r2, r0
	str	r2, [sp, #492]
.L143:
	mov	r0, #16
	ldr	r4, [sp, #492]
	and	r0, r0, r4
	cmp	r0, #0
	beq	.L144	@cond_branch
	mov	r0, #4
	add	sl, sl, r0
	b	.L334
.L144:
	mov	r0, #64
	ldr	r1, [sp, #492]
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L146	@cond_branch
	mov	r2, #4
	add	sl, sl, r2
	mov	r0, sl
	sub	r0, r0, #4
	ldrh	r4, [r0]
	b	.L145
.L146:
	mov	r4, #4
	add	sl, sl, r4
.L334:
	mov	r0, sl
	sub	r0, r0, #4
	ldr	r4, [r0]
.L145:
	mov	r2, #1
	b	.L133
.L148:
	ldr	r0, .L363
	str	r0, [sp, #528]
	b	.L149
.L364:
	.align	2, 0
.L363:
	.word	.LC10
.L150:
	ldr	r1, .L365
	str	r1, [sp, #528]
.L149:
	mov	r0, #16
	ldr	r2, [sp, #492]
	and	r0, r0, r2
	cmp	r0, #0
	bne	.L153	@cond_branch
	mov	r0, #64
	ldr	r1, [sp, #492]
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L153	@cond_branch
	mov	r2, #4
	add	sl, sl, r2
	mov	r0, sl
	sub	r0, r0, #4
	ldrh	r4, [r0]
	b	.L152
.L366:
	.align	2, 0
.L365:
	.word	.LC6
.L153:
	mov	r4, #4
	add	sl, sl, r4
	mov	r0, sl
	sub	r0, r0, #4
	ldr	r4, [r0]
.L152:
	mov	r2, #2
	mov	r0, #1
	ldr	r1, [sp, #492]
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L133	@cond_branch
	cmp	r4, #0
	beq	.L133	@cond_branch
	orr	r1, r1, r2
	str	r1, [sp, #492]
.L133:
	ldr	r1, .L367
	add	r1, r1, sp
	mov	r0, #0
	strb	r0, [r1]
.L84:
	str	r6, [sp, #520]
	cmp	r6, #0
	blt	.L156	@cond_branch
	mov	r0, #129
	neg	r0, r0
	ldr	r1, [sp, #492]
	and	r1, r1, r0
	str	r1, [sp, #492]
.L156:
	mov	r0, #226
	lsl	r0, r0, #1
	add	r0, r0, sp
	mov	r8, r0
	cmp	r4, #0
	bne	.L158	@cond_branch
	add	r7, r5, #0
	add	r7, r7, #8
	ldr	r1, [sp, #520]
	cmp	r1, #0
	beq	.L157	@cond_branch
.L158:
	cmp	r2, #1
	beq	.L167	@cond_branch
	cmp	r2, #1
	bcc	.L160	@cond_branch
	cmp	r2, #2
	beq	.L172	@cond_branch
	ldr	r2, .L367+4
	mov	r8, r2
	mov	r0, r8
	bl	strlen
	add	r3, r0, #0
	b	.L330
.L368:
	.align	2, 0
.L367:
	.word	457
	.word	.LC12
.L160:
	add	r7, r5, #0
	add	r7, r7, #8
	mov	r2, #7
.L161:
	mov	r0, #1
	neg	r0, r0
	add	r8, r8, r0
	add	r0, r4, #0
	and	r0, r0, r2
	add	r1, r0, #0
	add	r1, r1, #48
	mov	r0, r8
	strb	r1, [r0]
	lsr	r4, r4, #3
	cmp	r4, #0
	bne	.L161	@cond_branch
	mov	r0, #1
	ldr	r2, [sp, #492]
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L157	@cond_branch
	cmp	r1, #48
	beq	.L157	@cond_branch
	mov	r4, #1
	neg	r4, r4
	add	r8, r8, r4
	mov	r0, #48
	mov	r1, r8
	strb	r0, [r1]
	b	.L157
.L167:
	add	r7, r5, #0
	add	r7, r7, #8
	cmp	r4, #9
	bls	.L169	@cond_branch
.L170:
	mov	r2, #1
	neg	r2, r2
	add	r8, r8, r2
	add	r0, r4, #0
	mov	r1, #10
	bl	__umodsi3
	add	r0, r0, #48
	mov	r1, r8
	strb	r0, [r1]
	add	r0, r4, #0
	mov	r1, #10
	bl	__udivsi3
	add	r4, r0, #0
	cmp	r4, #9
	bhi	.L170	@cond_branch
.L169:
	mov	r2, #1
	neg	r2, r2
	add	r8, r8, r2
	add	r0, r4, #0
	add	r0, r0, #48
	mov	r4, r8
	strb	r0, [r4]
	b	.L157
.L172:
	add	r7, r5, #0
	add	r7, r7, #8
	mov	r1, #15
.L173:
	mov	r0, #1
	neg	r0, r0
	add	r8, r8, r0
	add	r0, r4, #0
	and	r0, r0, r1
	ldr	r2, [sp, #528]
	add	r0, r2, r0
	ldrb	r0, [r0]
	mov	r2, r8
	strb	r0, [r2]
	lsr	r4, r4, #4
	cmp	r4, #0
	bne	.L173	@cond_branch
.L157:
	add	r4, sp, #20
	mov	r1, r8
	sub	r0, r4, r1
	mov	r2, #216
	lsl	r2, r2, #1
	add	r3, r0, r2
	b	.L38
.L181:
	ldr	r4, [sp, #488]
	cmp	r4, #0
	bne	.LCB1280
	b	.L35	@long jump
.LCB1280:
	add	r0, sp, #104
	mov	r8, r0
	strb	r4, [r0]
.L328:
	mov	r3, #1
.L333:
	ldr	r1, .L369
	add	r1, r1, sp
	mov	r0, #0
	strb	r0, [r1]
.L330:
	add	r7, r5, #0
	add	r7, r7, #8
.L38:
	str	r3, [sp, #524]
	ldr	r2, [sp, #520]
	cmp	r3, r2
	bge	.L184	@cond_branch
	str	r2, [sp, #524]
.L184:
	ldr	r0, .L369
	add	r0, r0, sp
	ldrb	r0, [r0]
	cmp	r0, #0
	beq	.L185	@cond_branch
	ldr	r4, [sp, #524]
	add	r4, r4, #1
	str	r4, [sp, #524]
	b	.L186
.L370:
	.align	2, 0
.L369:
	.word	457
.L185:
	mov	r0, #2
	ldr	r1, [sp, #492]
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L186	@cond_branch
	ldr	r2, [sp, #524]
	add	r2, r2, #2
	str	r2, [sp, #524]
.L186:
	mov	r0, #132
	ldr	r4, [sp, #492]
	and	r0, r0, r4
	cmp	r0, #0
	bne	.L188	@cond_branch
	ldr	r0, [sp, #500]
	ldr	r1, [sp, #524]
	sub	r4, r0, r1
	cmp	r4, #0
	ble	.L188	@cond_branch
	ldr	r1, .L371
	cmp	r4, #16
	ble	.L191	@cond_branch
	mov	r6, r9
.L192:
	str	r1, [r5]
	mov	r0, #16
	str	r0, [r5, #4]
	ldr	r0, [r6, #8]
	add	r0, r0, #16
	str	r0, [r6, #8]
	add	r5, r7, #0
	ldr	r0, [r6, #4]
	add	r0, r0, #1
	str	r0, [r6, #4]
	cmp	r0, #7
	ble	.L193	@cond_branch
	ldr	r0, [sp, #480]
	mov	r1, r9
	str	r3, [sp, #540]
	bl	__sprint
	ldr	r3, [sp, #540]
	cmp	r0, #0
	beq	.LCB1371
	b	.L33	@long jump
.LCB1371:
	add	r5, sp, #40
	ldr	r1, .L371
.L193:
	sub	r4, r4, #16
	add	r7, r5, #0
	add	r7, r7, #8
	cmp	r4, #16
	bgt	.L192	@cond_branch
.L191:
	str	r1, [r5]
	str	r4, [r5, #4]
	mov	r2, r9
	ldr	r0, [r2, #8]
	add	r0, r0, r4
	str	r0, [r2, #8]
	add	r5, r7, #0
	ldr	r0, [r2, #4]
	add	r0, r0, #1
	str	r0, [r2, #4]
	cmp	r0, #7
	ble	.L188	@cond_branch
	ldr	r0, [sp, #480]
	mov	r1, r9
	str	r3, [sp, #540]
	bl	__sprint
	ldr	r3, [sp, #540]
	cmp	r0, #0
	beq	.LCB1407
	b	.L33	@long jump
.LCB1407:
	add	r5, sp, #40
.L188:
	ldr	r1, .L371+4
	add	r1, r1, sp
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.L198	@cond_branch
	str	r1, [r5]
	mov	r0, #1
	str	r0, [r5, #4]
	mov	r4, r9
	ldr	r0, [r4, #8]
	add	r0, r0, #1
	str	r0, [r4, #8]
	add	r5, r5, #8
	ldr	r0, [r4, #4]
	add	r0, r0, #1
	str	r0, [r4, #4]
	cmp	r0, #7
	ble	.L201	@cond_branch
	ldr	r0, [sp, #480]
	mov	r1, r9
	b	.L335
.L372:
	.align	2, 0
.L371:
	.word	blanks.12
	.word	457
.L198:
	mov	r2, #2
	ldr	r0, [sp, #492]
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L201	@cond_branch
	add	r1, sp, #452
	mov	r0, #48
	strb	r0, [r1]
	add	r0, sp, #488
	ldrb	r0, [r0]
	strb	r0, [r1, #1]
	str	r1, [r5]
	str	r2, [r5, #4]
	mov	r1, r9
	ldr	r0, [r1, #8]
	add	r0, r0, #2
	str	r0, [r1, #8]
	add	r5, r5, #8
	ldr	r0, [r1, #4]
	add	r0, r0, #1
	str	r0, [r1, #4]
	cmp	r0, #7
	ble	.L201	@cond_branch
	ldr	r0, [sp, #480]
.L335:
	str	r3, [sp, #540]
	bl	__sprint
	ldr	r3, [sp, #540]
	cmp	r0, #0
	beq	.LCB1482
	b	.L33	@long jump
.LCB1482:
	add	r5, sp, #40
.L201:
	mov	r0, #132
	ldr	r2, [sp, #492]
	and	r0, r0, r2
	cmp	r0, #128
	bne	.L205	@cond_branch
	ldr	r0, [sp, #500]
	ldr	r1, [sp, #524]
	sub	r4, r0, r1
	cmp	r4, #0
	ble	.L205	@cond_branch
	ldr	r1, .L373
	cmp	r4, #16
	ble	.L208	@cond_branch
	mov	r6, r9
.L209:
	str	r1, [r5]
	mov	r0, #16
	str	r0, [r5, #4]
	ldr	r0, [r6, #8]
	add	r0, r0, #16
	str	r0, [r6, #8]
	add	r5, r5, #8
	ldr	r0, [r6, #4]
	add	r0, r0, #1
	str	r0, [r6, #4]
	cmp	r0, #7
	ble	.L210	@cond_branch
	ldr	r0, [sp, #480]
	mov	r1, r9
	str	r3, [sp, #540]
	bl	__sprint
	ldr	r3, [sp, #540]
	cmp	r0, #0
	beq	.LCB1526
	b	.L33	@long jump
.LCB1526:
	add	r5, sp, #40
	ldr	r1, .L373
.L210:
	sub	r4, r4, #16
	cmp	r4, #16
	bgt	.L209	@cond_branch
.L208:
	str	r1, [r5]
	str	r4, [r5, #4]
	mov	r2, r9
	ldr	r0, [r2, #8]
	add	r0, r0, r4
	str	r0, [r2, #8]
	add	r5, r5, #8
	ldr	r0, [r2, #4]
	add	r0, r0, #1
	str	r0, [r2, #4]
	cmp	r0, #7
	ble	.L205	@cond_branch
	ldr	r0, [sp, #480]
	mov	r1, r9
	str	r3, [sp, #540]
	bl	__sprint
	ldr	r3, [sp, #540]
	cmp	r0, #0
	beq	.LCB1560
	b	.L33	@long jump
.LCB1560:
	add	r5, sp, #40
.L205:
	ldr	r0, [sp, #520]
	sub	r4, r0, r3
	cmp	r4, #0
	ble	.L215	@cond_branch
	ldr	r1, .L373
	cmp	r4, #16
	ble	.L217	@cond_branch
	mov	r6, r9
.L218:
	str	r1, [r5]
	mov	r0, #16
	str	r0, [r5, #4]
	ldr	r0, [r6, #8]
	add	r0, r0, #16
	str	r0, [r6, #8]
	add	r5, r5, #8
	ldr	r0, [r6, #4]
	add	r0, r0, #1
	str	r0, [r6, #4]
	cmp	r0, #7
	ble	.L219	@cond_branch
	ldr	r0, [sp, #480]
	mov	r1, r9
	str	r3, [sp, #540]
	bl	__sprint
	ldr	r3, [sp, #540]
	cmp	r0, #0
	beq	.LCB1598
	b	.L33	@long jump
.LCB1598:
	add	r5, sp, #40
	ldr	r1, .L373
.L219:
	sub	r4, r4, #16
	cmp	r4, #16
	bgt	.L218	@cond_branch
.L217:
	str	r1, [r5]
	str	r4, [r5, #4]
	mov	r1, r9
	ldr	r0, [r1, #8]
	add	r0, r0, r4
	str	r0, [r1, #8]
	add	r5, r5, #8
	ldr	r0, [r1, #4]
	add	r0, r0, #1
	str	r0, [r1, #4]
	cmp	r0, #7
	ble	.L215	@cond_branch
	ldr	r0, [sp, #480]
	str	r3, [sp, #540]
	bl	__sprint
	ldr	r3, [sp, #540]
	cmp	r0, #0
	beq	.LCB1631
	b	.L33	@long jump
.LCB1631:
	add	r5, sp, #40
.L215:
	mov	r0, #128
	lsl	r0, r0, #1
	ldr	r2, [sp, #492]
	and	r0, r0, r2
	cmp	r0, #0
	bne	.L224	@cond_branch
	mov	r4, r8
	str	r4, [r5]
	str	r3, [r5, #4]
	mov	r1, r9
	ldr	r0, [r1, #8]
	add	r0, r0, r3
	str	r0, [r1, #8]
	add	r5, r5, #8
	ldr	r0, [r1, #4]
	add	r0, r0, #1
	str	r0, [r1, #4]
	cmp	r0, #7
	bgt	.LCB1655
	b	.L227	@long jump
.LCB1655:
	ldr	r0, [sp, #480]
	b	.L336
.L374:
	.align	2, 0
.L373:
	.word	zeroes.13
.L224:
	ldr	r2, [sp, #488]
	cmp	r2, #101
	bgt	.LCB1671
	b	.L228	@long jump
.LCB1671:
	ldr	r3, .L375+4		@ created by thumb_load_double_from_address
	ldr	r2, .L375		@ created by thumb_load_double_from_address
	ldr	r0, [sp, #508]		@ created by thumb_load_double_from_address
	ldr	r1, [sp, #512]		@ created by thumb_load_double_from_address
	bl	__eqdf2
	cmp	r0, #0
	bne	.L229	@cond_branch
	ldr	r0, .L375+8
	str	r0, [r5]
	mov	r6, #1
	str	r6, [r5, #4]
	mov	r4, r9
	ldr	r0, [r4, #8]
	add	r0, r0, #1
	str	r0, [r4, #8]
	add	r5, r5, #8
	ldr	r0, [r4, #4]
	add	r0, r0, #1
	str	r0, [r4, #4]
	cmp	r0, #7
	ble	.L230	@cond_branch
	ldr	r0, [sp, #480]
	mov	r1, r9
	bl	__sprint
	cmp	r0, #0
	beq	.LCB1703
	b	.L33	@long jump
.LCB1703:
	add	r5, sp, #40
.L230:
	add	r0, sp, #468
	ldr	r1, [r0]
	add	r4, sp, #472
	ldr	r0, [r4]
	cmp	r1, r0
	blt	.L233	@cond_branch
	ldr	r0, [sp, #492]
	and	r0, r0, r6
	cmp	r0, #0
	bne	.LCB1717
	b	.L227	@long jump
.LCB1717:
.L233:
	ldr	r0, [sp, #504]
	str	r0, [r5]
	str	r6, [r5, #4]
	mov	r1, r9
	ldr	r0, [r1, #8]
	add	r0, r0, #1
	str	r0, [r1, #8]
	add	r5, r5, #8
	ldr	r0, [r1, #4]
	add	r0, r0, #1
	str	r0, [r1, #4]
	cmp	r0, #7
	ble	.L234	@cond_branch
	ldr	r0, [sp, #480]
	bl	__sprint
	cmp	r0, #0
	beq	.LCB1739
	b	.L33	@long jump
.LCB1739:
	add	r5, sp, #40
.L234:
	ldr	r0, [r4]
	sub	r4, r0, #1
	cmp	r4, #0
	bgt	.LCB1748
	b	.L227	@long jump
.LCB1748:
	ldr	r1, .L375+12
	cmp	r4, #16
	ble	.L238	@cond_branch
	mov	r6, r9
.L239:
	str	r1, [r5]
	mov	r0, #16
	str	r0, [r5, #4]
	ldr	r0, [r6, #8]
	add	r0, r0, #16
	str	r0, [r6, #8]
	add	r5, r5, #8
	ldr	r0, [r6, #4]
	add	r0, r0, #1
	str	r0, [r6, #4]
	cmp	r0, #7
	ble	.L240	@cond_branch
	ldr	r0, [sp, #480]
	mov	r1, r9
	bl	__sprint
	cmp	r0, #0
	beq	.LCB1777
	b	.L33	@long jump
.LCB1777:
	add	r5, sp, #40
	ldr	r1, .L375+12
.L240:
	sub	r4, r4, #16
	cmp	r4, #16
	bgt	.L239	@cond_branch
.L238:
	str	r1, [r5]
	str	r4, [r5, #4]
	mov	r2, r9
	ldr	r0, [r2, #8]
	add	r0, r0, r4
	b	.L337
.L376:
	.align	2, 0
.L375:
	.long 0x0, 0x0	@ double 0.00000000000000000000e0
	.word	.LC17
	.word	zeroes.13
.L229:
	add	r6, sp, #468
	ldr	r2, [r6]
	cmp	r2, #0
	bgt	.L246	@cond_branch
	ldr	r0, .L377
	str	r0, [r5]
	mov	r4, #1
	str	r4, [r5, #4]
	mov	r1, r9
	ldr	r0, [r1, #8]
	add	r0, r0, #1
	str	r0, [r1, #8]
	add	r5, r5, #8
	ldr	r0, [r1, #4]
	add	r0, r0, #1
	str	r0, [r1, #4]
	cmp	r0, #7
	ble	.L247	@cond_branch
	ldr	r0, [sp, #480]
	bl	__sprint
	cmp	r0, #0
	beq	.LCB1836
	b	.L33	@long jump
.LCB1836:
	add	r5, sp, #40
.L247:
	ldr	r2, [sp, #504]
	str	r2, [r5]
	str	r4, [r5, #4]
	mov	r4, r9
	ldr	r0, [r4, #8]
	add	r0, r0, #1
	str	r0, [r4, #8]
	add	r5, r5, #8
	ldr	r0, [r4, #4]
	add	r0, r0, #1
	str	r0, [r4, #4]
	cmp	r0, #7
	ble	.L249	@cond_branch
	ldr	r0, [sp, #480]
	mov	r1, r9
	bl	__sprint
	cmp	r0, #0
	beq	.LCB1859
	b	.L33	@long jump
.LCB1859:
	add	r5, sp, #40
.L249:
	ldr	r0, [r6]
	neg	r4, r0
	cmp	r4, #0
	ble	.L251	@cond_branch
	ldr	r1, .L377+4
	cmp	r4, #16
	ble	.L253	@cond_branch
	mov	r6, r9
.L254:
	str	r1, [r5]
	mov	r0, #16
	str	r0, [r5, #4]
	ldr	r0, [r6, #8]
	add	r0, r0, #16
	str	r0, [r6, #8]
	add	r5, r5, #8
	ldr	r0, [r6, #4]
	add	r0, r0, #1
	str	r0, [r6, #4]
	cmp	r0, #7
	ble	.L255	@cond_branch
	ldr	r0, [sp, #480]
	mov	r1, r9
	bl	__sprint
	cmp	r0, #0
	beq	.LCB1897
	b	.L33	@long jump
.LCB1897:
	add	r5, sp, #40
	ldr	r1, .L377+4
.L255:
	sub	r4, r4, #16
	cmp	r4, #16
	bgt	.L254	@cond_branch
.L253:
	str	r1, [r5]
	str	r4, [r5, #4]
	mov	r1, r9
	ldr	r0, [r1, #8]
	add	r0, r0, r4
	str	r0, [r1, #8]
	add	r5, r5, #8
	ldr	r0, [r1, #4]
	add	r0, r0, #1
	str	r0, [r1, #4]
	cmp	r0, #7
	ble	.L251	@cond_branch
	ldr	r0, [sp, #480]
	bl	__sprint
	cmp	r0, #0
	beq	.LCB1928
	b	.L33	@long jump
.LCB1928:
	add	r5, sp, #40
.L251:
	mov	r2, r8
	str	r2, [r5]
	add	r0, sp, #472
	ldr	r1, [r0]
	str	r1, [r5, #4]
	mov	r4, r9
	ldr	r0, [r4, #8]
	add	r0, r0, r1
	str	r0, [r4, #8]
	add	r5, r5, #8
	ldr	r0, [r4, #4]
	add	r0, r0, #1
	str	r0, [r4, #4]
	b	.L338
.L378:
	.align	2, 0
.L377:
	.word	.LC17
	.word	zeroes.13
.L246:
	add	r4, sp, #472
	ldr	r1, [r4]
	cmp	r2, r1
	blt	.L263	@cond_branch
	mov	r0, r8
	str	r0, [r5]
	str	r1, [r5, #4]
	mov	r2, r9
	ldr	r0, [r2, #8]
	add	r0, r0, r1
	str	r0, [r2, #8]
	add	r5, r5, #8
	ldr	r0, [r2, #4]
	add	r0, r0, #1
	str	r0, [r2, #4]
	cmp	r0, #7
	ble	.L264	@cond_branch
	ldr	r0, [sp, #480]
	mov	r1, r9
	bl	__sprint
	cmp	r0, #0
	beq	.LCB1986
	b	.L33	@long jump
.LCB1986:
	add	r5, sp, #40
.L264:
	ldr	r1, [r6]
	ldr	r0, [r4]
	sub	r4, r1, r0
	cmp	r4, #0
	ble	.L266	@cond_branch
	ldr	r1, .L379
	cmp	r4, #16
	ble	.L268	@cond_branch
	mov	r6, r9
.L269:
	str	r1, [r5]
	mov	r0, #16
	str	r0, [r5, #4]
	ldr	r0, [r6, #8]
	add	r0, r0, #16
	str	r0, [r6, #8]
	add	r5, r5, #8
	ldr	r0, [r6, #4]
	add	r0, r0, #1
	str	r0, [r6, #4]
	cmp	r0, #7
	ble	.L270	@cond_branch
	ldr	r0, [sp, #480]
	mov	r1, r9
	bl	__sprint
	cmp	r0, #0
	beq	.LCB2027
	b	.L33	@long jump
.LCB2027:
	add	r5, sp, #40
	ldr	r1, .L379
.L270:
	sub	r4, r4, #16
	cmp	r4, #16
	bgt	.L269	@cond_branch
.L268:
	str	r1, [r5]
	str	r4, [r5, #4]
	mov	r1, r9
	ldr	r0, [r1, #8]
	add	r0, r0, r4
	str	r0, [r1, #8]
	add	r5, r5, #8
	ldr	r0, [r1, #4]
	add	r0, r0, #1
	str	r0, [r1, #4]
	cmp	r0, #7
	ble	.L266	@cond_branch
	ldr	r0, [sp, #480]
	bl	__sprint
	cmp	r0, #0
	beq	.LCB2058
	b	.L33	@long jump
.LCB2058:
	add	r5, sp, #40
.L266:
	mov	r1, #1
	ldr	r0, [sp, #492]
	and	r0, r0, r1
	cmp	r0, #0
	bne	.LCB2065
	b	.L227	@long jump
.LCB2065:
	ldr	r0, .L379+4
	str	r0, [r5]
	str	r1, [r5, #4]
	mov	r2, r9
	ldr	r0, [r2, #8]
	add	r0, r0, #1
	b	.L337
.L380:
	.align	2, 0
.L379:
	.word	zeroes.13
	.word	.LC19
.L263:
	mov	r0, r8
	str	r0, [r5]
	str	r2, [r5, #4]
	mov	r1, r9
	ldr	r0, [r1, #8]
	add	r0, r0, r2
	str	r0, [r1, #8]
	add	r5, r5, #8
	ldr	r0, [r1, #4]
	add	r0, r0, #1
	str	r0, [r1, #4]
	cmp	r0, #7
	ble	.L279	@cond_branch
	ldr	r0, [sp, #480]
	bl	__sprint
	cmp	r0, #0
	beq	.LCB2107
	b	.L33	@long jump
.LCB2107:
	add	r5, sp, #40
.L279:
	ldr	r0, [r6]
	add	r8, r8, r0
	ldr	r0, .L381
	str	r0, [r5]
	mov	r0, #1
	str	r0, [r5, #4]
	mov	r2, r9
	ldr	r0, [r2, #8]
	add	r0, r0, #1
	str	r0, [r2, #8]
	add	r5, r5, #8
	ldr	r0, [r2, #4]
	add	r0, r0, #1
	str	r0, [r2, #4]
	cmp	r0, #7
	ble	.L281	@cond_branch
	ldr	r0, [sp, #480]
	mov	r1, r9
	bl	__sprint
	cmp	r0, #0
	beq	.LCB2135
	b	.L33	@long jump
.LCB2135:
	add	r5, sp, #40
.L281:
	mov	r0, r8
	str	r0, [r5]
	ldr	r1, [r4]
	ldr	r0, [r6]
	sub	r1, r1, r0
	b	.L339
.L382:
	.align	2, 0
.L381:
	.word	.LC19
.L228:
	add	r4, sp, #472
	ldr	r0, [r4]
	cmp	r0, #1
	bgt	.L287	@cond_branch
	mov	r1, #1
	ldr	r0, [sp, #492]
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L286	@cond_branch
.L287:
	add	r1, sp, #452
	mov	r2, r8
	ldrb	r0, [r2]
	strb	r0, [r1]
	mov	r0, #1
	add	r8, r8, r0
	mov	r0, #46
	strb	r0, [r1, #1]
	str	r1, [r5]
	mov	r0, #2
	str	r0, [r5, #4]
	mov	r1, r9
	ldr	r0, [r1, #8]
	add	r0, r0, #2
	str	r0, [r1, #8]
	add	r5, r5, #8
	ldr	r0, [r1, #4]
	add	r0, r0, #1
	str	r0, [r1, #4]
	cmp	r0, #7
	ble	.L288	@cond_branch
	ldr	r0, [sp, #480]
	bl	__sprint
	cmp	r0, #0
	beq	.LCB2201
	b	.L33	@long jump
.LCB2201:
	add	r5, sp, #40
.L288:
	ldr	r3, .L383+4		@ created by thumb_load_double_from_address
	ldr	r2, .L383		@ created by thumb_load_double_from_address
	ldr	r0, [sp, #508]		@ created by thumb_load_double_from_address
	ldr	r1, [sp, #512]		@ created by thumb_load_double_from_address
	bl	__nedf2
	cmp	r0, #0
	beq	.L290	@cond_branch
	mov	r2, r8
	str	r2, [r5]
	ldr	r1, [r4]
	sub	r0, r1, #1
	str	r0, [r5, #4]
	mov	r4, r9
	ldr	r0, [r4, #8]
	sub	r0, r0, #1
	add	r0, r0, r1
	b	.L340
.L384:
	.align	2, 0
.L383:
	.long 0x0, 0x0	@ double 0.00000000000000000000e0
.L290:
	ldr	r0, [r4]
	sub	r4, r0, #1
	cmp	r4, #0
	ble	.L303	@cond_branch
	ldr	r1, .L385
	cmp	r4, #16
	ble	.L296	@cond_branch
	mov	r6, r9
.L297:
	str	r1, [r5]
	mov	r0, #16
	str	r0, [r5, #4]
	ldr	r0, [r6, #8]
	add	r0, r0, #16
	str	r0, [r6, #8]
	add	r5, r5, #8
	ldr	r0, [r6, #4]
	add	r0, r0, #1
	str	r0, [r6, #4]
	cmp	r0, #7
	ble	.L298	@cond_branch
	ldr	r0, [sp, #480]
	mov	r1, r9
	bl	__sprint
	cmp	r0, #0
	beq	.LCB2270
	b	.L33	@long jump
.LCB2270:
	add	r5, sp, #40
	ldr	r1, .L385
.L298:
	sub	r4, r4, #16
	cmp	r4, #16
	bgt	.L297	@cond_branch
.L296:
	str	r1, [r5]
	str	r4, [r5, #4]
	mov	r1, r9
	ldr	r0, [r1, #8]
	add	r0, r0, r4
	str	r0, [r1, #8]
	add	r5, r5, #8
	ldr	r0, [r1, #4]
	add	r0, r0, #1
	str	r0, [r1, #4]
	cmp	r0, #7
	ble	.L303	@cond_branch
	ldr	r0, [sp, #480]
	b	.L341
.L386:
	.align	2, 0
.L385:
	.word	zeroes.13
.L286:
	mov	r2, r8
	str	r2, [r5]
	str	r1, [r5, #4]
	mov	r4, r9
	ldr	r0, [r4, #8]
	add	r0, r0, #1
.L340:
	str	r0, [r4, #8]
	add	r5, r5, #8
	ldr	r0, [r4, #4]
	add	r0, r0, #1
	str	r0, [r4, #4]
	cmp	r0, #7
	ble	.L303	@cond_branch
	ldr	r0, [sp, #480]
	mov	r1, r9
.L341:
	bl	__sprint
	cmp	r0, #0
	bne	.L33	@cond_branch
	add	r5, sp, #40
.L303:
	add	r0, sp, #20
	str	r0, [r5]
	ldr	r1, [sp, #516]
.L339:
	str	r1, [r5, #4]
	mov	r2, r9
	ldr	r0, [r2, #8]
	add	r0, r0, r1
.L337:
	str	r0, [r2, #8]
	add	r5, r5, #8
	ldr	r0, [r2, #4]
	add	r0, r0, #1
	str	r0, [r2, #4]
.L338:
	cmp	r0, #7
	ble	.L227	@cond_branch
	ldr	r0, [sp, #480]
	mov	r1, r9
.L336:
	bl	__sprint
	cmp	r0, #0
	bne	.L33	@cond_branch
	add	r5, sp, #40
.L227:
	mov	r0, #4
	ldr	r4, [sp, #492]
	and	r4, r4, r0
	cmp	r4, #0
	beq	.L308	@cond_branch
	ldr	r0, [sp, #500]
	ldr	r1, [sp, #524]
	sub	r4, r0, r1
	cmp	r4, #0
	ble	.L308	@cond_branch
	ldr	r1, .L387
	cmp	r4, #16
	ble	.L311	@cond_branch
	mov	r6, r9
.L312:
	str	r1, [r5]
	mov	r0, #16
	str	r0, [r5, #4]
	ldr	r0, [r6, #8]
	add	r0, r0, #16
	str	r0, [r6, #8]
	add	r5, r5, #8
	ldr	r0, [r6, #4]
	add	r0, r0, #1
	str	r0, [r6, #4]
	cmp	r0, #7
	ble	.L313	@cond_branch
	ldr	r0, [sp, #480]
	mov	r1, r9
	bl	__sprint
	cmp	r0, #0
	bne	.L33	@cond_branch
	add	r5, sp, #40
	ldr	r1, .L387
.L313:
	sub	r4, r4, #16
	cmp	r4, #16
	bgt	.L312	@cond_branch
.L311:
	str	r1, [r5]
	str	r4, [r5, #4]
	mov	r2, r9
	ldr	r0, [r2, #8]
	add	r0, r0, r4
	str	r0, [r2, #8]
	ldr	r0, [r2, #4]
	add	r0, r0, #1
	str	r0, [r2, #4]
	cmp	r0, #7
	ble	.L308	@cond_branch
	ldr	r0, [sp, #480]
	mov	r1, r9
	bl	__sprint
	cmp	r0, #0
	bne	.L33	@cond_branch
.L308:
	ldr	r0, [sp, #524]
	ldr	r4, [sp, #500]
	cmp	r0, r4
	bge	.L318	@cond_branch
	add	r0, r4, #0
.L318:
	ldr	r1, [sp, #496]
	add	r1, r1, r0
	str	r1, [sp, #496]
	mov	r2, r9
	ldr	r0, [r2, #8]
	cmp	r0, #0
	beq	.L319	@cond_branch
	ldr	r0, [sp, #480]
	mov	r1, r9
	bl	__sprint
	cmp	r0, #0
	bne	.L33	@cond_branch
.L319:
	mov	r0, #0
	mov	r4, r9
	str	r0, [r4, #4]
	add	r5, sp, #40
	bl	.L22	@ far jump
.L388:
	.align	2, 0
.L387:
	.word	blanks.12
.L35:
	mov	r1, r9
	ldr	r0, [r1, #8]
	cmp	r0, #0
	beq	.L320	@cond_branch
	ldr	r0, [sp, #480]
	bl	__sprint
	cmp	r0, #0
	bne	.L33	@cond_branch
.L320:
	mov	r0, #0
	mov	r1, r9
	str	r0, [r1, #4]
.L33:
	mov	r0, #64
	ldr	r2, [sp, #480]
	ldrh	r2, [r2, #12]
	and	r0, r0, r2
	mov	r1, #1
	neg	r1, r1
	cmp	r0, #0
	bne	.L321	@cond_branch
	ldr	r1, [sp, #496]
.L321:
	add	r0, r1, #0
.L323:
	mov	r3, #136
	lsl	r3, r3, #2
	add	sp, sp, r3
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7, pc}
.Lfe4:
	.size	 _vfprintf_r,.Lfe4-_vfprintf_r
	.align	2, 0
	.type	 cvt,function
	.thumb_func
cvt:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-28
	str	r0, [sp, #24]
	add	r5, r2, #0
	add	r4, r1, #0
	mov	r8, r3
	ldr	r6, [sp, #60]
	ldr	r0, [sp, #68]
	mov	sl, r0
	ldr	r1, [sp, #72]
	mov	r9, r1
	cmp	r1, #102
	bne	.L390	@cond_branch
	mov	r7, #3
	b	.L391
.L390:
	mov	r0, r9
	cmp	r0, #101
	beq	.L393	@cond_branch
	cmp	r0, #69
	bne	.L392	@cond_branch
.L393:
	mov	r1, #1
	add	r8, r8, r1
.L392:
	mov	r7, #2
.L391:
	lsl	r0, r4, #31
	lsr	r0, r0, #31
	cmp	r0, #0
	beq	.L394	@cond_branch
	add	r1, r5, #0
	add	r0, r4, #0
	bl	__negdf2
	add	r5, r1, #0
	add	r4, r0, #0
	mov	r0, #45
.L394:
	ldr	r1, [sp, #64]
	strb	r0, [r1]
	mov	r0, r8
	str	r0, [sp]
	mov	r1, sl
	str	r1, [sp, #4]
	add	r0, sp, #16
	str	r0, [sp, #8]
	add	r0, sp, #20
	str	r0, [sp, #12]
	ldr	r0, [sp, #24]
	add	r2, r5, #0
	add	r1, r4, #0
	add	r3, r7, #0
	bl	_dtoa_r
	add	r7, r0, #0
	mov	r1, r9
	cmp	r1, #103
	beq	.L398	@cond_branch
	cmp	r1, #71
	bne	.L397	@cond_branch
.L398:
	mov	r0, #1
	and	r6, r6, r0
	cmp	r6, #0
	beq	.L396	@cond_branch
.L397:
	mov	r0, r8
	add	r6, r7, r0
	mov	r1, r9
	cmp	r1, #102
	bne	.L399	@cond_branch
	ldrb	r0, [r7]
	cmp	r0, #48
	bne	.L400	@cond_branch
	ldr	r3, .L406+4		@ created by thumb_load_double_from_address
	ldr	r2, .L406		@ created by thumb_load_double_from_address
	add	r1, r5, #0
	add	r0, r4, #0
	bl	__nedf2
	cmp	r0, #0
	beq	.L400	@cond_branch
	mov	r1, r8
	neg	r0, r1
	add	r0, r0, #1
	mov	r1, sl
	str	r0, [r1]
.L400:
	mov	r1, sl
	ldr	r0, [r1]
	add	r6, r6, r0
.L399:
	ldr	r3, .L406+4		@ created by thumb_load_double_from_address
	ldr	r2, .L406		@ created by thumb_load_double_from_address
	add	r1, r5, #0
	add	r0, r4, #0
	bl	__eqdf2
	cmp	r0, #0
	bne	.L401	@cond_branch
	str	r6, [sp, #20]
.L401:
	ldr	r0, [sp, #20]
	cmp	r0, r6
	bcs	.L396	@cond_branch
	mov	r1, #48
.L404:
	strb	r1, [r0]
	add	r0, r0, #1
	str	r0, [sp, #20]
	cmp	r0, r6
	bcc	.L404	@cond_branch
.L396:
	ldr	r0, [sp, #20]
	sub	r0, r0, r7
	ldr	r1, [sp, #76]
	str	r0, [r1]
	add	r0, r7, #0
	add	sp, sp, #28
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7, pc}
.L407:
	.align	2, 0
.L406:
	.long 0x0, 0x0	@ double 0.00000000000000000000e0
.Lfe5:
	.size	 cvt,.Lfe5-cvt
	.align	2, 0
	.type	 exponent,function
	.thumb_func
exponent:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-308
	add	r7, r0, #0
	add	r6, r1, #0
	strb	r2, [r7]
	add	r5, r7, #1
	cmp	r6, #0
	bge	.L409	@cond_branch
	neg	r6, r6
	mov	r0, #45
	b	.L423
.L409:
	mov	r0, #43
.L423:
	strb	r0, [r7, #1]
	add	r5, r5, #1
	add	r4, sp, #308
	cmp	r6, #9
	ble	.L411	@cond_branch
.L412:
	sub	r4, r4, #1
	add	r0, r6, #0
	mov	r1, #10
	bl	__modsi3
	add	r0, r0, #48
	strb	r0, [r4]
	add	r0, r6, #0
	mov	r1, #10
	bl	__divsi3
	add	r6, r0, #0
	cmp	r6, #9
	bgt	.L412	@cond_branch
	sub	r4, r4, #1
	add	r0, r0, #48
	strb	r0, [r4]
	add	r0, sp, #308
	cmp	r4, r0
	bcs	.L422	@cond_branch
	add	r1, r0, #0
.L419:
	ldrb	r0, [r4]
	strb	r0, [r5]
	add	r4, r4, #1
	add	r5, r5, #1
	cmp	r4, r1
	bcc	.L419	@cond_branch
	b	.L422
.L411:
	mov	r0, #48
	strb	r0, [r5]
	add	r5, r5, #1
	add	r0, r6, #0
	add	r0, r0, #48
	strb	r0, [r5]
	add	r5, r5, #1
.L422:
	sub	r0, r5, r7
	add	sp, sp, #308
	pop	{r4, r5, r6, r7, pc}
.Lfe6:
	.size	 exponent,.Lfe6-exponent
.text
	.align	2, 0
