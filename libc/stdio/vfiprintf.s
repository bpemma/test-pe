@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
.text
	.align	2, 0
	.type	 __sprint,function
	.thumb_func
__sprint:
	push	{r4, lr}
	add	r4, r1, #0
	ldr	r1, [r4, #8]
	cmp	r1, #0
	beq	.L3	@cond_branch
	add	r1, r4, #0
	bl	__sfvwrite
	mov	r1, #0
	str	r1, [r4, #8]
	str	r1, [r4, #4]
	b	.L4
.L3:
	str	r1, [r4, #4]
	mov	r0, #0
.L4:
	pop	{r4, pc}
.Lfe1:
	.size	 __sprint,.Lfe1-__sprint
	.align	2, 0
	.type	 __sbprintf,function
	.thumb_func
__sbprintf:
	push	{r4, r5, lr}
	ldr	r4, .L8
	add	sp, sp, r4
	add	r5, r0, #0
	ldr	r0, [r5, #84]
	str	r0, [sp, #84]
	mov	r3, sp
	mov	r0, #3
	neg	r0, r0
	ldrh	r4, [r5, #12]
	and	r0, r0, r4
	mov	r4, #0
	strh	r0, [r3, #12]
	ldrh	r0, [r5, #14]
	strh	r0, [r3, #14]
	ldr	r0, [r5, #28]
	str	r0, [sp, #28]
	ldr	r0, [r5, #36]
	str	r0, [sp, #36]
	add	r0, sp, #88
	str	r0, [sp]
	str	r0, [sp, #16]
	mov	r0, #128
	lsl	r0, r0, #3
	str	r0, [sp, #8]
	str	r0, [sp, #20]
	str	r4, [sp, #24]
	mov	r0, sp
	bl	vfiprintf
	add	r4, r0, #0
	cmp	r4, #0
	blt	.L6	@cond_branch
	mov	r0, sp
	bl	fflush
	cmp	r0, #0
	beq	.L6	@cond_branch
	mov	r4, #1
	neg	r4, r4
.L6:
	mov	r1, sp
	mov	r0, #64
	ldrh	r1, [r1, #12]
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L7	@cond_branch
	mov	r0, #64
	ldrh	r1, [r5, #12]
	orr	r0, r0, r1
	strh	r0, [r5, #12]
.L7:
	add	r0, r4, #0
	mov	r3, #139
	lsl	r3, r3, #3
	add	sp, sp, r3
	pop	{r4, r5, pc}
.L9:
	.align	2, 0
.L8:
	.word	-1112
.Lfe2:
	.size	 __sbprintf,.Lfe2-__sbprintf
	.align	2, 0
	.globl	vfiprintf
	.type	 vfiprintf,function
	.thumb_func
vfiprintf:
	push	{r4, r5, lr}
	add	r4, r0, #0
	add	r5, r1, #0
	add	r3, r2, #0
	ldr	r0, [r4, #84]
	add	r1, r4, #0
	add	r2, r5, #0
	bl	_vfiprintf_r
	pop	{r4, r5, pc}
.Lfe3:
	.size	 vfiprintf,.Lfe3-vfiprintf
	.section .rodata
	.type	 blanks.12,object
	.size	 blanks.12,16
blanks.12:
	.byte	32
	.byte	32
	.byte	32
	.byte	32
	.byte	32
	.byte	32
	.byte	32
	.byte	32
	.byte	32
	.byte	32
	.byte	32
	.byte	32
	.byte	32
	.byte	32
	.byte	32
	.byte	32
	.type	 zeroes.13,object
	.size	 zeroes.13,16
zeroes.13:
	.byte	48
	.byte	48
	.byte	48
	.byte	48
	.byte	48
	.byte	48
	.byte	48
	.byte	48
	.byte	48
	.byte	48
	.byte	48
	.byte	48
	.byte	48
	.byte	48
	.byte	48
	.byte	48
	.align	2, 0
.LC2:
	.ascii	"0123456789abcdef\000"
	.align	2, 0
.LC4:
	.ascii	"(null)\000"
	.align	2, 0
.LC6:
	.ascii	"0123456789ABCDEF\000"
	.align	2, 0
.LC8:
	.ascii	"bug in vfprintf: bad base\000"
.text
	.align	2, 0
	.globl	_vfiprintf_r
	.type	 _vfiprintf_r,function
	.thumb_func
_vfiprintf_r:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-172
	str	r1, [sp, #136]
	add	r4, r2, #0
	mov	r8, r3
	mov	r0, #0
	add	r1, sp, #132
	str	r0, [r1]
	ldr	r2, [sp, #136]
	ldr	r0, [r2, #84]
	cmp	r0, #0
	bne	.L15	@cond_branch
	ldr	r0, .L215
	ldr	r0, [r0]
	str	r0, [r2, #84]
.L15:
	ldr	r0, [sp, #136]
	ldr	r1, [r0, #84]
	ldr	r0, [r1, #56]
	cmp	r0, #0
	bne	.L13	@cond_branch
	add	r0, r1, #0
	bl	__sinit
.L13:
	mov	r0, #8
	ldr	r1, [sp, #136]
	ldrh	r1, [r1, #12]
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L20	@cond_branch
	ldr	r2, [sp, #136]
	ldr	r0, [r2, #16]
	cmp	r0, #0
	bne	.L19	@cond_branch
.L20:
	ldr	r0, [sp, #136]
	bl	__swsetup
	cmp	r0, #0
	beq	.L19	@cond_branch
	mov	r0, #1
	neg	r0, r0
	bl	.L203	@ far jump
.L216:
	.align	2, 0
.L215:
	.word	_impure_ptr
.L19:
	mov	r0, #26
	ldr	r1, [sp, #136]
	ldrh	r1, [r1, #12]
	and	r0, r0, r1
	cmp	r0, #10
	bne	.L21	@cond_branch
	ldr	r2, [sp, #136]
	mov	r1, #14
	ldrsh	r0, [r2, r1]
	cmp	r0, #0
	blt	.L21	@cond_branch
	add	r0, r2, #0
	add	r1, r4, #0
	mov	r2, r8
	bl	__sbprintf
	bl	.L203	@ far jump
.L21:
	mov	sl, r4
	add	r5, sp, #16
	str	r5, [sp, #4]
	mov	r0, #0
	str	r0, [sp, #12]
	str	r0, [sp, #8]
	mov	r2, #0
	str	r2, [sp, #140]
	mov	r0, sp
	add	r0, r0, #128
	str	r0, [sp, #164]
.L22:
	mov	r7, sl
.L25:
	ldr	r0, .L217
	ldr	r0, [r0]
	ldr	r1, .L217+4
	ldr	r3, [r1]
	add	r1, sp, #132
	str	r1, [sp]
	ldr	r1, [sp, #164]
	mov	r2, sl
	bl	_mbtowc_r
	add	r4, r0, #0
	cmp	r4, #0
	ble	.L26	@cond_branch
	add	sl, sl, r4
	ldr	r0, [sp, #128]
	cmp	r0, #37
	bne	.L25	@cond_branch
	mov	r2, #1
	neg	r2, r2
	add	sl, sl, r2
.L26:
	mov	r0, sl
	sub	r6, r0, r7
	cmp	r6, #0
	beq	.L30	@cond_branch
	str	r7, [r5]
	str	r6, [r5, #4]
	ldr	r0, [sp, #12]
	add	r0, r0, r6
	str	r0, [sp, #12]
	add	r5, r5, #8
	ldr	r0, [sp, #8]
	add	r0, r0, #1
	str	r0, [sp, #8]
	cmp	r0, #7
	ble	.L31	@cond_branch
	ldr	r0, [sp, #136]
	add	r1, sp, #4
	bl	__sprint
	cmp	r0, #0
	beq	.LCB297
	bl	.L33	@far jump
.LCB297:
	add	r5, sp, #16
.L31:
	ldr	r1, [sp, #140]
	add	r1, r1, r6
	str	r1, [sp, #140]
.L30:
	cmp	r4, #0
	bgt	.LCB305
	b	.L35	@long jump
.LCB305:
	mov	r2, #1
	add	sl, sl, r2
	mov	r0, #0
	mov	r9, r0
	mov	r1, #0
	str	r1, [sp, #148]
	mov	r2, #0
	str	r2, [sp, #144]
	mov	r6, #1
	neg	r6, r6
	add	r0, sp, #124
	strb	r2, [r0]
.L36:
	mov	r2, sl
	ldrb	r3, [r2]
	mov	r0, #1
	add	sl, sl, r0
.L37:
	add	r0, r3, #0
	sub	r0, r0, #32
	cmp	r0, #88
	bls	.LCB330
	b	.L143	@long jump
.LCB330:
	lsl	r0, r0, #2
	ldr	r1, .L217+8
	add	r0, r0, r1
	ldr	r0, [r0]
	mov	pc, r0
.L218:
	.align	2, 0
.L217:
	.word	_impure_ptr
	.word	__mb_cur_max
	.word	.L145
	.align	2, 0
	.align	2, 0
.L145:
	.word	.L39
	.word	.L143
	.word	.L143
	.word	.L41
	.word	.L143
	.word	.L143
	.word	.L143
	.word	.L143
	.word	.L143
	.word	.L143
	.word	.L42
	.word	.L45
	.word	.L143
	.word	.L44
	.word	.L46
	.word	.L143
	.word	.L54
	.word	.L63
	.word	.L63
	.word	.L63
	.word	.L63
	.word	.L63
	.word	.L63
	.word	.L63
	.word	.L63
	.word	.L63
	.word	.L143
	.word	.L143
	.word	.L143
	.word	.L143
	.word	.L143
	.word	.L143
	.word	.L143
	.word	.L143
	.word	.L143
	.word	.L143
	.word	.L75
	.word	.L143
	.word	.L143
	.word	.L143
	.word	.L143
	.word	.L143
	.word	.L143
	.word	.L143
	.word	.L143
	.word	.L143
	.word	.L143
	.word	.L89
	.word	.L143
	.word	.L143
	.word	.L143
	.word	.L143
	.word	.L143
	.word	.L104
	.word	.L143
	.word	.L143
	.word	.L110
	.word	.L143
	.word	.L143
	.word	.L143
	.word	.L143
	.word	.L143
	.word	.L143
	.word	.L143
	.word	.L143
	.word	.L143
	.word	.L143
	.word	.L74
	.word	.L77
	.word	.L143
	.word	.L143
	.word	.L143
	.word	.L69
	.word	.L77
	.word	.L143
	.word	.L143
	.word	.L70
	.word	.L143
	.word	.L84
	.word	.L90
	.word	.L96
	.word	.L73
	.word	.L143
	.word	.L97
	.word	.L143
	.word	.L105
	.word	.L143
	.word	.L143
	.word	.L112
.L39:
	add	r1, sp, #124
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.LCB355
	b	.L36	@long jump
.LCB355:
	mov	r0, #32
	strb	r0, [r1]
	b	.L36
.L41:
	mov	r0, #1
	b	.L204
.L42:
	mov	r0, #4
	add	r8, r8, r0
	mov	r0, r8
	sub	r0, r0, #4
	ldr	r0, [r0]
	str	r0, [sp, #144]
	cmp	r0, #0
	blt	.LCB372
	b	.L36	@long jump
.LCB372:
	neg	r0, r0
	str	r0, [sp, #144]
.L44:
	mov	r0, #4
	b	.L205
.L45:
	mov	r0, #43
	add	r2, sp, #124
	strb	r0, [r2]
	b	.L36
.L46:
	mov	r0, sl
	ldrb	r3, [r0]
	mov	r1, #1
	add	sl, sl, r1
	cmp	r3, #42
	bne	.L47	@cond_branch
	mov	r2, #4
	add	r8, r8, r2
	mov	r0, r8
	sub	r0, r0, #4
	ldr	r4, [r0]
	add	r6, r4, #0
	mov	r0, #1
	neg	r0, r0
	cmp	r6, r0
	blt	.LCB403
	b	.L36	@long jump
.LCB403:
	add	r6, r0, #0
	b	.L36
.L47:
	mov	r4, #0
	b	.L206
.L51:
	lsl	r0, r4, #2
	add	r0, r0, r4
	lsl	r0, r0, #1
	sub	r0, r0, #48
	add	r4, r0, r3
	mov	r0, sl
	ldrb	r3, [r0]
	mov	r1, #1
	add	sl, sl, r1
.L206:
	add	r0, r3, #0
	sub	r0, r0, #48
	cmp	r0, #9
	bls	.L51	@cond_branch
	add	r6, r4, #0
	mov	r0, #1
	neg	r0, r0
	cmp	r6, r0
	blt	.LCB435
	b	.L37	@long jump
.LCB435:
	add	r6, r0, #0
	b	.L37
.L54:
	mov	r0, #128
	b	.L204
.L63:
	mov	r4, #0
.L64:
	lsl	r0, r4, #2
	add	r0, r0, r4
	lsl	r0, r0, #1
	sub	r0, r0, #48
	add	r4, r0, r3
	mov	r0, sl
	ldrb	r3, [r0]
	mov	r1, #1
	add	sl, sl, r1
	add	r0, r3, #0
	sub	r0, r0, #48
	cmp	r0, #9
	bls	.L64	@cond_branch
	str	r4, [sp, #144]
	b	.L37
.L69:
	mov	r0, #64
	b	.L204
.L70:
	mov	r0, sl
	ldrb	r0, [r0]
	cmp	r0, #108
	bne	.L71	@cond_branch
	mov	r1, #1
	add	sl, sl, r1
	b	.L73
.L71:
	mov	r0, #16
.L205:
	mov	r1, r9
	orr	r1, r1, r0
	mov	r9, r1
	b	.L36
.L73:
	mov	r0, #32
.L204:
	mov	r2, r9
	orr	r2, r2, r0
	mov	r9, r2
	b	.L36
.L74:
	add	r7, sp, #80
	mov	r0, #4
	add	r8, r8, r0
	mov	r0, r8
	sub	r0, r0, #4
	ldr	r0, [r0]
	strb	r0, [r7]
	mov	r1, #1
	str	r1, [sp, #156]
	mov	r0, #0
	add	r2, sp, #124
	strb	r0, [r2]
	b	.L207
.L75:
	mov	r0, #16
	mov	r1, r9
	orr	r1, r1, r0
	mov	r9, r1
.L77:
	mov	r0, #16
	mov	r2, r9
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L78	@cond_branch
	mov	r0, #4
	add	r8, r8, r0
	b	.L208
.L78:
	mov	r0, #64
	mov	r1, r9
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L80	@cond_branch
	mov	r2, #4
	add	r8, r8, r2
	mov	r0, r8
	sub	r0, r0, #4
	mov	r1, #0
	ldrsh	r4, [r0, r1]
	b	.L79
.L80:
	mov	r2, #4
	add	r8, r8, r2
.L208:
	mov	r0, r8
	sub	r0, r0, #4
	ldr	r4, [r0]
.L79:
	cmp	r4, #0
	bge	.L82	@cond_branch
	neg	r4, r4
	mov	r0, #45
	add	r1, sp, #124
	strb	r0, [r1]
.L82:
	mov	r1, #1
	b	.L83
.L84:
	mov	r0, #16
	mov	r2, r9
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L85	@cond_branch
	mov	r0, #4
	add	r8, r8, r0
	b	.L209
.L85:
	mov	r0, #64
	mov	r2, r9
	and	r2, r2, r0
	cmp	r2, #0
	beq	.L87	@cond_branch
	mov	r0, #4
	add	r8, r8, r0
	mov	r0, r8
	sub	r0, r0, #4
	ldr	r0, [r0]
	add	r1, sp, #140
	ldrh	r1, [r1]
	strh	r1, [r0]
	b	.L22
.L87:
	mov	r2, #4
	add	r8, r8, r2
.L209:
	mov	r0, r8
	sub	r0, r0, #4
	ldr	r0, [r0]
	ldr	r1, [sp, #140]
	str	r1, [r0]
	b	.L22
.L89:
	mov	r0, #16
	mov	r2, r9
	orr	r2, r2, r0
	mov	r9, r2
.L90:
	mov	r0, #16
	mov	r1, r9
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L91	@cond_branch
	mov	r2, #4
	add	r8, r8, r2
	b	.L210
.L91:
	mov	r0, #64
	mov	r1, r9
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L93	@cond_branch
	mov	r2, #4
	add	r8, r8, r2
	mov	r0, r8
	sub	r0, r0, #4
	ldrh	r4, [r0]
	b	.L92
.L93:
	mov	r0, #4
	add	r8, r8, r0
.L210:
	mov	r0, r8
	sub	r0, r0, #4
	ldr	r4, [r0]
.L92:
	mov	r1, #0
	b	.L95
.L96:
	mov	r1, #4
	add	r8, r8, r1
	mov	r0, r8
	sub	r0, r0, #4
	ldr	r4, [r0]
	mov	r1, #2
	ldr	r2, .L219
	str	r2, [sp, #160]
	mov	r0, r9
	orr	r0, r0, r1
	mov	r9, r0
	mov	r3, #120
	b	.L95
.L220:
	.align	2, 0
.L219:
	.word	.LC2
.L97:
	mov	r1, #4
	add	r8, r8, r1
	mov	r0, r8
	sub	r0, r0, #4
	ldr	r7, [r0]
	cmp	r7, #0
	bne	.L98	@cond_branch
	ldr	r7, .L221
.L98:
	cmp	r6, #0
	blt	.L99	@cond_branch
	add	r0, r7, #0
	mov	r1, #0
	add	r2, r6, #0
	str	r3, [sp, #168]
	bl	memchr
	ldr	r3, [sp, #168]
	cmp	r0, #0
	beq	.L211	@cond_branch
	sub	r0, r0, r7
	str	r0, [sp, #156]
	cmp	r0, r6
	ble	.L103	@cond_branch
.L211:
	str	r6, [sp, #156]
	b	.L103
.L222:
	.align	2, 0
.L221:
	.word	.LC4
.L99:
	add	r0, r7, #0
	str	r3, [sp, #168]
	bl	strlen
	str	r0, [sp, #156]
	ldr	r3, [sp, #168]
.L103:
	mov	r0, #0
	add	r2, sp, #124
	strb	r0, [r2]
	b	.L207
.L104:
	mov	r0, #16
	mov	r1, r9
	orr	r1, r1, r0
	mov	r9, r1
.L105:
	mov	r0, #16
	mov	r2, r9
	and	r0, r0, r2
	cmp	r0, #0
	bne	.L108	@cond_branch
	mov	r0, #64
	mov	r1, r9
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L108	@cond_branch
	mov	r2, #4
	add	r8, r8, r2
	mov	r0, r8
	sub	r0, r0, #4
	ldrh	r4, [r0]
	b	.L107
.L108:
	mov	r0, #4
	add	r8, r8, r0
	mov	r0, r8
	sub	r0, r0, #4
	ldr	r4, [r0]
.L107:
	mov	r1, #1
	b	.L95
.L110:
	ldr	r1, .L223
	str	r1, [sp, #160]
	b	.L111
.L224:
	.align	2, 0
.L223:
	.word	.LC6
.L112:
	ldr	r2, .L225
	str	r2, [sp, #160]
.L111:
	mov	r0, #16
	mov	r1, r9
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L113	@cond_branch
	mov	r2, #4
	add	r8, r8, r2
	b	.L212
.L226:
	.align	2, 0
.L225:
	.word	.LC2
.L113:
	mov	r0, #64
	mov	r1, r9
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L115	@cond_branch
	mov	r2, #4
	add	r8, r8, r2
	mov	r0, r8
	sub	r0, r0, #4
	ldrh	r4, [r0]
	b	.L114
.L115:
	mov	r0, #4
	add	r8, r8, r0
.L212:
	mov	r0, r8
	sub	r0, r0, #4
	ldr	r4, [r0]
.L114:
	mov	r1, #2
	mov	r0, #1
	mov	r2, r9
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L95	@cond_branch
	cmp	r4, #0
	beq	.L95	@cond_branch
	orr	r2, r2, r1
	mov	r9, r2
.L95:
	mov	r0, #0
	add	r2, sp, #124
	strb	r0, [r2]
.L83:
	str	r6, [sp, #148]
	cmp	r6, #0
	blt	.L118	@cond_branch
	mov	r0, #129
	neg	r0, r0
	mov	r2, r9
	and	r2, r2, r0
	mov	r9, r2
.L118:
	add	r7, sp, #120
	cmp	r4, #0
	bne	.L120	@cond_branch
	add	r6, r5, #0
	add	r6, r6, #8
	ldr	r0, [sp, #148]
	cmp	r0, #0
	beq	.L119	@cond_branch
.L120:
	cmp	r1, #1
	beq	.L129	@cond_branch
	cmp	r1, #1
	bcc	.L122	@cond_branch
	cmp	r1, #2
	beq	.L134	@cond_branch
	ldr	r7, .L227
	add	r0, r7, #0
	str	r3, [sp, #168]
	bl	strlen
	str	r0, [sp, #156]
	add	r6, r5, #0
	add	r6, r6, #8
	ldr	r3, [sp, #168]
	b	.L38
.L228:
	.align	2, 0
.L227:
	.word	.LC8
.L122:
	add	r6, r5, #0
	add	r6, r6, #8
	mov	r2, #7
.L123:
	sub	r7, r7, #1
	add	r0, r4, #0
	and	r0, r0, r2
	add	r1, r0, #0
	add	r1, r1, #48
	strb	r1, [r7]
	lsr	r4, r4, #3
	cmp	r4, #0
	bne	.L123	@cond_branch
	mov	r0, #1
	mov	r2, r9
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L119	@cond_branch
	cmp	r1, #48
	beq	.L119	@cond_branch
	sub	r7, r7, #1
	mov	r0, #48
	strb	r0, [r7]
	b	.L119
.L129:
	add	r6, r5, #0
	add	r6, r6, #8
	cmp	r4, #9
	bls	.L131	@cond_branch
.L132:
	sub	r7, r7, #1
	add	r0, r4, #0
	mov	r1, #10
	str	r3, [sp, #168]
	bl	__umodsi3
	add	r0, r0, #48
	strb	r0, [r7]
	add	r0, r4, #0
	mov	r1, #10
	bl	__udivsi3
	add	r4, r0, #0
	ldr	r3, [sp, #168]
	cmp	r4, #9
	bhi	.L132	@cond_branch
.L131:
	sub	r7, r7, #1
	add	r0, r4, #0
	add	r0, r0, #48
	strb	r0, [r7]
	b	.L119
.L134:
	add	r6, r5, #0
	add	r6, r6, #8
	mov	r1, #15
.L135:
	sub	r7, r7, #1
	add	r0, r4, #0
	and	r0, r0, r1
	ldr	r2, [sp, #160]
	add	r0, r2, r0
	ldrb	r0, [r0]
	strb	r0, [r7]
	lsr	r4, r4, #4
	cmp	r4, #0
	bne	.L135	@cond_branch
.L119:
	add	r1, sp, #4
	sub	r0, r1, r7
	add	r0, r0, #116
	str	r0, [sp, #156]
	b	.L38
.L143:
	cmp	r3, #0
	bne	.LCB965
	b	.L35	@long jump
.LCB965:
	add	r7, sp, #80
	strb	r3, [r7]
	mov	r2, #1
	str	r2, [sp, #156]
	mov	r0, #0
	add	r1, sp, #124
	strb	r0, [r1]
.L207:
	add	r6, r5, #0
	add	r6, r6, #8
.L38:
	ldr	r2, [sp, #156]
	str	r2, [sp, #152]
	ldr	r0, [sp, #148]
	cmp	r2, r0
	bge	.L146	@cond_branch
	str	r0, [sp, #152]
.L146:
	add	r1, sp, #124
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.L147	@cond_branch
	ldr	r2, [sp, #152]
	add	r2, r2, #1
	b	.L213
.L147:
	mov	r0, #2
	mov	r1, r9
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L148	@cond_branch
	ldr	r2, [sp, #152]
	add	r2, r2, #2
.L213:
	str	r2, [sp, #152]
.L148:
	mov	r0, #132
	mov	r1, r9
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L150	@cond_branch
	ldr	r2, [sp, #144]
	ldr	r0, [sp, #152]
	sub	r4, r2, r0
	cmp	r4, #0
	ble	.L150	@cond_branch
	ldr	r1, .L229
	cmp	r4, #16
	ble	.L153	@cond_branch
.L154:
	str	r1, [r5]
	mov	r0, #16
	str	r0, [r5, #4]
	ldr	r0, [sp, #12]
	add	r0, r0, #16
	str	r0, [sp, #12]
	add	r5, r6, #0
	ldr	r0, [sp, #8]
	add	r0, r0, #1
	str	r0, [sp, #8]
	cmp	r0, #7
	ble	.L155	@cond_branch
	ldr	r0, [sp, #136]
	add	r1, sp, #4
	str	r3, [sp, #168]
	bl	__sprint
	ldr	r3, [sp, #168]
	cmp	r0, #0
	beq	.LCB1045
	b	.L33	@long jump
.LCB1045:
	add	r5, sp, #16
	ldr	r1, .L229
.L155:
	sub	r4, r4, #16
	add	r6, r5, #0
	add	r6, r6, #8
	cmp	r4, #16
	bgt	.L154	@cond_branch
.L153:
	str	r1, [r5]
	str	r4, [r5, #4]
	ldr	r0, [sp, #12]
	add	r0, r0, r4
	str	r0, [sp, #12]
	add	r5, r6, #0
	ldr	r0, [sp, #8]
	add	r0, r0, #1
	str	r0, [sp, #8]
	cmp	r0, #7
	ble	.L150	@cond_branch
	ldr	r0, [sp, #136]
	add	r1, sp, #4
	str	r3, [sp, #168]
	bl	__sprint
	ldr	r3, [sp, #168]
	cmp	r0, #0
	beq	.LCB1079
	b	.L33	@long jump
.LCB1079:
	add	r5, sp, #16
.L150:
	add	r1, sp, #124
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.L160	@cond_branch
	str	r1, [r5]
	mov	r0, #1
	str	r0, [r5, #4]
	ldr	r0, [sp, #12]
	add	r0, r0, #1
	b	.L214
.L230:
	.align	2, 0
.L229:
	.word	blanks.12
.L160:
	mov	r2, #2
	mov	r0, r9
	and	r0, r0, r2
	cmp	r0, #0
	beq	.L163	@cond_branch
	add	r1, sp, #120
	mov	r0, #48
	strb	r0, [r1]
	strb	r3, [r1, #1]
	str	r1, [r5]
	str	r2, [r5, #4]
	ldr	r0, [sp, #12]
	add	r0, r0, #2
.L214:
	str	r0, [sp, #12]
	add	r5, r5, #8
	ldr	r0, [sp, #8]
	add	r0, r0, #1
	str	r0, [sp, #8]
	cmp	r0, #7
	ble	.L163	@cond_branch
	ldr	r0, [sp, #136]
	add	r1, sp, #4
	bl	__sprint
	cmp	r0, #0
	beq	.LCB1134
	b	.L33	@long jump
.LCB1134:
	add	r5, sp, #16
.L163:
	mov	r0, #132
	mov	r2, r9
	and	r0, r0, r2
	cmp	r0, #128
	bne	.L167	@cond_branch
	ldr	r0, [sp, #144]
	ldr	r1, [sp, #152]
	sub	r4, r0, r1
	cmp	r4, #0
	ble	.L167	@cond_branch
	ldr	r1, .L231
	cmp	r4, #16
	ble	.L170	@cond_branch
.L171:
	str	r1, [r5]
	mov	r0, #16
	str	r0, [r5, #4]
	ldr	r0, [sp, #12]
	add	r0, r0, #16
	str	r0, [sp, #12]
	add	r5, r5, #8
	ldr	r0, [sp, #8]
	add	r0, r0, #1
	str	r0, [sp, #8]
	cmp	r0, #7
	ble	.L172	@cond_branch
	ldr	r0, [sp, #136]
	add	r1, sp, #4
	bl	__sprint
	cmp	r0, #0
	beq	.LCB1175
	b	.L33	@long jump
.LCB1175:
	add	r5, sp, #16
	ldr	r1, .L231
.L172:
	sub	r4, r4, #16
	cmp	r4, #16
	bgt	.L171	@cond_branch
.L170:
	str	r1, [r5]
	str	r4, [r5, #4]
	ldr	r0, [sp, #12]
	add	r0, r0, r4
	str	r0, [sp, #12]
	add	r5, r5, #8
	ldr	r0, [sp, #8]
	add	r0, r0, #1
	str	r0, [sp, #8]
	cmp	r0, #7
	ble	.L167	@cond_branch
	ldr	r0, [sp, #136]
	add	r1, sp, #4
	bl	__sprint
	cmp	r0, #0
	beq	.LCB1205
	b	.L33	@long jump
.LCB1205:
	add	r5, sp, #16
.L167:
	ldr	r2, [sp, #148]
	ldr	r0, [sp, #156]
	sub	r4, r2, r0
	cmp	r4, #0
	ble	.L177	@cond_branch
	ldr	r1, .L231
	cmp	r4, #16
	ble	.L179	@cond_branch
.L180:
	str	r1, [r5]
	mov	r0, #16
	str	r0, [r5, #4]
	ldr	r0, [sp, #12]
	add	r0, r0, #16
	str	r0, [sp, #12]
	add	r5, r5, #8
	ldr	r0, [sp, #8]
	add	r0, r0, #1
	str	r0, [sp, #8]
	cmp	r0, #7
	ble	.L181	@cond_branch
	ldr	r0, [sp, #136]
	add	r1, sp, #4
	bl	__sprint
	cmp	r0, #0
	beq	.LCB1241
	b	.L33	@long jump
.LCB1241:
	add	r5, sp, #16
	ldr	r1, .L231
.L181:
	sub	r4, r4, #16
	cmp	r4, #16
	bgt	.L180	@cond_branch
.L179:
	str	r1, [r5]
	str	r4, [r5, #4]
	ldr	r0, [sp, #12]
	add	r0, r0, r4
	str	r0, [sp, #12]
	add	r5, r5, #8
	ldr	r0, [sp, #8]
	add	r0, r0, #1
	str	r0, [sp, #8]
	cmp	r0, #7
	ble	.L177	@cond_branch
	ldr	r0, [sp, #136]
	add	r1, sp, #4
	bl	__sprint
	cmp	r0, #0
	bne	.L33	@cond_branch
	add	r5, sp, #16
.L177:
	str	r7, [r5]
	ldr	r1, [sp, #156]
	str	r1, [r5, #4]
	ldr	r0, [sp, #12]
	add	r0, r0, r1
	str	r0, [sp, #12]
	add	r5, r5, #8
	ldr	r0, [sp, #8]
	add	r0, r0, #1
	str	r0, [sp, #8]
	cmp	r0, #7
	ble	.L186	@cond_branch
	ldr	r0, [sp, #136]
	add	r1, sp, #4
	bl	__sprint
	cmp	r0, #0
	bne	.L33	@cond_branch
	add	r5, sp, #16
.L186:
	mov	r0, #4
	mov	r2, r9
	and	r2, r2, r0
	cmp	r2, #0
	beq	.L188	@cond_branch
	ldr	r0, [sp, #144]
	ldr	r1, [sp, #152]
	sub	r4, r0, r1
	cmp	r4, #0
	ble	.L188	@cond_branch
	ldr	r1, .L231+4
	cmp	r4, #16
	ble	.L191	@cond_branch
.L192:
	str	r1, [r5]
	mov	r0, #16
	str	r0, [r5, #4]
	ldr	r0, [sp, #12]
	add	r0, r0, #16
	str	r0, [sp, #12]
	add	r5, r5, #8
	ldr	r0, [sp, #8]
	add	r0, r0, #1
	str	r0, [sp, #8]
	cmp	r0, #7
	ble	.L193	@cond_branch
	ldr	r0, [sp, #136]
	add	r1, sp, #4
	bl	__sprint
	cmp	r0, #0
	bne	.L33	@cond_branch
	add	r5, sp, #16
	ldr	r1, .L231+4
.L193:
	sub	r4, r4, #16
	cmp	r4, #16
	bgt	.L192	@cond_branch
.L191:
	str	r1, [r5]
	str	r4, [r5, #4]
	ldr	r0, [sp, #12]
	add	r0, r0, r4
	str	r0, [sp, #12]
	ldr	r0, [sp, #8]
	add	r0, r0, #1
	str	r0, [sp, #8]
	cmp	r0, #7
	ble	.L188	@cond_branch
	ldr	r0, [sp, #136]
	add	r1, sp, #4
	bl	__sprint
	cmp	r0, #0
	bne	.L33	@cond_branch
.L188:
	ldr	r0, [sp, #152]
	ldr	r2, [sp, #144]
	cmp	r0, r2
	bge	.L198	@cond_branch
	add	r0, r2, #0
.L198:
	ldr	r1, [sp, #140]
	add	r1, r1, r0
	str	r1, [sp, #140]
	ldr	r0, [sp, #12]
	cmp	r0, #0
	beq	.L199	@cond_branch
	ldr	r0, [sp, #136]
	add	r1, sp, #4
	bl	__sprint
	cmp	r0, #0
	bne	.L33	@cond_branch
.L199:
	mov	r0, #0
	str	r0, [sp, #8]
	add	r5, sp, #16
	bl	.L22	@ far jump
.L232:
	.align	2, 0
.L231:
	.word	zeroes.13
	.word	blanks.12
.L35:
	ldr	r0, [sp, #12]
	cmp	r0, #0
	beq	.L200	@cond_branch
	ldr	r0, [sp, #136]
	add	r1, sp, #4
	bl	__sprint
	cmp	r0, #0
	bne	.L33	@cond_branch
.L200:
	mov	r0, #0
	str	r0, [sp, #8]
.L33:
	mov	r0, #64
	ldr	r2, [sp, #136]
	ldrh	r2, [r2, #12]
	and	r0, r0, r2
	mov	r1, #1
	neg	r1, r1
	cmp	r0, #0
	bne	.L201	@cond_branch
	ldr	r1, [sp, #140]
.L201:
	add	r0, r1, #0
.L203:
	add	sp, sp, #172
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7, pc}
.Lfe4:
	.size	 _vfiprintf_r,.Lfe4-_vfiprintf_r
.text
	.align	2, 0
