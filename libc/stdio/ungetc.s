@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
.text
	.align	2, 0
	.globl	__submore
	.type	 __submore,function
	.thumb_func
__submore:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r7, r0, #0
	add	r0, r0, #64
	ldr	r4, [r7, #48]
	cmp	r4, r0
	bne	.L3	@cond_branch
	ldr	r0, [r7, #84]
	mov	r6, #128
	lsl	r6, r6, #3
	add	r1, r6, #0
	bl	_malloc_r
	add	r5, r0, #0
	cmp	r5, #0
	beq	.L10	@cond_branch
	str	r5, [r7, #48]
	str	r6, [r7, #52]
	ldr	r0, .L12
	add	r5, r5, r0
	mov	r6, #2
	add	r2, r4, #0
.L8:
	add	r0, r5, r6
	add	r1, r2, r6
	ldrb	r1, [r1]
	strb	r1, [r0]
	sub	r6, r6, #1
	cmp	r6, #0
	bge	.L8	@cond_branch
	str	r5, [r7]
	mov	r0, #0
	b	.L11
.L13:
	.align	2, 0
.L12:
	.word	1021
.L3:
	ldr	r6, [r7, #52]
	ldr	r0, [r7, #84]
	lsl	r1, r6, #1
	mov	r8, r1
	add	r1, r4, #0
	mov	r2, r8
	bl	_realloc_r
	add	r5, r0, #0
	cmp	r5, #0
	beq	.L10	@cond_branch
	add	r4, r5, r6
	add	r0, r4, #0
	add	r1, r5, #0
	add	r2, r6, #0
	bl	memcpy
	str	r4, [r7]
	str	r5, [r7, #48]
	mov	r0, r8
	str	r0, [r7, #52]
	mov	r0, #0
	b	.L11
.L10:
	mov	r0, #1
	neg	r0, r0
.L11:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7, pc}
.Lfe1:
	.size	 __submore,.Lfe1-__submore
	.align	2, 0
	.globl	ungetc
	.type	 ungetc,function
	.thumb_func
ungetc:
	push	{r4, r5, r6, lr}
	add	r5, r0, #0
	add	r4, r1, #0
	mov	r6, #1
	neg	r6, r6
	cmp	r5, r6
	beq	.L30	@cond_branch
	ldr	r0, [r4, #84]
	cmp	r0, #0
	bne	.L19	@cond_branch
	ldr	r0, .L33
	ldr	r0, [r0]
	str	r0, [r4, #84]
.L19:
	ldr	r1, [r4, #84]
	ldr	r0, [r1, #56]
	cmp	r0, #0
	bne	.L17	@cond_branch
	add	r0, r1, #0
	bl	__sinit
.L17:
	mov	r1, #33
	neg	r1, r1
	ldrh	r0, [r4, #12]
	and	r1, r1, r0
	strh	r1, [r4, #12]
	mov	r0, #4
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L23	@cond_branch
	mov	r0, #16
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L31	@cond_branch
	mov	r0, #8
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L25	@cond_branch
	add	r0, r4, #0
	bl	fflush
	add	r1, r0, #0
	cmp	r1, #0
	bne	.L31	@cond_branch
	mov	r0, #9
	neg	r0, r0
	ldrh	r2, [r4, #12]
	and	r0, r0, r2
	strh	r0, [r4, #12]
	str	r1, [r4, #8]
	str	r1, [r4, #24]
.L25:
	mov	r0, #4
	ldrh	r1, [r4, #12]
	orr	r0, r0, r1
	strh	r0, [r4, #12]
.L23:
	lsl	r0, r5, #24
	lsr	r5, r0, #24
	ldr	r0, [r4, #48]
	cmp	r0, #0
	beq	.L27	@cond_branch
	ldr	r1, [r4, #4]
	ldr	r0, [r4, #52]
	cmp	r1, r0
	blt	.L28	@cond_branch
	add	r0, r4, #0
	bl	__submore
	cmp	r0, #0
	beq	.L28	@cond_branch
.L31:
	mov	r0, #1
	neg	r0, r0
	b	.L30
.L34:
	.align	2, 0
.L33:
	.word	_impure_ptr
.L28:
	ldr	r0, [r4]
	sub	r0, r0, #1
	str	r0, [r4]
	strb	r5, [r0]
	ldr	r0, [r4, #4]
	add	r0, r0, #1
	b	.L32
.L27:
	ldr	r0, [r4, #16]
	ldr	r1, [r4]
	cmp	r0, #0
	beq	.L29	@cond_branch
	cmp	r1, r0
	bls	.L29	@cond_branch
	sub	r2, r1, #1
	ldrb	r0, [r2]
	cmp	r0, r5
	bne	.L29	@cond_branch
	str	r2, [r4]
	ldr	r0, [r4, #4]
	add	r0, r0, #1
	b	.L32
.L29:
	ldr	r0, [r4, #4]
	str	r0, [r4, #60]
	str	r1, [r4, #56]
	add	r0, r4, #0
	add	r0, r0, #64
	str	r0, [r4, #48]
	mov	r0, #3
	str	r0, [r4, #52]
	add	r0, r4, #0
	add	r0, r0, #66
	strb	r5, [r0]
	str	r0, [r4]
	mov	r0, #1
.L32:
	str	r0, [r4, #4]
	add	r0, r5, #0
.L30:
	pop	{r4, r5, r6, pc}
.Lfe2:
	.size	 ungetc,.Lfe2-ungetc
.text
	.align	2, 0
