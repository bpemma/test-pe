@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
.text
	.align	2, 0
	.globl	__sfvwrite
	.type	 __sfvwrite,function
	.thumb_func
__sfvwrite:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-4
	add	r5, r0, #0
	mov	sl, r1
	ldr	r6, [r1, #8]
	cmp	r6, #0
	bne	.LCB11
	b	.L19	@long jump
.LCB11:
	mov	r0, #8
	ldrh	r1, [r5, #12]
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L5	@cond_branch
	ldr	r0, [r5, #16]
	cmp	r0, #0
	bne	.L4	@cond_branch
.L5:
	add	r0, r5, #0
	bl	__swsetup
	cmp	r0, #0
	beq	.LCB28
	b	.L65	@long jump
.LCB28:
.L4:
	mov	r2, sl
	ldr	r2, [r2]
	mov	r8, r2
	mov	r6, #0
	ldrh	r1, [r5, #12]
	mov	r0, #2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L6	@cond_branch
.L7:
	ldr	r0, [r5, #28]
	ldr	r3, [r5, #36]
	cmp	r6, #0
	bne	.L62	@cond_branch
.L12:
	mov	r1, r8
	ldr	r7, [r1]
	ldr	r6, [r1, #4]
	mov	r2, #8
	add	r8, r8, r2
	cmp	r6, #0
	beq	.L12	@cond_branch
.L62:
	add	r2, r6, #0
	mov	r1, #128
	lsl	r1, r1, #3
	cmp	r6, r1
	bls	.L14	@cond_branch
	add	r2, r1, #0
.L14:
	add	r1, r7, #0
	bl	_call_via_r3
	add	r4, r0, #0
	cmp	r4, #0
	bgt	.LCB79
	b	.L16	@long jump
.LCB79:
	add	r7, r7, r4
	sub	r6, r6, r4
	mov	r1, sl
	ldr	r0, [r1, #8]
	sub	r0, r0, r4
	str	r0, [r1, #8]
	cmp	r0, #0
	bne	.L7	@cond_branch
	b	.L19
.L6:
	mov	r0, #1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L20	@cond_branch
.L21:
	ldrh	r1, [r5, #12]
	ldr	r0, [r5, #8]
	ldr	r3, [r5]
	cmp	r6, #0
	bne	.L63	@cond_branch
.L26:
	mov	r2, r8
	ldr	r7, [r2]
	ldr	r6, [r2, #4]
	mov	r2, #8
	add	r8, r8, r2
	cmp	r6, #0
	beq	.L26	@cond_branch
.L63:
	add	r4, r0, #0
	mov	r2, #128
	lsl	r2, r2, #2
	add	r0, r2, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L28	@cond_branch
	cmp	r6, r4
	bcs	.L29	@cond_branch
	add	r4, r6, #0
.L29:
	add	r0, r3, #0
	add	r1, r7, #0
	add	r2, r4, #0
	bl	memmove
	ldr	r0, [r5, #8]
	sub	r0, r0, r4
	str	r0, [r5, #8]
	ldr	r0, [r5]
	add	r0, r0, r4
	str	r0, [r5]
	add	r4, r6, #0
	b	.L30
.L28:
	ldr	r0, [r5, #16]
	cmp	r3, r0
	bls	.L31	@cond_branch
	cmp	r6, r4
	bls	.L31	@cond_branch
	add	r0, r3, #0
	add	r1, r7, #0
	add	r2, r4, #0
	bl	memmove
	ldr	r0, [r5]
	add	r0, r0, r4
	str	r0, [r5]
	add	r0, r5, #0
	bl	fflush
	cmp	r0, #0
	beq	.LCB171
	b	.L16	@long jump
.LCB171:
	b	.L30
.L31:
	ldr	r4, [r5, #20]
	cmp	r6, r4
	bcc	.L34	@cond_branch
	ldr	r0, [r5, #28]
	ldr	r3, [r5, #36]
	add	r1, r7, #0
	add	r2, r4, #0
	bl	_call_via_r3
	add	r4, r0, #0
	cmp	r4, #0
	ble	.L16	@cond_branch
	b	.L30
.L34:
	add	r4, r6, #0
	add	r0, r3, #0
	add	r1, r7, #0
	add	r2, r4, #0
	bl	memmove
	ldr	r0, [r5, #8]
	sub	r0, r0, r4
	str	r0, [r5, #8]
	ldr	r0, [r5]
	add	r0, r0, r4
	str	r0, [r5]
.L30:
	add	r7, r7, r4
	sub	r6, r6, r4
	mov	r1, sl
	ldr	r0, [r1, #8]
	sub	r0, r0, r4
	str	r0, [r1, #8]
	cmp	r0, #0
	bne	.L21	@cond_branch
	b	.L19
.L20:
	mov	r2, #0
	str	r2, [sp]
.L40:
	cmp	r6, #0
	bne	.L64	@cond_branch
	mov	r0, #0
	str	r0, [sp]
.L45:
	mov	r1, r8
	ldr	r7, [r1]
	ldr	r6, [r1, #4]
	mov	r2, #8
	add	r8, r8, r2
	cmp	r6, #0
	beq	.L45	@cond_branch
.L64:
	ldr	r0, [sp]
	cmp	r0, #0
	bne	.L47	@cond_branch
	add	r0, r7, #0
	mov	r1, #10
	add	r2, r6, #0
	bl	memchr
	add	r1, r0, #0
	cmp	r1, #0
	beq	.L48	@cond_branch
	sub	r0, r7, #1
	sub	r1, r1, r0
	b	.L66
.L48:
	add	r1, r6, #1
.L66:
	mov	r9, r1
	mov	r2, #1
	str	r2, [sp]
.L47:
	mov	r2, r9
	cmp	r9, r6
	bls	.L50	@cond_branch
	add	r2, r6, #0
.L50:
	ldr	r0, [r5, #8]
	ldr	r1, [r5, #20]
	add	r4, r0, r1
	ldr	r0, [r5, #16]
	ldr	r3, [r5]
	cmp	r3, r0
	bls	.L51	@cond_branch
	cmp	r2, r4
	ble	.L51	@cond_branch
	add	r0, r3, #0
	add	r1, r7, #0
	add	r2, r4, #0
	bl	memmove
	ldr	r0, [r5]
	add	r0, r0, r4
	str	r0, [r5]
	add	r0, r5, #0
	bl	fflush
	cmp	r0, #0
	bne	.L16	@cond_branch
	b	.L53
.L51:
	add	r4, r1, #0
	cmp	r2, r4
	blt	.L54	@cond_branch
	ldr	r0, [r5, #28]
	ldr	r3, [r5, #36]
	add	r1, r7, #0
	add	r2, r4, #0
	bl	_call_via_r3
	add	r4, r0, #0
	cmp	r4, #0
	ble	.L16	@cond_branch
	b	.L53
.L54:
	add	r4, r2, #0
	add	r0, r3, #0
	add	r1, r7, #0
	bl	memmove
	ldr	r0, [r5, #8]
	sub	r0, r0, r4
	str	r0, [r5, #8]
	ldr	r0, [r5]
	add	r0, r0, r4
	str	r0, [r5]
.L53:
	mov	r0, r9
	sub	r0, r0, r4
	mov	r9, r0
	cmp	r0, #0
	bne	.L57	@cond_branch
	add	r0, r5, #0
	bl	fflush
	cmp	r0, #0
	bne	.L16	@cond_branch
	mov	r1, #0
	str	r1, [sp]
.L57:
	add	r7, r7, r4
	sub	r6, r6, r4
	mov	r2, sl
	ldr	r0, [r2, #8]
	sub	r0, r0, r4
	str	r0, [r2, #8]
	cmp	r0, #0
	bne	.L40	@cond_branch
.L19:
	mov	r0, #0
	b	.L61
.L16:
	mov	r0, #64
	ldrh	r1, [r5, #12]
	orr	r0, r0, r1
	strh	r0, [r5, #12]
.L65:
	mov	r0, #1
	neg	r0, r0
.L61:
	add	sp, sp, #4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7, pc}
.Lfe1:
	.size	 __sfvwrite,.Lfe1-__sfvwrite
.text
	.align	2, 0
