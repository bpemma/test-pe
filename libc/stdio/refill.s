@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
.text
	.align	2, 0
	.type	 lflush,function
	.thumb_func
lflush:
	push	{lr}
	bl	fflush
	pop	{pc}
.Lfe1:
	.size	 lflush,.Lfe1-lflush
	.align	2, 0
	.globl	__srefill
	.type	 __srefill,function
	.thumb_func
__srefill:
	push	{r4, r5, lr}
	add	r4, r0, #0
	ldr	r0, [r4, #84]
	cmp	r0, #0
	bne	.L8	@cond_branch
	ldr	r0, .L29
	ldr	r0, [r0]
	str	r0, [r4, #84]
.L8:
	ldr	r1, [r4, #84]
	ldr	r0, [r1, #56]
	cmp	r0, #0
	bne	.L6	@cond_branch
	add	r0, r1, #0
	bl	__sinit
.L6:
	mov	r0, #0
	str	r0, [r4, #4]
	ldrh	r1, [r4, #12]
	mov	r0, #32
	and	r0, r0, r1
	lsl	r0, r0, #16
	asr	r5, r0, #16
	cmp	r5, #0
	bne	.L25	@cond_branch
	mov	r0, #4
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L13	@cond_branch
	mov	r0, #16
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L25	@cond_branch
	mov	r0, #8
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L15	@cond_branch
	add	r0, r4, #0
	bl	fflush
	cmp	r0, #0
	bne	.L25	@cond_branch
	mov	r0, #9
	neg	r0, r0
	ldrh	r1, [r4, #12]
	and	r0, r0, r1
	strh	r0, [r4, #12]
	str	r5, [r4, #8]
	str	r5, [r4, #24]
.L15:
	mov	r0, #4
	ldrh	r2, [r4, #12]
	orr	r0, r0, r2
	strh	r0, [r4, #12]
	b	.L17
.L30:
	.align	2, 0
.L29:
	.word	_impure_ptr
.L13:
	ldr	r1, [r4, #48]
	cmp	r1, #0
	beq	.L17	@cond_branch
	add	r0, r4, #0
	add	r0, r0, #64
	cmp	r1, r0
	beq	.L19	@cond_branch
	ldr	r0, [r4, #84]
	bl	_free_r
.L19:
	str	r5, [r4, #48]
	ldr	r0, [r4, #60]
	str	r0, [r4, #4]
	cmp	r0, #0
	beq	.L17	@cond_branch
	ldr	r0, [r4, #56]
	str	r0, [r4]
	b	.L23
.L17:
	ldr	r0, [r4, #16]
	cmp	r0, #0
	bne	.L21	@cond_branch
	add	r0, r4, #0
	bl	__smakebuf
.L21:
	mov	r0, #3
	ldrh	r1, [r4, #12]
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L22	@cond_branch
	ldr	r0, [r4, #84]
	ldr	r1, .L31
	bl	_fwalk
.L22:
	ldr	r1, [r4, #16]
	str	r1, [r4]
	ldr	r0, [r4, #28]
	ldr	r2, [r4, #20]
	ldr	r3, [r4, #32]
	bl	_call_via_r3
	str	r0, [r4, #4]
	ldr	r1, .L31+4
	ldrh	r2, [r4, #12]
	and	r1, r1, r2
	mov	r2, #0
	strh	r1, [r4, #12]
	cmp	r0, #0
	bgt	.L23	@cond_branch
	cmp	r0, #0
	bne	.L24	@cond_branch
	mov	r0, #32
	b	.L28
.L32:
	.align	2, 0
.L31:
	.word	lflush
	.word	-8193
.L24:
	mov	r0, #0
	str	r0, [r4, #4]
	mov	r0, #64
.L28:
	orr	r1, r1, r0
	strh	r1, [r4, #12]
.L25:
	mov	r0, #1
	neg	r0, r0
	b	.L26
.L23:
	mov	r0, #0
.L26:
	pop	{r4, r5, pc}
.Lfe2:
	.size	 __srefill,.Lfe2-__srefill
.text
	.align	2, 0
