@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
.text
	.align	2, 0
	.globl	fseek
	.type	 fseek,function
	.thumb_func
fseek:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-68
	add	r4, r0, #0
	str	r1, [sp, #60]
	mov	sl, r2
	ldr	r0, [r4, #84]
	cmp	r0, #0
	bne	.L6	@cond_branch
	ldr	r0, .L62
	ldr	r0, [r0]
	str	r0, [r4, #84]
.L6:
	ldr	r1, [r4, #84]
	ldr	r0, [r1, #56]
	cmp	r0, #0
	bne	.L4	@cond_branch
	add	r0, r1, #0
	bl	__sinit
.L4:
	ldr	r7, [r4, #84]
	mov	r1, #132
	lsl	r1, r1, #1
	add	r0, r1, #0
	ldrh	r2, [r4, #12]
	and	r0, r0, r2
	cmp	r0, r1
	bne	.L10	@cond_branch
	add	r0, r4, #0
	bl	fflush
.L10:
	ldr	r3, [r4, #40]
	str	r3, [sp, #64]
	cmp	r3, #0
	bne	.L11	@cond_branch
	mov	r0, #29
	b	.L56
.L63:
	.align	2, 0
.L62:
	.word	_impure_ptr
.L11:
	mov	r0, sl
	cmp	r0, #1
	beq	.L13	@cond_branch
	cmp	r0, #1
	bgt	.L25	@cond_branch
	cmp	r0, #0
	beq	.L22	@cond_branch
	b	.L23
.L25:
	mov	r1, sl
	cmp	r1, #2
	beq	.L22	@cond_branch
	b	.L23
.L13:
	add	r0, r4, #0
	bl	fflush
	mov	r0, #128
	lsl	r0, r0, #5
	ldrh	r2, [r4, #12]
	and	r0, r0, r2
	cmp	r0, #0
	bne	.L14	@cond_branch
	ldr	r0, [r4, #28]
	mov	r1, #0
	mov	r2, #1
	ldr	r3, [sp, #64]
	bl	_call_via_r3
	add	r6, r0, #0
	mov	r0, #1
	neg	r0, r0
	cmp	r6, r0
	bne	.L15	@cond_branch
.L61:
	mov	r0, #1
	neg	r0, r0
	b	.L55
.L14:
	ldr	r6, [r4, #80]
.L15:
	ldrh	r1, [r4, #12]
	mov	r0, #4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L17	@cond_branch
	ldr	r0, [r4, #4]
	sub	r6, r6, r0
	ldr	r0, [r4, #48]
	ldr	r2, [r4, #16]
	cmp	r0, #0
	beq	.L19	@cond_branch
	ldr	r0, [r4, #60]
	sub	r6, r6, r0
	b	.L19
.L17:
	mov	r0, #8
	and	r0, r0, r1
	ldr	r2, [r4, #16]
	cmp	r0, #0
	beq	.L19	@cond_branch
	ldr	r0, [r4]
	cmp	r0, #0
	beq	.L19	@cond_branch
	sub	r0, r0, r2
	add	r6, r6, r0
.L19:
	ldr	r0, [sp, #60]
	add	r0, r0, r6
	str	r0, [sp, #60]
	mov	r1, #0
	mov	sl, r1
	mov	r3, #1
	mov	r9, r3
	b	.L12
.L22:
	mov	r0, #0
	mov	r9, r0
	ldr	r2, [r4, #16]
	b	.L12
.L23:
	mov	r0, #22
.L56:
	str	r0, [r7]
	b	.L61
.L12:
	cmp	r2, #0
	bne	.L26	@cond_branch
	add	r0, r4, #0
	bl	__smakebuf
.L26:
	ldrh	r1, [r4, #12]
	ldr	r0, .L64
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB185
	b	.L28	@long jump
.LCB185:
	mov	r5, #128
	lsl	r5, r5, #3
	add	r0, r5, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L29	@cond_branch
	ldr	r0, .L64+4
	ldr	r1, [sp, #64]
	cmp	r1, r0
	bne	.L31	@cond_branch
	mov	r2, #14
	ldrsh	r0, [r4, r2]
	cmp	r0, #0
	blt	.L31	@cond_branch
	add	r1, r0, #0
	add	r0, r7, #0
	mov	r2, sp
	bl	_fstat_r
	cmp	r0, #0
	bne	.L31	@cond_branch
	ldr	r0, [sp, #4]
	mov	r1, #240
	lsl	r1, r1, #8
	and	r0, r0, r1
	mov	r1, #128
	lsl	r1, r1, #8
	cmp	r0, r1
	beq	.L30	@cond_branch
.L31:
	mov	r1, #128
	lsl	r1, r1, #4
	add	r0, r1, #0
	ldrh	r2, [r4, #12]
	orr	r0, r0, r2
	strh	r0, [r4, #12]
	b	.L28
.L65:
	.align	2, 0
.L64:
	.word	2074
	.word	__sseek
.L30:
	str	r5, [r4, #76]
	add	r0, r5, #0
	ldrh	r3, [r4, #12]
	orr	r0, r0, r3
	strh	r0, [r4, #12]
.L29:
	mov	r0, sl
	cmp	r0, #0
	bne	.L32	@cond_branch
	ldr	r1, [sp, #60]
	mov	r8, r1
	b	.L33
.L32:
	mov	r2, #14
	ldrsh	r1, [r4, r2]
	add	r0, r7, #0
	mov	r2, sp
	bl	_fstat_r
	cmp	r0, #0
	beq	.LCB267
	b	.L28	@long jump
.LCB267:
	ldr	r0, [sp, #16]
	ldr	r3, [sp, #60]
	add	r0, r0, r3
	mov	r8, r0
.L33:
	mov	r0, r9
	cmp	r0, #0
	bne	.L35	@cond_branch
	mov	r0, #128
	lsl	r0, r0, #5
	ldrh	r1, [r4, #12]
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L36	@cond_branch
	ldr	r6, [r4, #80]
	b	.L37
.L36:
	ldr	r0, [r4, #28]
	mov	r1, #0
	mov	r2, #1
	ldr	r3, [sp, #64]
	bl	_call_via_r3
	add	r6, r0, #0
	mov	r0, #1
	neg	r0, r0
	cmp	r6, r0
	beq	.L28	@cond_branch
.L37:
	ldr	r0, [r4, #4]
	sub	r6, r6, r0
	add	r2, r0, #0
	ldr	r3, [r4, #48]
	cmp	r3, #0
	beq	.L40	@cond_branch
	ldr	r0, [r4, #60]
	sub	r6, r6, r0
.L35:
	ldr	r2, [r4, #4]
	ldr	r3, [r4, #48]
	cmp	r3, #0
	beq	.L40	@cond_branch
	add	r6, r6, r2
	ldr	r0, [r4, #56]
	ldr	r1, [r4, #16]
	sub	r5, r0, r1
	sub	r6, r6, r5
	ldr	r0, [r4, #60]
	add	r5, r5, r0
	b	.L57
.L40:
	ldr	r0, [r4]
	ldr	r1, [r4, #16]
	sub	r5, r0, r1
	sub	r6, r6, r5
	add	r5, r5, r2
.L57:
	add	r2, r1, #0
	ldrh	r1, [r4, #12]
	mov	r0, #128
	lsl	r0, r0, #6
	and	r0, r0, r1
	lsl	r0, r0, #16
	asr	r0, r0, #16
	mov	r9, r0
	add	r7, r1, #0
	cmp	r0, #0
	bne	.L42	@cond_branch
	cmp	r8, r6
	blt	.L42	@cond_branch
	add	r0, r6, r5
	cmp	r8, r0
	bcs	.L42	@cond_branch
	mov	r1, r8
	sub	r0, r1, r6
	add	r1, r2, r0
	str	r1, [r4]
	sub	r0, r5, r0
	str	r0, [r4, #4]
	cmp	r3, #0
	beq	.L43	@cond_branch
	add	r0, r4, #0
	add	r0, r0, #64
	cmp	r3, r0
	beq	.L44	@cond_branch
	ldr	r0, [r4, #84]
	add	r1, r3, #0
	bl	_free_r
.L44:
	mov	r2, r9
	str	r2, [r4, #48]
	ldrh	r7, [r4, #12]
.L43:
	mov	r0, #33
	neg	r0, r0
	and	r0, r0, r7
	b	.L58
.L42:
	ldr	r0, [r4, #76]
	neg	r6, r0
	mov	r3, r8
	and	r6, r6, r3
	ldr	r0, [r4, #28]
	add	r1, r6, #0
	mov	r2, #0
	ldr	r3, [sp, #64]
	bl	_call_via_r3
	mov	r1, #1
	neg	r1, r1
	cmp	r0, r1
	beq	.L28	@cond_branch
	mov	r5, #0
	str	r5, [r4, #4]
	ldr	r1, [r4, #48]
	cmp	r1, #0
	beq	.L46	@cond_branch
	add	r0, r4, #0
	add	r0, r0, #64
	cmp	r1, r0
	beq	.L47	@cond_branch
	ldr	r0, [r4, #84]
	bl	_free_r
.L47:
	str	r5, [r4, #48]
.L46:
	mov	r0, #33
	neg	r0, r0
	ldrh	r1, [r4, #12]
	and	r0, r0, r1
	strh	r0, [r4, #12]
	mov	r2, r8
	sub	r5, r2, r6
	cmp	r5, #0
	beq	.L59	@cond_branch
	add	r0, r4, #0
	bl	__srefill
	cmp	r0, #0
	bne	.L28	@cond_branch
	ldr	r1, [r4, #4]
	cmp	r1, r5
	bcc	.L28	@cond_branch
	ldr	r0, [r4]
	add	r0, r0, r5
	str	r0, [r4]
	sub	r0, r1, r5
	str	r0, [r4, #4]
	b	.L59
.L28:
	add	r0, r4, #0
	bl	fflush
	add	r5, r0, #0
	cmp	r5, #0
	beq	.LCB457
	b	.L61	@long jump
.LCB457:
	ldr	r0, [r4, #28]
	ldr	r1, [sp, #60]
	mov	r2, sl
	ldr	r3, [sp, #64]
	bl	_call_via_r3
	mov	r1, #1
	neg	r1, r1
	cmp	r0, r1
	bne	.LCB468
	b	.L61	@long jump
.LCB468:
	ldr	r1, [r4, #48]
	cmp	r1, #0
	beq	.L53	@cond_branch
	add	r0, r4, #0
	add	r0, r0, #64
	cmp	r1, r0
	beq	.L54	@cond_branch
	ldr	r0, [r4, #84]
	bl	_free_r
.L54:
	str	r5, [r4, #48]
.L53:
	ldr	r0, [r4, #16]
	str	r0, [r4]
	mov	r0, #0
	str	r0, [r4, #4]
	sub	r0, r0, #33
	ldrh	r1, [r4, #12]
	and	r0, r0, r1
.L58:
	strh	r0, [r4, #12]
.L59:
	mov	r0, #0
.L55:
	add	sp, sp, #68
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7, pc}
.Lfe1:
	.size	 fseek,.Lfe1-fseek
.text
	.align	2, 0
