@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
.text
	.align	2, 0
	.type	 std,function
	.thumb_func
std:
	push	{r4, lr}
	mov	r4, #0
	str	r4, [r0]
	str	r4, [r0, #4]
	str	r4, [r0, #8]
	strh	r1, [r0, #12]
	strh	r2, [r0, #14]
	str	r4, [r0, #16]
	str	r4, [r0, #24]
	str	r0, [r0, #28]
	ldr	r1, .L3
	str	r1, [r0, #32]
	ldr	r1, .L3+4
	str	r1, [r0, #36]
	ldr	r1, .L3+8
	str	r1, [r0, #40]
	ldr	r1, .L3+12
	str	r1, [r0, #44]
	str	r3, [r0, #84]
	pop	{r4, pc}
.L4:
	.align	2, 0
.L3:
	.word	__sread
	.word	__swrite
	.word	__sseek
	.word	__sclose
.Lfe1:
	.size	 std,.Lfe1-std
	.align	2, 0
	.globl	__sfmoreglue
	.type	 __sfmoreglue,function
	.thumb_func
__sfmoreglue:
	push	{r4, r5, r6, lr}
	add	r5, r1, #0
	mov	r1, #88
	mov	r6, r5
	mul	r6, r6, r1
	add	r1, r6, #0
	add	r1, r1, #12
	bl	_malloc_r
	add	r4, r0, #0
	cmp	r4, #0
	beq	.L6	@cond_branch
	add	r0, r0, #12
	mov	r1, #0
	str	r1, [r4]
	str	r5, [r4, #4]
	str	r0, [r4, #8]
	add	r2, r6, #0
	bl	memset
	add	r0, r4, #0
	b	.L7
.L6:
	mov	r0, #0
.L7:
	pop	{r4, r5, r6, pc}
.Lfe2:
	.size	 __sfmoreglue,.Lfe2-__sfmoreglue
	.align	2, 0
	.globl	__sfp
	.type	 __sfp,function
	.thumb_func
__sfp:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r0, [r5, #56]
	cmp	r0, #0
	bne	.L9	@cond_branch
	add	r0, r5, #0
	bl	__sinit
.L9:
	mov	r0, #236
	lsl	r0, r0, #1
	add	r4, r5, r0
	b	.L10
.L12:
	ldr	r4, [r4]
.L10:
	ldr	r2, [r4, #8]
	ldr	r0, [r4, #4]
	b	.L23
.L16:
	mov	r3, #12
	ldrsh	r1, [r2, r3]
	cmp	r1, #0
	beq	.L18	@cond_branch
	add	r2, r2, #88
.L23:
	sub	r0, r0, #1
	cmp	r0, #0
	bge	.L16	@cond_branch
	ldr	r0, [r4]
	cmp	r0, #0
	bne	.L12	@cond_branch
	add	r0, r5, #0
	mov	r1, #4
	bl	__sfmoreglue
	str	r0, [r4]
	cmp	r0, #0
	bne	.L12	@cond_branch
	mov	r0, #12
	str	r0, [r5]
	mov	r0, #0
	b	.L22
.L18:
	mov	r0, #1
	strh	r0, [r2, #12]
	str	r1, [r2]
	str	r1, [r2, #8]
	str	r1, [r2, #4]
	str	r1, [r2, #16]
	str	r1, [r2, #20]
	str	r1, [r2, #24]
	ldr	r0, .L24
	strh	r0, [r2, #14]
	str	r1, [r2, #48]
	str	r1, [r2, #52]
	str	r1, [r2, #68]
	str	r1, [r2, #72]
	str	r5, [r2, #84]
	add	r0, r2, #0
.L22:
	pop	{r4, r5, pc}
.L25:
	.align	2, 0
.L24:
	.word	65535
.Lfe3:
	.size	 __sfp,.Lfe3-__sfp
	.align	2, 0
	.globl	_cleanup_r
	.type	 _cleanup_r,function
	.thumb_func
_cleanup_r:
	push	{lr}
	ldr	r1, .L27
	bl	_fwalk
	pop	{pc}
.L28:
	.align	2, 0
.L27:
	.word	fflush
.Lfe4:
	.size	 _cleanup_r,.Lfe4-_cleanup_r
	.align	2, 0
	.globl	_cleanup
	.type	 _cleanup,function
	.thumb_func
_cleanup:
	push	{lr}
	ldr	r0, .L30
	ldr	r0, [r0]
	bl	_cleanup_r
	pop	{pc}
.L31:
	.align	2, 0
.L30:
	.word	_impure_ptr
.Lfe5:
	.size	 _cleanup,.Lfe5-_cleanup
	.align	2, 0
	.globl	__sinit
	.type	 __sinit,function
	.thumb_func
__sinit:
	push	{r4, r5, lr}
	add	r5, r0, #0
	ldr	r0, .L33
	str	r0, [r5, #60]
	mov	r0, #1
	str	r0, [r5, #56]
	mov	r0, #242
	lsl	r0, r0, #1
	add	r4, r5, r0
	add	r0, r4, #0
	mov	r1, #4
	mov	r2, #0
	add	r3, r5, #0
	bl	std
	mov	r1, #143
	lsl	r1, r1, #2
	add	r0, r5, r1
	mov	r1, #9
	mov	r2, #1
	add	r3, r5, #0
	bl	std
	mov	r1, #165
	lsl	r1, r1, #2
	add	r0, r5, r1
	mov	r1, #10
	mov	r2, #2
	add	r3, r5, #0
	bl	std
	mov	r0, #236
	lsl	r0, r0, #1
	add	r1, r5, r0
	mov	r0, #0
	str	r0, [r1]
	mov	r0, #238
	lsl	r0, r0, #1
	add	r1, r5, r0
	mov	r0, #3
	str	r0, [r1]
	mov	r1, #240
	lsl	r1, r1, #1
	add	r0, r5, r1
	str	r4, [r0]
	pop	{r4, r5, pc}
.L34:
	.align	2, 0
.L33:
	.word	_cleanup_r
.Lfe6:
	.size	 __sinit,.Lfe6-__sinit
.text
	.align	2, 0
