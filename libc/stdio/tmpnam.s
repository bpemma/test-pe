@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.section .rodata
	.align	2, 0
.LC0:
	.ascii	"%s/%s%x.%x\000"
.text
	.align	2, 0
	.type	 worker,function
	.thumb_func
worker:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-12
	add	r4, r0, #0
	add	r5, r1, #0
	mov	r8, r2
	add	r7, r3, #0
	ldr	r6, [sp, #40]
.L5:
	str	r7, [sp]
	ldr	r0, [sp, #36]
	str	r0, [sp, #4]
	ldr	r0, [r6]
	str	r0, [sp, #8]
	add	r0, r4, #0
	add	r1, r5, #0
	ldr	r2, .L10
	mov	r3, r8
	bl	_sprintf_r
	ldr	r0, [r6]
	add	r0, r0, #1
	str	r0, [r6]
	add	r0, r4, #0
	add	r1, r5, #0
	mov	r2, #0
	mov	r3, #0
	bl	_open_r
	add	r1, r0, #0
	mov	r0, #1
	neg	r0, r0
	cmp	r1, r0
	bne	.L6	@cond_branch
	ldr	r0, [r4]
	cmp	r0, #88
	bne	.L4	@cond_branch
	mov	r0, #48
	strb	r0, [r5]
	mov	r0, #0
	b	.L9
.L11:
	.align	2, 0
.L10:
	.word	.LC0
.L6:
	add	r0, r4, #0
	bl	_close_r
	b	.L5
.L4:
	mov	r0, #1
.L9:
	add	sp, sp, #12
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7, pc}
.Lfe1:
	.size	 worker,.Lfe1-worker
	.section .rodata
	.align	2, 0
.LC2:
	.ascii	"/tmp\000"
	.align	2, 0
.LC4:
	.ascii	"t\000"
.text
	.align	2, 0
	.globl	_tmpnam_r
	.type	 _tmpnam_r,function
	.thumb_func
_tmpnam_r:
	push	{r4, r5, lr}
	add	sp, sp, #-8
	add	r4, r0, #0
	add	r5, r1, #0
	cmp	r5, #0
	bne	.L13	@cond_branch
	add	r5, r4, #0
	add	r5, r5, #20
.L13:
	add	r0, r4, #0
	bl	_getpid_r
	ldr	r2, .L17
	ldr	r3, .L17+4
	str	r0, [sp]
	add	r0, r4, #0
	add	r0, r0, #16
	str	r0, [sp, #4]
	add	r0, r4, #0
	add	r1, r5, #0
	bl	worker
	cmp	r0, #0
	bne	.L15	@cond_branch
	mov	r0, #0
	b	.L16
.L18:
	.align	2, 0
.L17:
	.word	.LC2
	.word	.LC4
.L15:
	ldr	r0, [r4, #16]
	add	r0, r0, #1
	str	r0, [r4, #16]
	add	r0, r5, #0
.L16:
	add	sp, sp, #8
	pop	{r4, r5, pc}
.Lfe2:
	.size	 _tmpnam_r,.Lfe2-_tmpnam_r
	.section .rodata
	.align	2, 0
.LC6:
	.ascii	"\000"
	.align	2, 0
.LC8:
	.ascii	"TMPDIR\000"
.text
	.align	2, 0
	.globl	_tempnam_r
	.type	 _tempnam_r,function
	.thumb_func
_tempnam_r:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-8
	add	r6, r0, #0
	add	r5, r1, #0
	add	r7, r2, #0
	cmp	r7, #0
	bne	.L20	@cond_branch
	ldr	r7, .L25
.L20:
	cmp	r5, #0
	bne	.L21	@cond_branch
	ldr	r0, .L25+4
	bl	getenv
	add	r5, r0, #0
	cmp	r5, #0
	bne	.L21	@cond_branch
	ldr	r5, .L25+8
.L21:
	add	r0, r5, #0
	bl	strlen
	add	r4, r0, #0
	add	r0, r7, #0
	bl	strlen
	add	r4, r4, r0
	add	r4, r4, #19
	add	r0, r6, #0
	add	r1, r4, #0
	bl	_malloc_r
	add	r4, r0, #0
	cmp	r4, #0
	beq	.L22	@cond_branch
	add	r0, r6, #0
	bl	_getpid_r
	eor	r0, r0, r6
	str	r0, [sp]
	add	r0, r6, #0
	add	r0, r0, #16
	str	r0, [sp, #4]
	add	r0, r6, #0
	add	r1, r4, #0
	add	r2, r5, #0
	add	r3, r7, #0
	bl	worker
	cmp	r0, #0
	bne	.L22	@cond_branch
	mov	r0, #0
	b	.L24
.L26:
	.align	2, 0
.L25:
	.word	.LC6
	.word	.LC8
	.word	.LC2
.L22:
	add	r0, r4, #0
.L24:
	add	sp, sp, #8
	pop	{r4, r5, r6, r7, pc}
.Lfe3:
	.size	 _tempnam_r,.Lfe3-_tempnam_r
	.align	2, 0
	.globl	tempnam
	.type	 tempnam,function
	.thumb_func
tempnam:
	push	{lr}
	add	r3, r0, #0
	add	r2, r1, #0
	ldr	r0, .L28
	ldr	r0, [r0]
	add	r1, r3, #0
	bl	_tempnam_r
	pop	{pc}
.L29:
	.align	2, 0
.L28:
	.word	_impure_ptr
.Lfe4:
	.size	 tempnam,.Lfe4-tempnam
	.align	2, 0
	.globl	tmpnam
	.type	 tmpnam,function
	.thumb_func
tmpnam:
	push	{lr}
	add	r1, r0, #0
	ldr	r0, .L31
	ldr	r0, [r0]
	bl	_tmpnam_r
	pop	{pc}
.L32:
	.align	2, 0
.L31:
	.word	_impure_ptr
.Lfe5:
	.size	 tmpnam,.Lfe5-tmpnam
.text
	.align	2, 0
