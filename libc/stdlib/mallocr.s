@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.globl	__malloc_av_
.data
	.align	2, 0
	.type	 __malloc_av_,object
	.size	 __malloc_av_,1032
__malloc_av_:
	.word	0
	.word	0
	.word	__malloc_av_
	.word	__malloc_av_
	.word	__malloc_av_+8
	.word	__malloc_av_+8
	.word	__malloc_av_+16
	.word	__malloc_av_+16
	.word	__malloc_av_+24
	.word	__malloc_av_+24
	.word	__malloc_av_+32
	.word	__malloc_av_+32
	.word	__malloc_av_+40
	.word	__malloc_av_+40
	.word	__malloc_av_+48
	.word	__malloc_av_+48
	.word	__malloc_av_+56
	.word	__malloc_av_+56
	.word	__malloc_av_+64
	.word	__malloc_av_+64
	.word	__malloc_av_+72
	.word	__malloc_av_+72
	.word	__malloc_av_+80
	.word	__malloc_av_+80
	.word	__malloc_av_+88
	.word	__malloc_av_+88
	.word	__malloc_av_+96
	.word	__malloc_av_+96
	.word	__malloc_av_+104
	.word	__malloc_av_+104
	.word	__malloc_av_+112
	.word	__malloc_av_+112
	.word	__malloc_av_+120
	.word	__malloc_av_+120
	.word	__malloc_av_+128
	.word	__malloc_av_+128
	.word	__malloc_av_+136
	.word	__malloc_av_+136
	.word	__malloc_av_+144
	.word	__malloc_av_+144
	.word	__malloc_av_+152
	.word	__malloc_av_+152
	.word	__malloc_av_+160
	.word	__malloc_av_+160
	.word	__malloc_av_+168
	.word	__malloc_av_+168
	.word	__malloc_av_+176
	.word	__malloc_av_+176
	.word	__malloc_av_+184
	.word	__malloc_av_+184
	.word	__malloc_av_+192
	.word	__malloc_av_+192
	.word	__malloc_av_+200
	.word	__malloc_av_+200
	.word	__malloc_av_+208
	.word	__malloc_av_+208
	.word	__malloc_av_+216
	.word	__malloc_av_+216
	.word	__malloc_av_+224
	.word	__malloc_av_+224
	.word	__malloc_av_+232
	.word	__malloc_av_+232
	.word	__malloc_av_+240
	.word	__malloc_av_+240
	.word	__malloc_av_+248
	.word	__malloc_av_+248
	.word	__malloc_av_+256
	.word	__malloc_av_+256
	.word	__malloc_av_+264
	.word	__malloc_av_+264
	.word	__malloc_av_+272
	.word	__malloc_av_+272
	.word	__malloc_av_+280
	.word	__malloc_av_+280
	.word	__malloc_av_+288
	.word	__malloc_av_+288
	.word	__malloc_av_+296
	.word	__malloc_av_+296
	.word	__malloc_av_+304
	.word	__malloc_av_+304
	.word	__malloc_av_+312
	.word	__malloc_av_+312
	.word	__malloc_av_+320
	.word	__malloc_av_+320
	.word	__malloc_av_+328
	.word	__malloc_av_+328
	.word	__malloc_av_+336
	.word	__malloc_av_+336
	.word	__malloc_av_+344
	.word	__malloc_av_+344
	.word	__malloc_av_+352
	.word	__malloc_av_+352
	.word	__malloc_av_+360
	.word	__malloc_av_+360
	.word	__malloc_av_+368
	.word	__malloc_av_+368
	.word	__malloc_av_+376
	.word	__malloc_av_+376
	.word	__malloc_av_+384
	.word	__malloc_av_+384
	.word	__malloc_av_+392
	.word	__malloc_av_+392
	.word	__malloc_av_+400
	.word	__malloc_av_+400
	.word	__malloc_av_+408
	.word	__malloc_av_+408
	.word	__malloc_av_+416
	.word	__malloc_av_+416
	.word	__malloc_av_+424
	.word	__malloc_av_+424
	.word	__malloc_av_+432
	.word	__malloc_av_+432
	.word	__malloc_av_+440
	.word	__malloc_av_+440
	.word	__malloc_av_+448
	.word	__malloc_av_+448
	.word	__malloc_av_+456
	.word	__malloc_av_+456
	.word	__malloc_av_+464
	.word	__malloc_av_+464
	.word	__malloc_av_+472
	.word	__malloc_av_+472
	.word	__malloc_av_+480
	.word	__malloc_av_+480
	.word	__malloc_av_+488
	.word	__malloc_av_+488
	.word	__malloc_av_+496
	.word	__malloc_av_+496
	.word	__malloc_av_+504
	.word	__malloc_av_+504
	.word	__malloc_av_+512
	.word	__malloc_av_+512
	.word	__malloc_av_+520
	.word	__malloc_av_+520
	.word	__malloc_av_+528
	.word	__malloc_av_+528
	.word	__malloc_av_+536
	.word	__malloc_av_+536
	.word	__malloc_av_+544
	.word	__malloc_av_+544
	.word	__malloc_av_+552
	.word	__malloc_av_+552
	.word	__malloc_av_+560
	.word	__malloc_av_+560
	.word	__malloc_av_+568
	.word	__malloc_av_+568
	.word	__malloc_av_+576
	.word	__malloc_av_+576
	.word	__malloc_av_+584
	.word	__malloc_av_+584
	.word	__malloc_av_+592
	.word	__malloc_av_+592
	.word	__malloc_av_+600
	.word	__malloc_av_+600
	.word	__malloc_av_+608
	.word	__malloc_av_+608
	.word	__malloc_av_+616
	.word	__malloc_av_+616
	.word	__malloc_av_+624
	.word	__malloc_av_+624
	.word	__malloc_av_+632
	.word	__malloc_av_+632
	.word	__malloc_av_+640
	.word	__malloc_av_+640
	.word	__malloc_av_+648
	.word	__malloc_av_+648
	.word	__malloc_av_+656
	.word	__malloc_av_+656
	.word	__malloc_av_+664
	.word	__malloc_av_+664
	.word	__malloc_av_+672
	.word	__malloc_av_+672
	.word	__malloc_av_+680
	.word	__malloc_av_+680
	.word	__malloc_av_+688
	.word	__malloc_av_+688
	.word	__malloc_av_+696
	.word	__malloc_av_+696
	.word	__malloc_av_+704
	.word	__malloc_av_+704
	.word	__malloc_av_+712
	.word	__malloc_av_+712
	.word	__malloc_av_+720
	.word	__malloc_av_+720
	.word	__malloc_av_+728
	.word	__malloc_av_+728
	.word	__malloc_av_+736
	.word	__malloc_av_+736
	.word	__malloc_av_+744
	.word	__malloc_av_+744
	.word	__malloc_av_+752
	.word	__malloc_av_+752
	.word	__malloc_av_+760
	.word	__malloc_av_+760
	.word	__malloc_av_+768
	.word	__malloc_av_+768
	.word	__malloc_av_+776
	.word	__malloc_av_+776
	.word	__malloc_av_+784
	.word	__malloc_av_+784
	.word	__malloc_av_+792
	.word	__malloc_av_+792
	.word	__malloc_av_+800
	.word	__malloc_av_+800
	.word	__malloc_av_+808
	.word	__malloc_av_+808
	.word	__malloc_av_+816
	.word	__malloc_av_+816
	.word	__malloc_av_+824
	.word	__malloc_av_+824
	.word	__malloc_av_+832
	.word	__malloc_av_+832
	.word	__malloc_av_+840
	.word	__malloc_av_+840
	.word	__malloc_av_+848
	.word	__malloc_av_+848
	.word	__malloc_av_+856
	.word	__malloc_av_+856
	.word	__malloc_av_+864
	.word	__malloc_av_+864
	.word	__malloc_av_+872
	.word	__malloc_av_+872
	.word	__malloc_av_+880
	.word	__malloc_av_+880
	.word	__malloc_av_+888
	.word	__malloc_av_+888
	.word	__malloc_av_+896
	.word	__malloc_av_+896
	.word	__malloc_av_+904
	.word	__malloc_av_+904
	.word	__malloc_av_+912
	.word	__malloc_av_+912
	.word	__malloc_av_+920
	.word	__malloc_av_+920
	.word	__malloc_av_+928
	.word	__malloc_av_+928
	.word	__malloc_av_+936
	.word	__malloc_av_+936
	.word	__malloc_av_+944
	.word	__malloc_av_+944
	.word	__malloc_av_+952
	.word	__malloc_av_+952
	.word	__malloc_av_+960
	.word	__malloc_av_+960
	.word	__malloc_av_+968
	.word	__malloc_av_+968
	.word	__malloc_av_+976
	.word	__malloc_av_+976
	.word	__malloc_av_+984
	.word	__malloc_av_+984
	.word	__malloc_av_+992
	.word	__malloc_av_+992
	.word	__malloc_av_+1000
	.word	__malloc_av_+1000
	.word	__malloc_av_+1008
	.word	__malloc_av_+1008
	.word	__malloc_av_+1016
	.word	__malloc_av_+1016
	.globl	__malloc_trim_threshold
	.align	2, 0
	.type	 __malloc_trim_threshold,object
	.size	 __malloc_trim_threshold,4
__malloc_trim_threshold:
	.word	131072
	.globl	__malloc_top_pad
	.align	2, 0
	.type	 __malloc_top_pad,object
	.size	 __malloc_top_pad,4
__malloc_top_pad:
	.word	0
	.globl	__malloc_sbrk_base
	.align	2, 0
	.type	 __malloc_sbrk_base,object
	.size	 __malloc_sbrk_base,4
__malloc_sbrk_base:
	.word	-1
	.globl	__malloc_max_sbrked_mem
	.align	2, 0
	.type	 __malloc_max_sbrked_mem,object
	.size	 __malloc_max_sbrked_mem,4
__malloc_max_sbrked_mem:
	.word	0
	.globl	__malloc_max_total_mem
	.align	2, 0
	.type	 __malloc_max_total_mem,object
	.size	 __malloc_max_total_mem,4
__malloc_max_total_mem:
	.word	0
	.globl	__malloc_current_mallinfo
	.align	2, 0
	.type	 __malloc_current_mallinfo,object
	.size	 __malloc_current_mallinfo,40
__malloc_current_mallinfo:
	.word	0
	.word	0
	.word	0
	.word	0
	.word	0
	.word	0
	.word	0
	.word	0
	.word	0
	.word	0
.text
	.align	2, 0
	.type	 malloc_extend_top,function
	.thumb_func
malloc_extend_top:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-4
	str	r0, [sp]
	ldr	r0, .L18
	ldr	r0, [r0, #8]
	mov	r8, r0
	ldr	r7, [r0, #4]
	mov	r0, #4
	neg	r0, r0
	and	r7, r7, r0
	mov	r2, r8
	add	r4, r2, r7
	ldr	r0, .L18+4
	ldr	r0, [r0]
	add	r1, r1, r0
	add	r6, r1, #0
	add	r6, r6, #16
	ldr	r3, .L18+8
	mov	sl, r3
	ldr	r0, [r3]
	mov	r2, #1
	neg	r2, r2
	mov	r9, r2
	cmp	r0, r9
	beq	.L3	@cond_branch
	ldr	r3, .L18+12
	add	r6, r1, r3
	ldr	r0, .L18+16
	and	r6, r6, r0
.L3:
	ldr	r0, [sp]
	add	r1, r6, #0
	bl	_sbrk_r
	add	r5, r0, #0
	cmp	r5, r9
	beq	.L2	@cond_branch
	cmp	r5, r4
	bcs	.L4	@cond_branch
	ldr	r0, .L18
	cmp	r8, r0
	bne	.L2	@cond_branch
.L4:
	ldr	r1, .L18+20
	ldr	r0, [r1]
	add	r2, r0, r6
	str	r2, [r1]
	cmp	r5, r4
	bne	.L6	@cond_branch
	add	r2, r6, r7
	ldr	r3, .L18
	ldr	r1, [r3, #8]
	mov	r0, #1
	orr	r2, r2, r0
	str	r2, [r1, #4]
	b	.L7
.L19:
	.align	2, 0
.L18:
	.word	__malloc_av_
	.word	__malloc_top_pad
	.word	__malloc_sbrk_base
	.word	4111
	.word	-4096
	.word	__malloc_current_mallinfo
.L6:
	mov	r3, sl
	ldr	r0, [r3]
	cmp	r0, r9
	bne	.L8	@cond_branch
	str	r5, [r3]
	b	.L9
.L8:
	sub	r0, r5, r4
	add	r0, r2, r0
	str	r0, [r1]
.L9:
	add	r1, r5, #0
	add	r1, r1, #8
	mov	r0, #7
	and	r1, r1, r0
	cmp	r1, #0
	beq	.L10	@cond_branch
	mov	r0, #8
	sub	r4, r0, r1
	add	r5, r5, r4
	b	.L11
.L10:
	mov	r4, #0
.L11:
	add	r0, r5, r6
	mov	r1, #128
	lsl	r1, r1, #5
	sub	r1, r1, #1
	and	r0, r0, r1
	mov	r1, #128
	lsl	r1, r1, #5
	sub	r0, r1, r0
	add	r4, r4, r0
	ldr	r0, [sp]
	add	r1, r4, #0
	bl	_sbrk_r
	add	r2, r0, #0
	mov	r0, #1
	neg	r0, r0
	cmp	r2, r0
	beq	.L2	@cond_branch
	ldr	r1, .L20
	ldr	r0, [r1]
	add	r0, r0, r4
	str	r0, [r1]
	ldr	r1, .L20+4
	str	r5, [r1, #8]
	sub	r0, r2, r5
	add	r2, r0, r4
	mov	r3, #1
	orr	r2, r2, r3
	str	r2, [r5, #4]
	cmp	r8, r1
	beq	.L7	@cond_branch
	cmp	r7, #15
	bhi	.L14	@cond_branch
	str	r3, [r5, #4]
	b	.L2
.L21:
	.align	2, 0
.L20:
	.word	__malloc_current_mallinfo
	.word	__malloc_av_
.L14:
	sub	r7, r7, #12
	mov	r0, #8
	neg	r0, r0
	and	r7, r7, r0
	mov	r2, r8
	ldr	r0, [r2, #4]
	and	r0, r0, r3
	orr	r0, r0, r7
	str	r0, [r2, #4]
	add	r1, r2, r7
	mov	r0, #5
	str	r0, [r1, #4]
	str	r0, [r1, #8]
	cmp	r7, #15
	bls	.L7	@cond_branch
	mov	r1, r8
	add	r1, r1, #8
	ldr	r0, [sp]
	bl	_free_r
.L7:
	ldr	r0, .L22
	ldr	r2, .L22+4
	ldr	r1, [r0]
	ldr	r0, [r2]
	cmp	r1, r0
	bls	.L16	@cond_branch
	str	r1, [r2]
.L16:
	ldr	r2, .L22+8
	ldr	r0, [r2]
	cmp	r1, r0
	bls	.L2	@cond_branch
	str	r1, [r2]
.L2:
	add	sp, sp, #4
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7, pc}
.L23:
	.align	2, 0
.L22:
	.word	__malloc_current_mallinfo
	.word	__malloc_max_sbrked_mem
	.word	__malloc_max_total_mem
.Lfe1:
	.size	 malloc_extend_top,.Lfe1-malloc_extend_top
	.align	2, 0
	.globl	_malloc_r
	.type	 _malloc_r,function
	.thumb_func
_malloc_r:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-8
	str	r0, [sp]
	add	r1, r1, #11
	cmp	r1, #22
	ble	.L25	@cond_branch
	mov	r0, #8
	neg	r0, r0
	mov	r8, r0
	mov	r2, r8
	and	r2, r2, r1
	mov	r8, r2
	b	.L26
.L25:
	mov	r3, #16
	mov	r8, r3
.L26:
	ldr	r0, [sp]
	bl	__malloc_lock
	ldr	r0, .L134
	cmp	r8, r0
	bhi	.L27	@cond_branch
	mov	r4, r8
	lsr	r4, r4, #3
	mov	ip, r4
	ldr	r0, .L134+4
	mov	r7, r8
	add	r2, r7, r0
	ldr	r5, [r2, #12]
	cmp	r5, r2
	bne	.L118	@cond_branch
	add	r2, r5, #0
	add	r2, r2, #8
	ldr	r5, [r2, #12]
	cmp	r5, r2
	beq	.L29	@cond_branch
.L118:
	ldr	r2, [r5, #4]
	mov	r0, #4
	neg	r0, r0
	and	r2, r2, r0
	ldr	r6, [r5, #12]
	ldr	r4, [r5, #8]
	str	r6, [r4, #12]
	str	r4, [r6, #8]
	add	r2, r5, r2
	ldr	r0, [r2, #4]
	mov	r1, #1
	orr	r0, r0, r1
	str	r0, [r2, #4]
	b	.L125
.L135:
	.align	2, 0
.L134:
	.word	503
	.word	__malloc_av_
.L29:
	mov	r0, #2
	add	ip, ip, r0
	b	.L30
.L27:
	mov	r2, r8
	lsr	r1, r2, #9
	cmp	r1, #0
	bne	.L31	@cond_branch
	lsr	r2, r2, #3
	b	.L126
.L31:
	cmp	r1, #4
	bhi	.L33	@cond_branch
	mov	r3, r8
	lsr	r0, r3, #6
	add	r0, r0, #56
	mov	ip, r0
	b	.L32
.L33:
	cmp	r1, #20
	bhi	.L35	@cond_branch
	add	r1, r1, #91
	mov	ip, r1
	b	.L32
.L35:
	cmp	r1, #84
	bhi	.L37	@cond_branch
	mov	r4, r8
	lsr	r0, r4, #12
	add	r0, r0, #110
	mov	ip, r0
	b	.L32
.L37:
	mov	r0, #170
	lsl	r0, r0, #1
	cmp	r1, r0
	bhi	.L39	@cond_branch
	mov	r7, r8
	lsr	r0, r7, #15
	add	r0, r0, #119
	mov	ip, r0
	b	.L32
.L39:
	ldr	r0, .L136
	cmp	r1, r0
	bhi	.L41	@cond_branch
	mov	r1, r8
	lsr	r0, r1, #18
	add	r0, r0, #124
	mov	ip, r0
	b	.L32
.L137:
	.align	2, 0
.L136:
	.word	1364
.L41:
	mov	r2, #126
.L126:
	mov	ip, r2
.L32:
	mov	r3, ip
	lsl	r0, r3, #3
	ldr	r1, .L138
	add	r4, r0, r1
	ldr	r5, [r4, #12]
	cmp	r5, r4
	beq	.L44	@cond_branch
	ldr	r1, [r5, #4]
	mov	r0, #4
	neg	r0, r0
	and	r1, r1, r0
	mov	r7, r8
	sub	r3, r1, r7
	cmp	r3, #15
	ble	.L47	@cond_branch
	add	r0, r0, #3
	add	ip, ip, r0
	b	.L44
.L139:
	.align	2, 0
.L138:
	.word	__malloc_av_
.L47:
	cmp	r3, #0
	blt	.LCB375
	b	.L120	@long jump
.LCB375:
	ldr	r5, [r5, #12]
	cmp	r5, r4
	beq	.L44	@cond_branch
	ldr	r1, [r5, #4]
	mov	r0, #4
	neg	r0, r0
	and	r1, r1, r0
	mov	r2, r8
	sub	r3, r1, r2
	cmp	r3, #15
	ble	.L47	@cond_branch
	mov	r3, #1
	neg	r3, r3
	add	ip, ip, r3
.L44:
	mov	r4, #1
	add	ip, ip, r4
.L30:
	ldr	r0, .L140
	ldr	r5, [r0, #8]
	mov	sl, r0
	cmp	r5, sl
	bne	.LCB403
	b	.L51	@long jump
.LCB403:
	ldr	r1, [r5, #4]
	mov	r0, #4
	neg	r0, r0
	and	r1, r1, r0
	mov	r7, r8
	sub	r3, r1, r7
	cmp	r3, #15
	ble	.L52	@cond_branch
	add	r2, r5, r7
	mov	r1, #1
	add	r0, r7, #0
	orr	r0, r0, r1
	str	r0, [r5, #4]
	mov	r4, sl
	str	r2, [r4, #12]
	str	r2, [r4, #8]
	str	r4, [r2, #12]
	str	r4, [r2, #8]
	add	r0, r3, #0
	orr	r0, r0, r1
	str	r0, [r2, #4]
	add	r0, r2, r3
	str	r3, [r0]
	b	.L125
.L141:
	.align	2, 0
.L140:
	.word	__malloc_av_+8
.L52:
	mov	r7, sl
	str	r7, [r7, #12]
	str	r7, [r7, #8]
	cmp	r3, #0
	blt	.L53	@cond_branch
	add	r2, r5, r1
	ldr	r0, [r2, #4]
	mov	r1, #1
	orr	r0, r0, r1
	str	r0, [r2, #4]
	b	.L125
.L53:
	ldr	r0, .L142
	cmp	r1, r0
	bhi	.L54	@cond_branch
	lsr	r2, r1, #3
	mov	r3, sl
	sub	r3, r3, #8
	add	r0, r2, #0
	asr	r0, r0, #2
	mov	r1, #1
	lsl	r1, r1, r0
	ldr	r0, [r3, #4]
	orr	r0, r0, r1
	str	r0, [r3, #4]
	lsl	r0, r2, #3
	add	r6, r0, r3
	ldr	r4, [r6, #8]
	b	.L71
.L143:
	.align	2, 0
.L142:
	.word	511
.L54:
	lsr	r2, r1, #9
	cmp	r2, #0
	bne	.L57	@cond_branch
	lsr	r2, r1, #3
	b	.L58
.L57:
	cmp	r2, #4
	bhi	.L59	@cond_branch
	lsr	r0, r1, #6
	add	r2, r0, #0
	add	r2, r2, #56
	b	.L58
.L59:
	cmp	r2, #20
	bhi	.L61	@cond_branch
	add	r2, r2, #91
	b	.L58
.L61:
	cmp	r2, #84
	bhi	.L63	@cond_branch
	lsr	r0, r1, #12
	add	r2, r0, #0
	add	r2, r2, #110
	b	.L58
.L63:
	mov	r0, #170
	lsl	r0, r0, #1
	cmp	r2, r0
	bhi	.L65	@cond_branch
	lsr	r0, r1, #15
	add	r2, r0, #0
	add	r2, r2, #119
	b	.L58
.L65:
	ldr	r0, .L144
	cmp	r2, r0
	bhi	.L67	@cond_branch
	lsr	r0, r1, #18
	add	r2, r0, #0
	add	r2, r2, #124
	b	.L58
.L145:
	.align	2, 0
.L144:
	.word	1364
.L67:
	mov	r2, #126
.L58:
	lsl	r0, r2, #3
	ldr	r3, .L146
	add	r6, r0, r3
	ldr	r4, [r6, #8]
	cmp	r4, r6
	bne	.L119	@cond_branch
	add	r0, r2, #0
	asr	r0, r0, #2
	mov	r1, #1
	lsl	r1, r1, r0
	ldr	r7, .L146
	ldr	r0, [r7, #4]
	orr	r0, r0, r1
	str	r0, [r7, #4]
	b	.L71
.L147:
	.align	2, 0
.L146:
	.word	__malloc_av_
.L119:
	ldr	r0, [r4, #4]
	mov	r2, #4
	neg	r2, r2
	b	.L129
.L74:
	ldr	r4, [r4, #8]
	cmp	r4, r6
	beq	.L73	@cond_branch
	ldr	r0, [r4, #4]
.L129:
	and	r0, r0, r2
	cmp	r1, r0
	bcc	.L74	@cond_branch
.L73:
	ldr	r6, [r4, #12]
.L71:
	str	r6, [r5, #12]
	str	r4, [r5, #8]
	str	r5, [r6, #8]
	str	r5, [r4, #12]
.L51:
	mov	r0, ip
	cmp	r0, #0
	bge	.L78	@cond_branch
	add	r0, r0, #3
.L78:
	asr	r0, r0, #2
	mov	r6, #1
	lsl	r6, r6, r0
	ldr	r0, .L148
	ldr	r1, [r0, #4]
	cmp	r6, r1
	bhi	.L77	@cond_branch
	add	r0, r6, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L79	@cond_branch
	mov	r0, #4
	neg	r0, r0
	mov	r2, ip
	and	r0, r0, r2
	add	r0, r0, #4
	mov	ip, r0
	b	.L130
.L149:
	.align	2, 0
.L148:
	.word	__malloc_av_
.L82:
	mov	r3, #4
	add	ip, ip, r3
.L130:
	lsl	r6, r6, #1
	add	r0, r6, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L82	@cond_branch
.L79:
	ldr	r4, .L150
	mov	r9, r4
.L84:
	mov	r7, ip
	str	r7, [sp, #4]
	mov	r1, ip
	lsl	r0, r1, #3
	mov	r3, r9
	add	r2, r0, r3
	add	r4, r2, #0
.L87:
	ldr	r5, [r4, #12]
	cmp	r5, r4
	beq	.L91	@cond_branch
	mov	r0, #4
	neg	r0, r0
.L93:
	ldr	r1, [r5, #4]
	and	r1, r1, r0
	mov	r7, r8
	sub	r3, r1, r7
	cmp	r3, #15
	bgt	.L121	@cond_branch
	cmp	r3, #0
	bge	.L122	@cond_branch
	ldr	r5, [r5, #12]
	cmp	r5, r4
	bne	.L93	@cond_branch
.L91:
	add	r4, r4, #8
	mov	r0, #1
	add	ip, ip, r0
	mov	r0, ip
	mov	r1, #3
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L87	@cond_branch
.L100:
	ldr	r0, [sp, #4]
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L123	@cond_branch
	ldr	r3, [sp, #4]
	sub	r3, r3, #1
	str	r3, [sp, #4]
	sub	r2, r2, #8
	ldr	r0, [r2, #8]
	cmp	r0, r2
	beq	.L100	@cond_branch
.L101:
	lsl	r6, r6, #1
	mov	r4, r9
	ldr	r1, [r4, #4]
	cmp	r6, r1
	bhi	.L77	@cond_branch
	cmp	r6, #0
	beq	.L77	@cond_branch
	add	r0, r6, #0
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L84	@cond_branch
.L109:
	mov	r7, #4
	add	ip, ip, r7
	lsl	r6, r6, #1
	add	r0, r6, #0
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L109	@cond_branch
	b	.L84
.L151:
	.align	2, 0
.L150:
	.word	__malloc_av_
.L123:
	mov	r1, r9
	ldr	r0, [r1, #4]
	bic	r0, r0, r6
	str	r0, [r1, #4]
	b	.L101
.L77:
	ldr	r2, .L152
	ldr	r0, [r2, #8]
	ldr	r0, [r0, #4]
	mov	r4, #4
	neg	r4, r4
	and	r0, r0, r4
	mov	r7, r8
	sub	r3, r0, r7
	cmp	r0, r8
	bcc	.L114	@cond_branch
	cmp	r3, #15
	bgt	.L113	@cond_branch
.L114:
	ldr	r0, [sp]
	mov	r1, r8
	bl	malloc_extend_top
	ldr	r1, .L152
	ldr	r0, [r1, #8]
	ldr	r0, [r0, #4]
	and	r0, r0, r4
	mov	r2, r8
	sub	r3, r0, r2
	cmp	r0, r8
	bcc	.L116	@cond_branch
	cmp	r3, #15
	bgt	.L113	@cond_branch
.L116:
	ldr	r0, [sp]
	bl	__malloc_unlock
	mov	r0, #0
	b	.L117
.L153:
	.align	2, 0
.L152:
	.word	__malloc_av_
.L120:
	ldr	r6, [r5, #12]
	ldr	r4, [r5, #8]
	str	r6, [r4, #12]
	str	r4, [r6, #8]
	add	r2, r5, r1
	ldr	r0, [r2, #4]
	mov	r1, #1
	orr	r0, r0, r1
	str	r0, [r2, #4]
	b	.L125
.L121:
	mov	r4, r8
	add	r2, r5, r4
	mov	r1, #1
	orr	r4, r4, r1
	str	r4, [r5, #4]
	ldr	r6, [r5, #12]
	ldr	r4, [r5, #8]
	str	r6, [r4, #12]
	str	r4, [r6, #8]
	mov	r7, sl
	str	r2, [r7, #12]
	str	r2, [r7, #8]
	str	r7, [r2, #12]
	str	r7, [r2, #8]
	add	r0, r3, #0
	orr	r0, r0, r1
	str	r0, [r2, #4]
	add	r0, r2, r3
	str	r3, [r0]
	b	.L125
.L122:
	add	r2, r5, r1
	ldr	r0, [r2, #4]
	mov	r1, #1
	orr	r0, r0, r1
	str	r0, [r2, #4]
	ldr	r6, [r5, #12]
	ldr	r4, [r5, #8]
	str	r6, [r4, #12]
	str	r4, [r6, #8]
	b	.L125
.L113:
	ldr	r2, .L154
	ldr	r5, [r2, #8]
	mov	r1, #1
	mov	r0, r8
	orr	r0, r0, r1
	str	r0, [r5, #4]
	mov	r4, r8
	add	r0, r5, r4
	str	r0, [r2, #8]
	orr	r3, r3, r1
	str	r3, [r0, #4]
.L125:
	ldr	r0, [sp]
	bl	__malloc_unlock
	add	r0, r5, #0
	add	r0, r0, #8
.L117:
	add	sp, sp, #8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7, pc}
.L155:
	.align	2, 0
.L154:
	.word	__malloc_av_
.Lfe2:
	.size	 _malloc_r,.Lfe2-_malloc_r
.text
	.align	2, 0
