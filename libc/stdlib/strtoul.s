@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
.text
	.align	2, 0
	.globl	_strtoul_r
	.type	 _strtoul_r,function
	.thumb_func
_strtoul_r:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-12
	str	r0, [sp]
	mov	sl, r1
	str	r2, [sp, #4]
	add	r7, r3, #0
	mov	r6, sl
	mov	r0, #0
	str	r0, [sp, #8]
	ldr	r1, .L38
	mov	r9, r1
	mov	r2, r9
	mov	r3, #8
.L3:
	ldrb	r5, [r6]
	add	r6, r6, #1
	add	r1, r5, r2
	add	r0, r3, #0
	ldrb	r1, [r1]
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L3	@cond_branch
	cmp	r5, #45
	bne	.L8	@cond_branch
	mov	r0, #1
	str	r0, [sp, #8]
	b	.L37
.L39:
	.align	2, 0
.L38:
	.word	_ctype_+1
.L8:
	cmp	r5, #43
	bne	.L9	@cond_branch
.L37:
	ldrb	r5, [r6]
	add	r6, r6, #1
.L9:
	cmp	r7, #0
	beq	.L12	@cond_branch
	cmp	r7, #16
	bne	.L11	@cond_branch
.L12:
	cmp	r5, #48
	bne	.L11	@cond_branch
	ldrb	r0, [r6]
	cmp	r0, #120
	beq	.L13	@cond_branch
	cmp	r0, #88
	bne	.L11	@cond_branch
.L13:
	ldrb	r5, [r6, #1]
	add	r6, r6, #2
	mov	r7, #16
.L11:
	cmp	r7, #0
	bne	.L14	@cond_branch
	mov	r7, #10
	cmp	r5, #48
	bne	.L14	@cond_branch
	mov	r7, #8
.L14:
	mov	r4, #1
	neg	r4, r4
	add	r0, r4, #0
	add	r1, r7, #0
	bl	__udivsi3
	mov	r8, r0
	add	r0, r4, #0
	add	r1, r7, #0
	bl	__umodsi3
	add	r4, r0, #0
	mov	r2, #0
	mov	r3, #0
	b	.L17
.L21:
	cmp	r5, r7
	bge	.L18	@cond_branch
	cmp	r3, #0
	blt	.L28	@cond_branch
	cmp	r2, r8
	bhi	.L28	@cond_branch
	cmp	r2, r8
	bne	.L27	@cond_branch
	cmp	r5, r4
	ble	.L27	@cond_branch
.L28:
	mov	r3, #1
	neg	r3, r3
	b	.L19
.L27:
	mov	r3, #1
	mul	r2, r2, r7
	add	r2, r2, r5
.L19:
	ldrb	r5, [r6]
	add	r6, r6, #1
.L17:
	mov	r1, r9
	add	r0, r5, r1
	ldrb	r1, [r0]
	mov	r0, #4
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L20	@cond_branch
	sub	r5, r5, #48
	b	.L21
.L20:
	mov	r0, #3
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L18	@cond_branch
	mov	r0, #1
	and	r0, r0, r1
	add	r1, r5, #0
	sub	r1, r1, #87
	cmp	r0, #0
	beq	.L23	@cond_branch
	add	r1, r1, #32
.L23:
	add	r5, r1, #0
	b	.L21
.L18:
	cmp	r3, #0
	bge	.L31	@cond_branch
	mov	r2, #1
	neg	r2, r2
	mov	r0, #34
	ldr	r1, [sp]
	str	r0, [r1]
	b	.L32
.L31:
	ldr	r0, [sp, #8]
	cmp	r0, #0
	beq	.L32	@cond_branch
	neg	r2, r2
.L32:
	ldr	r1, [sp, #4]
	cmp	r1, #0
	beq	.L34	@cond_branch
	mov	r1, sl
	cmp	r3, #0
	beq	.L35	@cond_branch
	sub	r1, r6, #1
.L35:
	ldr	r0, [sp, #4]
	str	r1, [r0]
.L34:
	add	r0, r2, #0
	add	sp, sp, #12
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7, pc}
.Lfe1:
	.size	 _strtoul_r,.Lfe1-_strtoul_r
	.align	2, 0
	.globl	strtoul
	.type	 strtoul,function
	.thumb_func
strtoul:
	push	{r4, r5, lr}
	add	r4, r0, #0
	add	r5, r1, #0
	add	r3, r2, #0
	ldr	r0, .L41
	ldr	r0, [r0]
	add	r1, r4, #0
	add	r2, r5, #0
	bl	_strtoul_r
	pop	{r4, r5, pc}
.L42:
	.align	2, 0
.L41:
	.word	_impure_ptr
.Lfe2:
	.size	 strtoul,.Lfe2-strtoul
.text
	.align	2, 0
