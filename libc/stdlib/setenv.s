@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:

	.lcomm	alloced.3,4
.text
	.align	2, 0
	.globl	setenv
	.type	 setenv,function
	.thumb_func
setenv:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	add	sp, sp, #-4
	mov	r8, r0
	add	r6, r1, #0
	add	r5, r2, #0
	ldrb	r0, [r6]
	cmp	r0, #61
	bne	.L3	@cond_branch
	add	r6, r6, #1
.L3:
	add	r0, r6, #0
	bl	strlen
	mov	r9, r0
	mov	r0, r8
	mov	r1, sp
	bl	_findenv
	add	r4, r0, #0
	cmp	r4, #0
	beq	.L4	@cond_branch
	cmp	r5, #0
	bne	.LCB31
	b	.L35	@long jump
.LCB31:
	add	r0, r4, #0
	bl	strlen
	cmp	r0, r9
	bcc	.L11	@cond_branch
.L7:
	ldrb	r0, [r6]
	strb	r0, [r4]
	lsl	r0, r0, #24
	add	r6, r6, #1
	add	r4, r4, #1
	cmp	r0, #0
	bne	.L7	@cond_branch
	b	.L35
.L4:
	ldr	r0, .L45
	ldr	r5, [r0]
	mov	r7, #0
	ldr	r1, [r5]
	add	r4, r0, #0
	ldr	r2, .L45+4
	cmp	r1, #0
	beq	.L13	@cond_branch
.L14:
	add	r5, r5, #4
	add	r7, r7, #1
	ldr	r0, [r5]
	cmp	r0, #0
	bne	.L14	@cond_branch
.L13:
	ldr	r0, [r2]
	cmp	r0, #0
	beq	.L17	@cond_branch
	ldr	r0, [r4]
	add	r1, r7, #2
	lsl	r1, r1, #2
	bl	realloc
	str	r0, [r4]
	cmp	r0, #0
	bne	.L19	@cond_branch
.L42:
	mov	r0, #1
	neg	r0, r0
	b	.L39
.L46:
	.align	2, 0
.L45:
	.word	environ
	.word	alloced.3
.L17:
	mov	r0, #1
	str	r0, [r2]
	add	r0, r7, #2
	lsl	r0, r0, #2
	bl	malloc
	add	r5, r0, #0
	cmp	r5, #0
	beq	.L42	@cond_branch
	ldr	r4, .L47
	ldr	r0, [r4]
	lsl	r2, r7, #2
	add	r1, r5, #0
	bl	bcopy
	str	r5, [r4]
.L19:
	ldr	r0, .L47
	ldr	r1, [r0]
	lsl	r0, r7, #2
	add	r0, r0, r1
	mov	r1, #0
	str	r1, [r0, #4]
	str	r7, [sp]
.L11:
	mov	r4, r8
	b	.L41
.L48:
	.align	2, 0
.L47:
	.word	environ
.L23:
	add	r4, r4, #1
.L41:
	ldrb	r0, [r4]
	cmp	r0, #0
	beq	.L22	@cond_branch
	cmp	r0, #61
	bne	.L23	@cond_branch
.L22:
	mov	r1, r8
	sub	r0, r4, r1
	add	r0, r0, r9
	add	r0, r0, #2
	bl	malloc
	add	r2, r0, #0
	ldr	r0, [sp]
	ldr	r1, .L49
	ldr	r1, [r1]
	lsl	r0, r0, #2
	add	r0, r0, r1
	str	r2, [r0]
	cmp	r2, #0
	beq	.L42	@cond_branch
	add	r4, r2, #0
	mov	r2, r8
	ldrb	r0, [r2]
	strb	r0, [r4]
	lsl	r0, r0, #24
	lsr	r0, r0, #24
	mov	r1, #1
	add	r8, r8, r1
	add	r1, r6, #1
	b	.L43
.L50:
	.align	2, 0
.L49:
	.word	environ
.L30:
	add	r4, r4, #1
	mov	r2, r8
	ldrb	r0, [r2]
	strb	r0, [r4]
	lsl	r0, r0, #24
	lsr	r0, r0, #24
	mov	r2, #1
	add	r8, r8, r2
.L43:
	cmp	r0, #0
	beq	.L29	@cond_branch
	cmp	r0, #61
	bne	.L30	@cond_branch
.L29:
	mov	r0, #61
	strb	r0, [r4]
	add	r4, r4, #1
	ldrb	r0, [r6]
	strb	r0, [r4]
	lsl	r0, r0, #24
	add	r6, r1, #0
	b	.L44
.L34:
	ldrb	r0, [r6]
	strb	r0, [r4]
	lsl	r0, r0, #24
	add	r6, r6, #1
.L44:
	add	r4, r4, #1
	cmp	r0, #0
	bne	.L34	@cond_branch
.L35:
	mov	r0, #0
.L39:
	add	sp, sp, #4
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7, pc}
.Lfe1:
	.size	 setenv,.Lfe1-setenv
	.align	2, 0
	.globl	unsetenv
	.type	 unsetenv,function
	.thumb_func
unsetenv:
	push	{r4, r5, lr}
	add	sp, sp, #-4
	add	r4, r0, #0
	ldr	r5, .L62
	b	.L52
.L63:
	.align	2, 0
.L62:
	.word	environ
.L54:
	ldr	r0, [sp]
	lsl	r0, r0, #2
	ldr	r1, [r5]
	add	r1, r1, r0
	b	.L61
.L57:
	add	r1, r1, #4
.L61:
	ldr	r0, [r1, #4]
	str	r0, [r1]
	cmp	r0, #0
	bne	.L57	@cond_branch
.L52:
	add	r0, r4, #0
	mov	r1, sp
	bl	_findenv
	cmp	r0, #0
	bne	.L54	@cond_branch
	add	sp, sp, #4
	pop	{r4, r5, pc}
.Lfe2:
	.size	 unsetenv,.Lfe2-unsetenv
.text
	.align	2, 0
