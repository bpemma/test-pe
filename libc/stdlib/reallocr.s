@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
.text
	.align	2, 0
	.globl	_realloc_r
	.type	 _realloc_r,function
	.thumb_func
_realloc_r:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-8
	str	r0, [sp]
	add	r5, r1, #0
	str	r2, [sp, #4]
	cmp	r5, #0
	bne	.L3	@cond_branch
	add	r1, r2, #0
	bl	_malloc_r
	b	.L67
.L3:
	ldr	r0, [sp]
	bl	__malloc_lock
	add	r4, r5, #0
	sub	r4, r4, #8
	add	r7, r4, #0
	ldr	r0, [r4, #4]
	mov	r9, r0
	mov	r0, #4
	neg	r0, r0
	mov	r1, r9
	and	r1, r1, r0
	mov	r9, r1
	mov	r8, r9
	ldr	r0, [sp, #4]
	add	r0, r0, #11
	cmp	r0, #22
	ble	.L4	@cond_branch
	mov	r3, #8
	neg	r3, r3
	mov	sl, r3
	mov	r1, sl
	and	r1, r1, r0
	mov	sl, r1
	b	.L5
.L4:
	mov	r3, #16
	mov	sl, r3
.L5:
	cmp	r8, sl
	blt	.LCB49
	b	.L13	@long jump
.LCB49:
	mov	r0, r8
	add	r6, r7, r0
	ldr	r0, .L71
	ldr	r2, [r0, #8]
	mov	ip, r0
	cmp	r6, r2
	beq	.L8	@cond_branch
	ldr	r0, [r6, #4]
	mov	r1, #2
	neg	r1, r1
	and	r0, r0, r1
	add	r0, r6, r0
	ldr	r0, [r0, #4]
	mov	r1, #1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L7	@cond_branch
.L8:
	ldr	r3, [r6, #4]
	mov	r0, #4
	neg	r0, r0
	and	r3, r3, r0
	cmp	r6, r2
	bne	.L9	@cond_branch
	mov	r4, r9
	add	r1, r3, r4
	mov	r0, sl
	add	r0, r0, #16
	cmp	r1, r0
	blt	.L14	@cond_branch
	mov	r5, sl
	add	r2, r7, r5
	mov	r0, ip
	str	r2, [r0, #8]
	sub	r0, r1, r5
	mov	r1, #1
	orr	r0, r0, r1
	str	r0, [r2, #4]
	ldr	r0, [r7, #4]
	and	r0, r0, r1
	orr	r0, r0, r5
	str	r0, [r7, #4]
	ldr	r0, [sp]
	bl	__malloc_unlock
	add	r0, r7, #0
	b	.L68
.L72:
	.align	2, 0
.L71:
	.word	__malloc_av_
.L9:
	mov	r1, r9
	add	r2, r3, r1
	cmp	r2, sl
	blt	.L14	@cond_branch
	ldr	r1, [r6, #12]
	ldr	r0, [r6, #8]
	str	r1, [r0, #12]
	str	r0, [r1, #8]
	mov	r9, r2
	b	.L13
.L7:
	mov	r6, #0
	mov	r3, #0
.L14:
	ldr	r0, [r7, #4]
	mov	r1, #1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.LCB131
	b	.L15	@long jump
.LCB131:
	ldr	r0, [r7]
	sub	r2, r7, r0
	ldr	r1, [r2, #4]
	mov	r0, #4
	neg	r0, r0
	and	r1, r1, r0
	cmp	r6, #0
	beq	.L16	@cond_branch
	mov	r4, ip
	ldr	r0, [r4, #8]
	cmp	r6, r0
	bne	.L17	@cond_branch
	add	r0, r3, r1
	mov	r4, r9
	add	r3, r0, r4
	mov	r0, sl
	add	r0, r0, #16
	cmp	r3, r0
	blt	.L16	@cond_branch
	ldr	r1, [r2, #12]
	ldr	r0, [r2, #8]
	str	r1, [r0, #12]
	str	r0, [r1, #8]
	add	r4, r2, #0
	mov	r9, r3
	add	r6, r4, #0
	add	r6, r6, #8
	mov	r2, r8
	sub	r2, r2, #4
	cmp	r2, #36
	bhi	.L22	@cond_branch
	add	r1, r5, #0
	add	r3, r6, #0
	cmp	r2, #19
	bls	.L23	@cond_branch
	ldmia	r1!, {r0}
	str	r0, [r4, #8]
	ldr	r0, [r5, #4]
	str	r0, [r4, #12]
	add	r1, r1, #4
	add	r3, r4, #0
	add	r3, r3, #16
	cmp	r2, #27
	bls	.L23	@cond_branch
	ldmia	r1!, {r0}
	str	r0, [r4, #16]
	ldmia	r1!, {r0}
	str	r0, [r4, #20]
	add	r3, r3, #8
	cmp	r2, #35
	bls	.L23	@cond_branch
	ldmia	r1!, {r0}
	str	r0, [r4, #24]
	ldmia	r1!, {r0}
	str	r0, [r4, #28]
	add	r3, r3, #8
.L23:
	ldmia	r1!, {r0}
	stmia	r3!, {r0}
	ldmia	r1!, {r0}
	stmia	r3!, {r0}
	ldr	r0, [r1]
	str	r0, [r3]
	b	.L20
.L22:
	add	r0, r6, #0
	add	r1, r5, #0
	bl	memcpy
.L20:
	ldr	r0, .L73
	mov	r5, sl
	add	r2, r4, r5
	str	r2, [r0, #8]
	mov	r1, r9
	sub	r0, r1, r5
	mov	r1, #1
	orr	r0, r0, r1
	str	r0, [r2, #4]
	ldr	r0, [r4, #4]
	and	r0, r0, r1
	orr	r0, r0, r5
	str	r0, [r4, #4]
	b	.L69
.L74:
	.align	2, 0
.L73:
	.word	__malloc_av_
.L17:
	add	r0, r3, r1
	mov	r4, r9
	add	r3, r0, r4
	cmp	r3, sl
	blt	.L16	@cond_branch
	ldr	r1, [r6, #12]
	ldr	r0, [r6, #8]
	str	r1, [r0, #12]
	str	r0, [r1, #8]
	b	.L70
.L16:
	cmp	r2, #0
	beq	.L15	@cond_branch
	mov	r0, r9
	add	r3, r1, r0
	cmp	r3, sl
	blt	.L15	@cond_branch
.L70:
	ldr	r1, [r2, #12]
	ldr	r0, [r2, #8]
	str	r1, [r0, #12]
	str	r0, [r1, #8]
	add	r4, r2, #0
	mov	r9, r3
	add	r6, r4, #0
	add	r6, r6, #8
	mov	r2, r8
	sub	r2, r2, #4
	cmp	r2, #36
	bhi	.L45	@cond_branch
	add	r1, r5, #0
	add	r3, r6, #0
	cmp	r2, #19
	bls	.L46	@cond_branch
	ldmia	r1!, {r0}
	str	r0, [r4, #8]
	ldr	r0, [r5, #4]
	str	r0, [r4, #12]
	add	r1, r1, #4
	add	r3, r4, #0
	add	r3, r3, #16
	cmp	r2, #27
	bls	.L46	@cond_branch
	ldmia	r1!, {r0}
	str	r0, [r4, #16]
	ldmia	r1!, {r0}
	str	r0, [r4, #20]
	add	r3, r3, #8
	cmp	r2, #35
	bls	.L46	@cond_branch
	ldmia	r1!, {r0}
	str	r0, [r4, #24]
	ldmia	r1!, {r0}
	str	r0, [r4, #28]
	add	r3, r3, #8
.L46:
	ldmia	r1!, {r0}
	stmia	r3!, {r0}
	ldmia	r1!, {r0}
	stmia	r3!, {r0}
	ldr	r0, [r1]
	str	r0, [r3]
	b	.L13
.L45:
	add	r0, r6, #0
	add	r1, r5, #0
	bl	memcpy
	b	.L13
.L15:
	ldr	r0, [sp]
	ldr	r1, [sp, #4]
	bl	_malloc_r
	add	r6, r0, #0
	cmp	r6, #0
	bne	.L52	@cond_branch
	ldr	r0, [sp]
	bl	__malloc_unlock
	mov	r0, #0
	b	.L66
.L52:
	add	r4, r6, #0
	sub	r4, r4, #8
	ldr	r0, [r7, #4]
	mov	r1, #2
	neg	r1, r1
	and	r0, r0, r1
	add	r0, r7, r0
	cmp	r4, r0
	bne	.L53	@cond_branch
	ldr	r0, [r4, #4]
	sub	r1, r1, #2
	and	r0, r0, r1
	add	r9, r9, r0
	add	r4, r7, #0
	b	.L13
.L53:
	mov	r2, r8
	sub	r2, r2, #4
	cmp	r2, #36
	bhi	.L57	@cond_branch
	add	r1, r5, #0
	add	r3, r6, #0
	cmp	r2, #19
	bls	.L58	@cond_branch
	ldmia	r1!, {r0}
	stmia	r3!, {r0}
	ldr	r0, [r5, #4]
	str	r0, [r6, #4]
	add	r1, r1, #4
	add	r3, r3, #4
	cmp	r2, #27
	bls	.L58	@cond_branch
	ldmia	r1!, {r0}
	stmia	r3!, {r0}
	ldmia	r1!, {r0}
	stmia	r3!, {r0}
	cmp	r2, #35
	bls	.L58	@cond_branch
	ldmia	r1!, {r0}
	stmia	r3!, {r0}
	ldmia	r1!, {r0}
	stmia	r3!, {r0}
.L58:
	ldmia	r1!, {r0}
	stmia	r3!, {r0}
	ldmia	r1!, {r0}
	stmia	r3!, {r0}
	ldr	r0, [r1]
	str	r0, [r3]
	b	.L55
.L57:
	add	r0, r6, #0
	add	r1, r5, #0
	bl	memcpy
.L55:
	ldr	r0, [sp]
	add	r1, r5, #0
	bl	_free_r
.L69:
	ldr	r0, [sp]
	bl	__malloc_unlock
	add	r0, r6, #0
	b	.L66
.L13:
	mov	r1, r9
	mov	r3, sl
	sub	r2, r1, r3
	cmp	r2, #15
	bls	.L64	@cond_branch
	add	r1, r4, r3
	ldr	r0, [r4, #4]
	mov	r3, #1
	and	r0, r0, r3
	mov	r5, sl
	orr	r0, r0, r5
	str	r0, [r4, #4]
	add	r0, r2, #0
	orr	r0, r0, r3
	str	r0, [r1, #4]
	add	r2, r1, r2
	ldr	r0, [r2, #4]
	orr	r0, r0, r3
	str	r0, [r2, #4]
	add	r1, r1, #8
	ldr	r0, [sp]
	bl	_free_r
	b	.L65
.L64:
	ldr	r0, [r4, #4]
	mov	r2, #1
	and	r0, r0, r2
	mov	r1, r9
	orr	r0, r0, r1
	str	r0, [r4, #4]
	add	r1, r4, r1
	ldr	r0, [r1, #4]
	orr	r0, r0, r2
	str	r0, [r1, #4]
.L65:
	ldr	r0, [sp]
	bl	__malloc_unlock
	add	r0, r4, #0
.L68:
	add	r0, r0, #8
.L67:
.L66:
	add	sp, sp, #8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7, pc}
.Lfe1:
	.size	 _realloc_r,.Lfe1-_realloc_r
.text
	.align	2, 0
