@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
	.globl	opterr
.data
	.align	2, 0
	.type	 opterr,object
	.size	 opterr,4
opterr:
	.word	1
	.globl	optind
	.align	2, 0
	.type	 optind,object
	.size	 optind,4
optind:
	.word	1
	.section .rodata
	.align	2, 0
.LC0:
	.ascii	"\000"
.data
	.align	2, 0
	.type	 place.3,object
	.size	 place.3,4
place.3:
	.word	.LC0
	.section .rodata
	.align	2, 0
.LC8:
	.ascii	"%s: illegal option -- %c\n\000"
	.align	2, 0
.LC11:
	.ascii	"%s: option requires an argument -- %c\n\000"
.text
	.align	2, 0
	.globl	getopt
	.type	 getopt,function
	.thumb_func
getopt:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	mov	r9, r0
	add	r7, r1, #0
	add	r6, r2, #0
	ldr	r1, .L26
	ldr	r0, [r1]
	ldr	r5, .L26+4
	cmp	r0, #0
	bne	.L4	@cond_branch
	ldr	r0, [r5]
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L3	@cond_branch
.L4:
	mov	r0, #0
	str	r0, [r1]
	ldr	r3, .L26+8
	ldr	r2, [r3]
	cmp	r2, r9
	bge	.L23	@cond_branch
	lsl	r0, r2, #2
	add	r0, r0, r7
	ldr	r1, [r0]
	str	r1, [r5]
	ldrb	r0, [r1]
	cmp	r0, #45
	bne	.L23	@cond_branch
	ldrb	r0, [r1, #1]
	cmp	r0, #0
	beq	.L3	@cond_branch
	add	r0, r1, #1
	str	r0, [r5]
	ldrb	r1, [r1, #1]
	cmp	r1, #45
	bne	.L3	@cond_branch
	add	r0, r2, #1
	str	r0, [r3]
.L23:
	ldr	r0, .L26+12
	str	r0, [r5]
	mov	r0, #1
	neg	r0, r0
	b	.L22
.L27:
	.align	2, 0
.L26:
	.word	optreset
	.word	place.3
	.word	optind
	.word	.LC0
.L3:
	ldr	r2, .L28
	mov	r8, r2
	add	r4, r5, #0
	ldr	r0, [r4]
	ldrb	r1, [r0]
	str	r1, [r2]
	add	r0, r0, #1
	str	r0, [r4]
	cmp	r1, #58
	beq	.L9	@cond_branch
	add	r0, r6, #0
	bl	strchr
	cmp	r0, #0
	bne	.L8	@cond_branch
.L9:
	mov	r0, r8
	ldr	r3, [r0]
	cmp	r3, #45
	bne	.L10	@cond_branch
	mov	r0, #1
	neg	r0, r0
	b	.L22
.L29:
	.align	2, 0
.L28:
	.word	optopt
.L10:
	ldr	r0, [r4]
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L11	@cond_branch
	ldr	r1, .L30
	ldr	r0, [r1]
	add	r0, r0, #1
	str	r0, [r1]
.L11:
	ldr	r0, .L30+4
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L20	@cond_branch
	ldrb	r6, [r6]
	cmp	r6, #58
	beq	.L20	@cond_branch
	ldr	r0, .L30+8
	ldr	r0, [r0]
	ldr	r0, [r0, #12]
	ldr	r1, .L30+12
	ldr	r2, [r7]
	b	.L25
.L31:
	.align	2, 0
.L30:
	.word	optind
	.word	opterr
	.word	_impure_ptr
	.word	.LC8
.L8:
	ldrb	r0, [r0, #1]
	cmp	r0, #58
	beq	.L13	@cond_branch
	ldr	r1, .L32
	mov	r0, #0
	str	r0, [r1]
	ldr	r0, [r4]
	ldrb	r0, [r0]
	cmp	r0, #0
	bne	.L15	@cond_branch
	ldr	r1, .L32+4
	ldr	r0, [r1]
	add	r0, r0, #1
	str	r0, [r1]
	b	.L15
.L33:
	.align	2, 0
.L32:
	.word	optarg
	.word	optind
.L13:
	ldr	r1, [r4]
	ldrb	r0, [r1]
	cmp	r0, #0
	beq	.L16	@cond_branch
	ldr	r0, .L34
	str	r1, [r0]
	ldr	r2, .L34+4
	b	.L17
.L35:
	.align	2, 0
.L34:
	.word	optarg
	.word	optind
.L16:
	ldr	r0, .L36
	ldr	r1, [r0]
	add	r1, r1, #1
	str	r1, [r0]
	add	r2, r0, #0
	cmp	r9, r1
	bgt	.L18	@cond_branch
	ldr	r0, .L36+4
	str	r0, [r5]
	ldrb	r6, [r6]
	cmp	r6, #58
	bne	.L19	@cond_branch
	mov	r0, #58
	b	.L22
.L37:
	.align	2, 0
.L36:
	.word	optind
	.word	.LC0
.L19:
	ldr	r0, .L38
	ldr	r0, [r0]
	cmp	r0, #0
	beq	.L20	@cond_branch
	ldr	r0, .L38+4
	ldr	r0, [r0]
	ldr	r0, [r0, #12]
	ldr	r1, .L38+8
	ldr	r2, [r7]
	mov	r4, r8
	ldr	r3, [r4]
.L25:
	bl	fprintf
.L20:
	mov	r0, #63
	b	.L22
.L39:
	.align	2, 0
.L38:
	.word	opterr
	.word	_impure_ptr
	.word	.LC11
.L18:
	ldr	r0, .L40
	lsl	r1, r1, #2
	add	r1, r1, r7
	ldr	r1, [r1]
	str	r1, [r0]
.L17:
	ldr	r1, .L40+4
	ldr	r0, .L40+8
	str	r0, [r1]
	ldr	r0, [r2]
	add	r0, r0, #1
	str	r0, [r2]
.L15:
	ldr	r0, .L40+12
	ldr	r0, [r0]
.L22:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7, pc}
.L41:
	.align	2, 0
.L40:
	.word	optarg
	.word	place.3
	.word	.LC0
	.word	optopt
.Lfe1:
	.size	 getopt,.Lfe1-getopt
	.comm	optopt, 4	@ 4
	.comm	optreset, 4	@ 4
	.comm	optarg, 4	@ 4
.text
	.align	2, 0
