@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
.text
	.align	2, 0
	.globl	_free_r
	.type	 _free_r,function
	.thumb_func
_free_r:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	mov	r9, r0
	add	r4, r1, #0
	cmp	r4, #0
	bne	.LCB9
	b	.L2	@long jump
.LCB9:
	bl	__malloc_lock
	add	r5, r4, #0
	sub	r5, r5, #8
	ldr	r1, [r5, #4]
	mov	r6, #2
	neg	r6, r6
	and	r6, r6, r1
	add	r7, r5, r6
	ldr	r4, [r7, #4]
	mov	r0, #4
	neg	r0, r0
	and	r4, r4, r0
	ldr	r0, .L39
	mov	ip, r0
	ldr	r0, [r0, #8]
	cmp	r7, r0
	bne	.L4	@cond_branch
	add	r6, r6, r4
	mov	r4, #1
	and	r1, r1, r4
	cmp	r1, #0
	bne	.L5	@cond_branch
	ldr	r0, [r5]
	sub	r5, r5, r0
	add	r6, r6, r0
	ldr	r3, [r5, #12]
	ldr	r2, [r5, #8]
	str	r3, [r2, #12]
	str	r2, [r3, #8]
.L5:
	add	r0, r6, #0
	orr	r0, r0, r4
	str	r0, [r5, #4]
	mov	r2, ip
	str	r5, [r2, #8]
	ldr	r0, .L39+4
	ldr	r0, [r0]
	cmp	r6, r0
	bcc	.L6	@cond_branch
	ldr	r0, .L39+8
	ldr	r1, [r0]
	mov	r0, r9
	bl	_malloc_trim_r
.L6:
	mov	r0, r9
	bl	__malloc_unlock
	b	.L2
.L40:
	.align	2, 0
.L39:
	.word	__malloc_av_
	.word	__malloc_trim_threshold
	.word	__malloc_top_pad
.L4:
	str	r4, [r7, #4]
	mov	r0, #0
	mov	r8, r0
	mov	r0, #1
	and	r1, r1, r0
	cmp	r1, #0
	bne	.L7	@cond_branch
	ldr	r0, [r5]
	sub	r5, r5, r0
	add	r6, r6, r0
	ldr	r1, [r5, #8]
	mov	r0, ip
	add	r0, r0, #8
	cmp	r1, r0
	bne	.L8	@cond_branch
	mov	r2, #1
	mov	r8, r2
	b	.L7
.L8:
	ldr	r3, [r5, #12]
	add	r2, r1, #0
	str	r3, [r2, #12]
	str	r2, [r3, #8]
.L7:
	add	r0, r7, r4
	ldr	r0, [r0, #4]
	mov	r1, #1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L10	@cond_branch
	add	r6, r6, r4
	ldr	r1, [r7, #8]
	mov	r0, r8
	cmp	r0, #0
	bne	.L11	@cond_branch
	ldr	r0, .L41
	cmp	r1, r0
	bne	.L11	@cond_branch
	mov	r2, #1
	mov	r8, r2
	str	r5, [r1, #12]
	str	r5, [r1, #8]
	str	r1, [r5, #12]
	str	r1, [r5, #8]
	b	.L10
.L42:
	.align	2, 0
.L41:
	.word	__malloc_av_+8
.L11:
	ldr	r3, [r7, #12]
	add	r2, r1, #0
	str	r3, [r2, #12]
	str	r2, [r3, #8]
.L10:
	mov	r1, #1
	add	r0, r6, #0
	orr	r0, r0, r1
	str	r0, [r5, #4]
	add	r0, r5, r6
	str	r6, [r0]
	mov	r0, r8
	cmp	r0, #0
	bne	.L13	@cond_branch
	ldr	r0, .L43
	cmp	r6, r0
	bhi	.L14	@cond_branch
	lsr	r4, r6, #3
	ldr	r2, .L43+4
	add	r0, r4, #0
	asr	r0, r0, #2
	lsl	r1, r1, r0
	ldr	r0, [r2, #4]
	orr	r0, r0, r1
	str	r0, [r2, #4]
	lsl	r0, r4, #3
	add	r3, r0, r2
	ldr	r2, [r3, #8]
	b	.L31
.L44:
	.align	2, 0
.L43:
	.word	511
	.word	__malloc_av_
.L14:
	lsr	r1, r6, #9
	cmp	r1, #0
	bne	.L17	@cond_branch
	lsr	r4, r6, #3
	b	.L18
.L17:
	cmp	r1, #4
	bhi	.L19	@cond_branch
	lsr	r0, r6, #6
	add	r4, r0, #0
	add	r4, r4, #56
	b	.L18
.L19:
	cmp	r1, #20
	bhi	.L21	@cond_branch
	add	r4, r1, #0
	add	r4, r4, #91
	b	.L18
.L21:
	cmp	r1, #84
	bhi	.L23	@cond_branch
	lsr	r0, r6, #12
	add	r4, r0, #0
	add	r4, r4, #110
	b	.L18
.L23:
	mov	r0, #170
	lsl	r0, r0, #1
	cmp	r1, r0
	bhi	.L25	@cond_branch
	lsr	r0, r6, #15
	add	r4, r0, #0
	add	r4, r4, #119
	b	.L18
.L25:
	ldr	r0, .L45
	cmp	r1, r0
	bhi	.L27	@cond_branch
	lsr	r0, r6, #18
	add	r4, r0, #0
	add	r4, r4, #124
	b	.L18
.L46:
	.align	2, 0
.L45:
	.word	1364
.L27:
	mov	r4, #126
.L18:
	lsl	r0, r4, #3
	ldr	r7, .L47
	add	r3, r0, r7
	ldr	r2, [r3, #8]
	cmp	r2, r3
	bne	.L37	@cond_branch
	add	r0, r4, #0
	asr	r0, r0, #2
	mov	r1, #1
	lsl	r1, r1, r0
	ldr	r0, [r7, #4]
	orr	r0, r0, r1
	str	r0, [r7, #4]
	b	.L31
.L48:
	.align	2, 0
.L47:
	.word	__malloc_av_
.L37:
	ldr	r0, [r2, #4]
	mov	r1, #4
	neg	r1, r1
	b	.L38
.L34:
	ldr	r2, [r2, #8]
	cmp	r2, r3
	beq	.L33	@cond_branch
	ldr	r0, [r2, #4]
.L38:
	and	r0, r0, r1
	cmp	r6, r0
	bcc	.L34	@cond_branch
.L33:
	ldr	r3, [r2, #12]
.L31:
	str	r3, [r5, #12]
	str	r2, [r5, #8]
	str	r5, [r3, #8]
	str	r5, [r2, #12]
.L13:
	mov	r0, r9
	bl	__malloc_unlock
.L2:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7, pc}
.Lfe1:
	.size	 _free_r,.Lfe1-_free_r
	.align	2, 0
	.globl	_malloc_trim_r
	.type	 _malloc_trim_r,function
	.thumb_func
_malloc_trim_r:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r7, r0, #0
	add	r4, r1, #0
	bl	__malloc_lock
	ldr	r0, .L58
	mov	r8, r0
	ldr	r0, [r0, #8]
	ldr	r6, [r0, #4]
	mov	r0, #4
	neg	r0, r0
	and	r6, r6, r0
	sub	r4, r6, r4
	mov	r5, #128
	lsl	r5, r5, #5
	ldr	r1, .L58+4
	add	r4, r4, r1
	add	r0, r4, #0
	add	r1, r5, #0
	bl	__udivsi3
	sub	r0, r0, #1
	lsl	r4, r0, #12
	cmp	r4, r5
	blt	.L55	@cond_branch
	add	r0, r7, #0
	mov	r1, #0
	bl	_sbrk_r
	add	r2, r0, #0
	mov	r1, r8
	ldr	r0, [r1, #8]
	add	r0, r0, r6
	cmp	r2, r0
	bne	.L55	@cond_branch
	neg	r1, r4
	add	r0, r7, #0
	bl	_sbrk_r
	mov	r1, #1
	neg	r1, r1
	cmp	r0, r1
	bne	.L54	@cond_branch
	add	r0, r7, #0
	mov	r1, #0
	bl	_sbrk_r
	add	r2, r0, #0
	mov	r0, r8
	ldr	r3, [r0, #8]
	sub	r6, r2, r3
	cmp	r6, #15
	ble	.L55	@cond_branch
	ldr	r1, .L58+8
	ldr	r0, .L58+12
	ldr	r0, [r0]
	sub	r0, r2, r0
	str	r0, [r1]
	mov	r0, #1
	orr	r6, r6, r0
	str	r6, [r3, #4]
.L55:
	add	r0, r7, #0
	bl	__malloc_unlock
	mov	r0, #0
	b	.L57
.L59:
	.align	2, 0
.L58:
	.word	__malloc_av_
	.word	4079
	.word	__malloc_current_mallinfo
	.word	__malloc_sbrk_base
.L54:
	mov	r1, r8
	ldr	r2, [r1, #8]
	sub	r0, r6, r4
	mov	r1, #1
	orr	r0, r0, r1
	str	r0, [r2, #4]
	ldr	r1, .L60
	ldr	r0, [r1]
	sub	r0, r0, r4
	str	r0, [r1]
	add	r0, r7, #0
	bl	__malloc_unlock
	mov	r0, #1
.L57:
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7, pc}
.L61:
	.align	2, 0
.L60:
	.word	__malloc_current_mallinfo
.Lfe2:
	.size	 _malloc_trim_r,.Lfe2-_malloc_trim_r
.text
	.align	2, 0
