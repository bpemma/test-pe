@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
.text
	.align	2, 0
	.globl	fcvt
	.type	 fcvt,function
	.thumb_func
fcvt:
	push	{r4, lr}
	add	sp, sp, #-8
	ldr	r4, [sp, #16]
	str	r4, [sp]
	mov	r4, #0
	str	r4, [sp, #4]
	bl	fcvtbuf
	add	sp, sp, #8
	pop	{r4, pc}
.Lfe1:
	.size	 fcvt,.Lfe1-fcvt
	.align	2, 0
	.globl	fcvtf
	.type	 fcvtf,function
	.thumb_func
fcvtf:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-4
	add	r5, r1, #0
	add	r6, r2, #0
	add	r4, r3, #0
	bl	__extendsfdf2
	str	r4, [sp]
	add	r2, r5, #0
	add	r3, r6, #0
	bl	fcvt
	add	sp, sp, #4
	pop	{r4, r5, r6, pc}
.Lfe2:
	.size	 fcvtf,.Lfe2-fcvtf
	.align	2, 0
	.globl	gcvtf
	.type	 gcvtf,function
	.thumb_func
gcvtf:
	push	{r4, r5, lr}
	add	r4, r1, #0
	add	r5, r2, #0
	bl	__extendsfdf2
	add	r2, r4, #0
	add	r3, r5, #0
	bl	gcvt
	pop	{r4, r5, pc}
.Lfe3:
	.size	 gcvtf,.Lfe3-gcvtf
	.align	2, 0
	.globl	ecvt
	.type	 ecvt,function
	.thumb_func
ecvt:
	push	{r4, lr}
	add	sp, sp, #-8
	ldr	r4, [sp, #16]
	str	r4, [sp]
	mov	r4, #0
	str	r4, [sp, #4]
	bl	ecvtbuf
	add	sp, sp, #8
	pop	{r4, pc}
.Lfe4:
	.size	 ecvt,.Lfe4-ecvt
	.align	2, 0
	.globl	ecvtf
	.type	 ecvtf,function
	.thumb_func
ecvtf:
	push	{r4, r5, r6, lr}
	add	sp, sp, #-4
	add	r5, r1, #0
	add	r6, r2, #0
	add	r4, r3, #0
	bl	__extendsfdf2
	str	r4, [sp]
	add	r2, r5, #0
	add	r3, r6, #0
	bl	ecvt
	add	sp, sp, #4
	pop	{r4, r5, r6, pc}
.Lfe5:
	.size	 ecvtf,.Lfe5-ecvtf
	.align	2, 0
	.globl	gcvt
	.type	 gcvt,function
	.thumb_func
gcvt:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-12
	add	r7, r1, #0
	add	r6, r0, #0
	add	r5, r2, #0
	add	r4, r3, #0
	mov	r8, r4
	ldr	r3, .L11+4		@ created by thumb_load_double_from_address
	ldr	r2, .L11		@ created by thumb_load_double_from_address
	bl	__ltdf2
	cmp	r0, #0
	bge	.L8	@cond_branch
	mov	r0, #45
	strb	r0, [r4]
	add	r0, r4, #1
	mov	r8, r0
	sub	r5, r5, #1
.L8:
	ldr	r0, .L11+8
	ldr	r0, [r0]
	mov	r1, r8
	str	r1, [sp]
	mov	r1, #103
	str	r1, [sp, #4]
	mov	r1, #0
	str	r1, [sp, #8]
	add	r2, r7, #0
	add	r1, r6, #0
	add	r3, r5, #0
	bl	_gcvt
	mov	r1, #0
	cmp	r0, #0
	beq	.L9	@cond_branch
	add	r1, r4, #0
.L9:
	add	r0, r1, #0
	add	sp, sp, #12
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7, pc}
.L12:
	.align	2, 0
.L11:
	.long 0x0, 0x0	@ double 0.00000000000000000000e0
	.word	_impure_ptr
.Lfe6:
	.size	 gcvt,.Lfe6-gcvt
.text
	.align	2, 0
