@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
.text
	.align	2, 0
	.globl	_Balloc
	.type	 _Balloc,function
	.thumb_func
_Balloc:
	push	{r4, r5, r6, lr}
	add	r4, r0, #0
	add	r6, r1, #0
	ldr	r0, [r4, #76]
	cmp	r0, #0
	bne	.L3	@cond_branch
	add	r0, r4, #0
	mov	r1, #4
	mov	r2, #16
	bl	_calloc_r
	str	r0, [r4, #76]
	cmp	r0, #0
	beq	.L9	@cond_branch
.L3:
	ldr	r1, [r4, #76]
	lsl	r0, r6, #2
	add	r2, r0, r1
	ldr	r1, [r2]
	cmp	r1, #0
	beq	.L5	@cond_branch
	ldr	r0, [r1]
	str	r0, [r2]
	b	.L6
.L5:
	mov	r5, #1
	lsl	r5, r5, r6
	lsl	r2, r5, #2
	add	r2, r2, #20
	add	r0, r4, #0
	mov	r1, #1
	bl	_calloc_r
	add	r1, r0, #0
	cmp	r1, #0
	bne	.L7	@cond_branch
.L9:
	mov	r0, #0
	b	.L8
.L7:
	str	r6, [r1, #4]
	str	r5, [r1, #8]
.L6:
	mov	r0, #0
	str	r0, [r1, #16]
	str	r0, [r1, #12]
	add	r0, r1, #0
.L8:
	pop	{r4, r5, r6, pc}
.Lfe1:
	.size	 _Balloc,.Lfe1-_Balloc
	.align	2, 0
	.globl	_Bfree
	.type	 _Bfree,function
	.thumb_func
_Bfree:
	add	r3, r0, #0
	add	r2, r1, #0
	cmp	r2, #0
	beq	.L11	@cond_branch
	ldr	r0, [r2, #4]
	ldr	r1, [r3, #76]
	lsl	r0, r0, #2
	add	r0, r0, r1
	ldr	r1, [r0]
	str	r1, [r2]
	str	r2, [r0]
.L11:
	bx	lr
.Lfe2:
	.size	 _Bfree,.Lfe2-_Bfree
	.align	2, 0
	.globl	_multadd
	.type	 _multadd,function
	.thumb_func
_multadd:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	mov	r9, r0
	add	r5, r1, #0
	add	r4, r2, #0
	mov	r8, r3
	ldr	r6, [r5, #16]
	add	r3, r5, #0
	add	r3, r3, #20
	mov	r7, #0
	ldr	r0, .L20
	mov	ip, r0
.L13:
	ldr	r1, [r3]
	add	r0, r1, #0
	mov	r2, ip
	and	r0, r0, r2
	mov	r2, r0
	mul	r2, r2, r4
	add	r2, r2, r8
	lsr	r1, r1, #16
	mov	r0, r1
	mul	r0, r0, r4
	lsr	r1, r2, #16
	add	r0, r0, r1
	lsr	r1, r0, #16
	mov	r8, r1
	lsl	r0, r0, #16
	mov	r1, ip
	and	r2, r2, r1
	add	r0, r0, r2
	stmia	r3!, {r0}
	add	r7, r7, #1
	cmp	r7, r6
	blt	.L13	@cond_branch
	mov	r2, r8
	cmp	r2, #0
	beq	.L18	@cond_branch
	ldr	r0, [r5, #8]
	cmp	r6, r0
	blt	.L19	@cond_branch
	ldr	r1, [r5, #4]
	add	r1, r1, #1
	mov	r0, r9
	bl	_Balloc
	add	r4, r0, #0
	add	r0, r0, #12
	add	r1, r5, #0
	add	r1, r1, #12
	ldr	r2, [r5, #16]
	lsl	r2, r2, #2
	add	r2, r2, #8
	bl	memcpy
	mov	r0, r9
	add	r1, r5, #0
	bl	_Bfree
	add	r5, r4, #0
.L19:
	lsl	r1, r6, #2
	add	r0, r5, #0
	add	r0, r0, #20
	add	r0, r0, r1
	mov	r1, r8
	str	r1, [r0]
	add	r6, r6, #1
	str	r6, [r5, #16]
.L18:
	add	r0, r5, #0
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7, pc}
.L21:
	.align	2, 0
.L20:
	.word	65535
.Lfe3:
	.size	 _multadd,.Lfe3-_multadd
	.align	2, 0
	.globl	_s2b
	.type	 _s2b,function
	.thumb_func
_s2b:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	r7, r0, #0
	add	r4, r1, #0
	add	r6, r2, #0
	mov	r8, r3
	mov	r0, r8
	add	r0, r0, #8
	mov	r1, #9
	bl	__divsi3
	mov	r1, #0
	mov	r2, #1
	cmp	r0, #1
	ble	.L24	@cond_branch
.L25:
	lsl	r2, r2, #1
	add	r1, r1, #1
	cmp	r0, r2
	bgt	.L25	@cond_branch
.L24:
	add	r0, r7, #0
	bl	_Balloc
	add	r1, r0, #0
	ldr	r0, [sp, #24]
	str	r0, [r1, #20]
	mov	r0, #1
	str	r0, [r1, #16]
	mov	r5, #9
	cmp	r6, #9
	ble	.L28	@cond_branch
	add	r4, r4, #9
.L29:
	ldrb	r3, [r4]
	sub	r3, r3, #48
	add	r4, r4, #1
	add	r0, r7, #0
	mov	r2, #10
	bl	_multadd
	add	r1, r0, #0
	add	r5, r5, #1
	cmp	r5, r6
	blt	.L29	@cond_branch
	add	r4, r4, #1
	b	.L34
.L28:
	add	r4, r4, #10
.L34:
	cmp	r5, r8
	bge	.L36	@cond_branch
	mov	r0, r8
	sub	r5, r0, r5
.L38:
	ldrb	r3, [r4]
	sub	r3, r3, #48
	add	r4, r4, #1
	add	r0, r7, #0
	mov	r2, #10
	bl	_multadd
	add	r1, r0, #0
	sub	r5, r5, #1
	cmp	r5, #0
	bne	.L38	@cond_branch
.L36:
	add	r0, r1, #0
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7, pc}
.Lfe4:
	.size	 _s2b,.Lfe4-_s2b
	.align	2, 0
	.globl	_hi0bits
	.type	 _hi0bits,function
	.thumb_func
_hi0bits:
	add	r1, r0, #0
	mov	r2, #0
	ldr	r0, .L48
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L41	@cond_branch
	mov	r2, #16
	lsl	r1, r1, #16
.L41:
	mov	r0, #255
	lsl	r0, r0, #24
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L42	@cond_branch
	add	r2, r2, #8
	lsl	r1, r1, #8
.L42:
	mov	r0, #240
	lsl	r0, r0, #24
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L43	@cond_branch
	add	r2, r2, #4
	lsl	r1, r1, #4
.L43:
	mov	r0, #192
	lsl	r0, r0, #24
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L44	@cond_branch
	add	r2, r2, #2
	lsl	r1, r1, #2
.L44:
	cmp	r1, #0
	blt	.L45	@cond_branch
	add	r2, r2, #1
	mov	r0, #128
	lsl	r0, r0, #23
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L45	@cond_branch
	mov	r0, #32
	b	.L47
.L49:
	.align	2, 0
.L48:
	.word	-65536
.L45:
	add	r0, r2, #0
.L47:
	bx	lr
.Lfe5:
	.size	 _hi0bits,.Lfe5-_hi0bits
	.align	2, 0
	.globl	_lo0bits
	.type	 _lo0bits,function
	.thumb_func
_lo0bits:
	add	r3, r0, #0
	ldr	r1, [r3]
	mov	r0, #7
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L51	@cond_branch
	mov	r0, #1
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L52	@cond_branch
	mov	r0, #0
	b	.L60
.L52:
	mov	r0, #2
	and	r0, r0, r1
	cmp	r0, #0
	beq	.L53	@cond_branch
	lsr	r0, r1, #1
	str	r0, [r3]
	mov	r0, #1
	b	.L60
.L53:
	lsr	r0, r1, #2
	str	r0, [r3]
	mov	r0, #2
	b	.L60
.L51:
	mov	r2, #0
	ldr	r0, .L61
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L54	@cond_branch
	mov	r2, #16
	lsr	r1, r1, #16
.L54:
	mov	r0, #255
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L55	@cond_branch
	add	r2, r2, #8
	lsr	r1, r1, #8
.L55:
	mov	r0, #15
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L56	@cond_branch
	add	r2, r2, #4
	lsr	r1, r1, #4
.L56:
	mov	r0, #3
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L57	@cond_branch
	add	r2, r2, #2
	lsr	r1, r1, #2
.L57:
	mov	r0, #1
	and	r0, r0, r1
	cmp	r0, #0
	bne	.L58	@cond_branch
	add	r2, r2, #1
	lsr	r1, r1, #1
	cmp	r1, #0
	bne	.L58	@cond_branch
	mov	r0, #32
	b	.L60
.L62:
	.align	2, 0
.L61:
	.word	65535
.L58:
	str	r1, [r3]
	add	r0, r2, #0
.L60:
	bx	lr
.Lfe6:
	.size	 _lo0bits,.Lfe6-_lo0bits
	.align	2, 0
	.globl	_i2b
	.type	 _i2b,function
	.thumb_func
_i2b:
	push	{r4, lr}
	add	r4, r1, #0
	mov	r1, #1
	bl	_Balloc
	str	r4, [r0, #20]
	mov	r1, #1
	str	r1, [r0, #16]
	pop	{r4, pc}
.Lfe7:
	.size	 _i2b,.Lfe7-_i2b
	.align	2, 0
	.globl	_multiply
	.type	 _multiply,function
	.thumb_func
_multiply:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-36
	add	r3, r0, #0
	add	r4, r1, #0
	add	r5, r2, #0
	ldr	r1, [r4, #16]
	ldr	r0, [r5, #16]
	cmp	r1, r0
	bge	.L65	@cond_branch
	str	r4, [sp]
	add	r4, r5, #0
	ldr	r5, [sp]
.L65:
	ldr	r1, [r4, #4]
	ldr	r6, [r4, #16]
	ldr	r0, [r5, #16]
	mov	r8, r0
	mov	r2, r8
	add	r2, r6, r2
	str	r2, [sp, #4]
	ldr	r0, [r4, #8]
	cmp	r2, r0
	ble	.L66	@cond_branch
	add	r1, r1, #1
.L66:
	add	r0, r3, #0
	bl	_Balloc
	str	r0, [sp]
	add	r7, r0, #0
	add	r7, r7, #20
	ldr	r1, [sp, #4]
	lsl	r0, r1, #2
	add	r2, r7, r0
	str	r2, [sp, #8]
	str	r0, [sp, #24]
	add	r1, r4, #0
	add	r1, r1, #20
	lsl	r3, r6, #2
	add	r2, r5, #0
	add	r2, r2, #20
	mov	r5, r8
	lsl	r4, r5, #2
	ldr	r0, [sp, #8]
	cmp	r7, r0
	bcs	.L68	@cond_branch
	mov	r0, #0
.L70:
	stmia	r7!, {r0}
	ldr	r5, [sp, #8]
	cmp	r7, r5
	bcc	.L70	@cond_branch
.L68:
	str	r1, [sp, #8]
	add	r3, r1, r3
	str	r3, [sp, #12]
	mov	r8, r2
	add	r4, r4, r8
	str	r4, [sp, #16]
	ldr	r0, [sp]
	add	r0, r0, #20
	mov	r9, r0
	mov	r1, r9
	str	r1, [sp, #32]
	cmp	r8, r4
	bcs	.L73	@cond_branch
.L75:
	mov	r2, r8
	ldmia	r2!, {r6}
	str	r2, [sp, #20]
	ldr	r0, .L96
	and	r6, r6, r0
	mov	r4, r9
	add	r4, r4, #4
	str	r4, [sp, #28]
	cmp	r6, #0
	beq	.L76	@cond_branch
	ldr	r7, [sp, #8]
	mov	r5, r9
	mov	r1, #0
	mov	ip, r1
	mov	sl, r0
.L77:
	ldmia	r7!, {r3}
	add	r0, r3, #0
	mov	r2, sl
	and	r0, r0, r2
	mov	r1, r0
	mul	r1, r1, r6
	ldr	r2, [r5]
	add	r0, r2, #0
	mov	r4, sl
	and	r0, r0, r4
	add	r1, r1, r0
	mov	r0, ip
	add	r4, r1, r0
	lsr	r1, r4, #16
	lsr	r3, r3, #16
	mov	r0, r3
	mul	r0, r0, r6
	lsr	r2, r2, #16
	add	r0, r0, r2
	add	r2, r0, r1
	lsr	r0, r2, #16
	mov	ip, r0
	strh	r2, [r5]
	strh	r4, [r5, #2]
	add	r5, r5, #4
	ldr	r1, [sp, #12]
	cmp	r7, r1
	bcc	.L77	@cond_branch
	str	r0, [r5]
.L76:
	mov	r2, r8
	ldrh	r6, [r2, #2]
	cmp	r6, #0
	beq	.L74	@cond_branch
	ldr	r7, [sp, #8]
	mov	r5, r9
	mov	r4, #0
	mov	ip, r4
	ldr	r2, [r5]
	ldr	r3, .L96
.L83:
	ldmia	r7!, {r1}
	add	r0, r1, #0
	and	r0, r0, r3
	mul	r0, r0, r6
	ldrh	r4, [r5, #2]
	add	r4, r4, r0
	mov	r8, r4
	add	r4, r4, ip
	lsr	r0, r4, #16
	mov	ip, r0
	strh	r4, [r5]
	strh	r2, [r5, #2]
	add	r5, r5, #4
	lsr	r1, r1, #16
	mul	r1, r1, r6
	ldr	r0, [r5]
	and	r0, r0, r3
	add	r1, r1, r0
	mov	r4, ip
	add	r2, r1, r4
	lsr	r0, r2, #16
	mov	ip, r0
	ldr	r1, [sp, #12]
	cmp	r7, r1
	bcc	.L83	@cond_branch
	str	r2, [r5]
.L74:
	ldr	r2, [sp, #20]
	mov	r8, r2
	ldr	r4, [sp, #28]
	mov	r9, r4
	ldr	r5, [sp, #16]
	cmp	r8, r5
	bcc	.L75	@cond_branch
.L73:
	ldr	r0, [sp, #32]
	ldr	r1, [sp, #24]
	add	r5, r0, r1
	ldr	r2, [sp, #4]
	cmp	r2, #0
	ble	.L90	@cond_branch
	b	.L95
.L97:
	.align	2, 0
.L96:
	.word	65535
.L91:
	ldr	r4, [sp, #4]
	sub	r4, r4, #1
	str	r4, [sp, #4]
	cmp	r4, #0
	ble	.L90	@cond_branch
.L95:
	sub	r5, r5, #4
	ldr	r0, [r5]
	cmp	r0, #0
	beq	.L91	@cond_branch
.L90:
	ldr	r5, [sp, #4]
	ldr	r0, [sp]
	str	r5, [r0, #16]
	ldr	r0, [sp]
	add	sp, sp, #36
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7, pc}
.Lfe8:
	.size	 _multiply,.Lfe8-_multiply
	.section .rodata
	.align	2, 0
	.type	 p05.27,object
	.size	 p05.27,12
p05.27:
	.word	5
	.word	25
	.word	125
.text
	.align	2, 0
	.globl	_pow5mult
	.type	 _pow5mult,function
	.thumb_func
_pow5mult:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	mov	r8, r0
	add	r7, r1, #0
	add	r6, r2, #0
	mov	r1, #3
	and	r1, r1, r6
	cmp	r1, #0
	beq	.L99	@cond_branch
	ldr	r0, .L111
	sub	r1, r1, #1
	lsl	r1, r1, #2
	add	r1, r1, r0
	ldr	r2, [r1]
	mov	r0, r8
	add	r1, r7, #0
	mov	r3, #0
	bl	_multadd
	add	r7, r0, #0
.L99:
	asr	r6, r6, #2
	cmp	r6, #0
	beq	.L110	@cond_branch
	mov	r0, r8
	ldr	r5, [r0, #72]
	add	r4, r5, #0
	cmp	r5, #0
	bne	.L102	@cond_branch
	ldr	r1, .L111+4
	bl	_i2b
	mov	r1, r8
	str	r0, [r1, #72]
	add	r5, r0, #0
	str	r4, [r5]
	b	.L102
.L112:
	.align	2, 0
.L111:
	.word	p05.27
	.word	625
.L106:
	ldr	r0, [r5]
	add	r4, r0, #0
	cmp	r0, #0
	bne	.L107	@cond_branch
	mov	r0, r8
	add	r1, r5, #0
	add	r2, r5, #0
	bl	_multiply
	str	r0, [r5]
	str	r4, [r0]
.L107:
	add	r5, r0, #0
.L102:
	mov	r0, #1
	and	r0, r0, r6
	cmp	r0, #0
	beq	.L105	@cond_branch
	mov	r0, r8
	add	r1, r7, #0
	add	r2, r5, #0
	bl	_multiply
	add	r4, r0, #0
	mov	r0, r8
	add	r1, r7, #0
	bl	_Bfree
	add	r7, r4, #0
.L105:
	asr	r6, r6, #1
	cmp	r6, #0
	bne	.L106	@cond_branch
.L110:
	add	r0, r7, #0
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7, pc}
.Lfe9:
	.size	 _pow5mult,.Lfe9-_pow5mult
	.align	2, 0
	.globl	_lshift
	.type	 _lshift,function
	.thumb_func
_lshift:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	mov	sl, r0
	mov	r8, r1
	add	r5, r2, #0
	asr	r6, r5, #5
	ldr	r1, [r1, #4]
	mov	r2, r8
	ldr	r0, [r2, #16]
	add	r0, r6, r0
	add	r7, r0, #1
	ldr	r2, [r2, #8]
	cmp	r7, r2
	ble	.L115	@cond_branch
.L117:
	add	r1, r1, #1
	lsl	r2, r2, #1
	cmp	r7, r2
	bgt	.L117	@cond_branch
.L115:
	mov	r0, sl
	bl	_Balloc
	mov	r9, r0
	mov	r4, r9
	add	r4, r4, #20
	mov	r0, r8
	add	r0, r0, #20
	cmp	r6, #0
	ble	.L120	@cond_branch
	mov	r1, #0
	add	r2, r6, #0
.L122:
	stmia	r4!, {r1}
	sub	r2, r2, #1
	cmp	r2, #0
	bne	.L122	@cond_branch
.L120:
	add	r3, r0, #0
	mov	r1, r8
	ldr	r0, [r1, #16]
	lsl	r0, r0, #2
	add	r6, r3, r0
	mov	r0, #31
	and	r5, r5, r0
	cmp	r5, #0
	beq	.L132	@cond_branch
	mov	r0, #32
	sub	r1, r0, r5
	mov	r2, #0
.L125:
	ldr	r0, [r3]
	lsl	r0, r0, r5
	orr	r0, r0, r2
	stmia	r4!, {r0}
	ldmia	r3!, {r2}
	lsr	r2, r2, r1
	cmp	r3, r6
	bcc	.L125	@cond_branch
	str	r2, [r4]
	cmp	r2, #0
	beq	.L131	@cond_branch
	add	r7, r7, #1
	b	.L131
.L132:
	ldmia	r3!, {r0}
	stmia	r4!, {r0}
	cmp	r3, r6
	bcc	.L132	@cond_branch
.L131:
	sub	r0, r7, #1
	mov	r2, r9
	str	r0, [r2, #16]
	mov	r0, sl
	mov	r1, r8
	bl	_Bfree
	mov	r0, r9
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7, pc}
.Lfe10:
	.size	 _lshift,.Lfe10-_lshift
	.align	2, 0
	.globl	__mcmp
	.type	 __mcmp,function
	.thumb_func
__mcmp:
	push	{r4, r5, lr}
	add	r2, r0, #0
	add	r5, r1, #0
	ldr	r0, [r2, #16]
	ldr	r1, [r5, #16]
	sub	r0, r0, r1
	cmp	r0, #0
	bne	.L147	@cond_branch
	add	r4, r2, #0
	add	r4, r4, #20
	lsl	r1, r1, #2
	add	r3, r4, r1
	add	r0, r5, #0
	add	r0, r0, #20
	add	r1, r0, r1
.L139:
	sub	r3, r3, #4
	sub	r1, r1, #4
	ldr	r0, [r3]
	ldr	r2, [r1]
	cmp	r0, r2
	beq	.L142	@cond_branch
	mov	r1, #1
	cmp	r0, r2
	bcs	.L143	@cond_branch
	sub	r1, r1, #2
.L143:
	add	r0, r1, #0
	b	.L147
.L142:
	cmp	r3, r4
	bhi	.L139	@cond_branch
	mov	r0, #0
.L147:
	pop	{r4, r5, pc}
.Lfe11:
	.size	 __mcmp,.Lfe11-__mcmp
	.align	2, 0
	.globl	__mdiff
	.type	 __mdiff,function
	.thumb_func
__mdiff:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-8
	add	r6, r0, #0
	add	r5, r1, #0
	mov	r8, r2
	add	r0, r5, #0
	mov	r1, r8
	bl	__mcmp
	add	r4, r0, #0
	cmp	r4, #0
	bne	.L149	@cond_branch
	add	r0, r6, #0
	mov	r1, #0
	bl	_Balloc
	add	r7, r0, #0
	mov	r0, #1
	str	r0, [r7, #16]
	str	r4, [r7, #20]
	b	.L168
.L149:
	cmp	r4, #0
	bge	.L150	@cond_branch
	add	r7, r5, #0
	mov	r5, r8
	mov	r8, r7
	mov	r4, #1
	b	.L151
.L150:
	mov	r4, #0
.L151:
	ldr	r1, [r5, #4]
	add	r0, r6, #0
	bl	_Balloc
	add	r7, r0, #0
	str	r4, [r7, #12]
	ldr	r0, [r5, #16]
	mov	r9, r0
	add	r6, r5, #0
	add	r6, r6, #20
	lsl	r0, r0, #2
	add	r0, r0, r6
	mov	sl, r0
	mov	r1, r8
	ldr	r0, [r1, #16]
	mov	r3, #20
	add	r3, r3, r8
	mov	ip, r3
	lsl	r0, r0, #2
	add	r0, r0, ip
	str	r0, [sp]
	add	r4, r7, #0
	add	r4, r4, #20
	mov	r5, #0
	ldr	r0, .L170
	mov	r8, r0
.L152:
	ldmia	r6!, {r1}
	str	r1, [sp, #4]
	mov	r3, r8
	and	r1, r1, r3
	mov	r0, ip
	add	r0, r0, #4
	mov	ip, r0
	sub	r0, r0, #4
	ldmia	r0!, {r2}
	add	r0, r2, #0
	and	r0, r0, r3
	sub	r1, r1, r0
	add	r0, r1, r5
	asr	r5, r0, #16
	ldr	r1, [sp, #4]
	lsr	r3, r1, #16
	lsr	r2, r2, #16
	sub	r3, r3, r2
	add	r1, r3, r5
	asr	r5, r1, #16
	strh	r1, [r4]
	strh	r0, [r4, #2]
	add	r4, r4, #4
	ldr	r3, [sp]
	cmp	ip, r3
	bcc	.L152	@cond_branch
	cmp	r6, sl
	bcs	.L169	@cond_branch
	ldr	r2, .L170
.L159:
	ldmia	r6!, {r1}
	add	r0, r1, #0
	and	r0, r0, r2
	add	r0, r0, r5
	asr	r5, r0, #16
	lsr	r1, r1, #16
	add	r1, r1, r5
	asr	r5, r1, #16
	strh	r1, [r4]
	strh	r0, [r4, #2]
	add	r4, r4, #4
	cmp	r6, sl
	bcc	.L159	@cond_branch
	b	.L169
.L171:
	.align	2, 0
.L170:
	.word	65535
.L163:
	mov	r0, #1
	neg	r0, r0
	add	r9, r9, r0
.L169:
	sub	r4, r4, #4
	ldr	r0, [r4]
	cmp	r0, #0
	beq	.L163	@cond_branch
	mov	r1, r9
	str	r1, [r7, #16]
.L168:
	add	r0, r7, #0
	add	sp, sp, #8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7, pc}
.Lfe12:
	.size	 __mdiff,.Lfe12-__mdiff
	.align	2, 0
	.globl	_ulp
	.type	 _ulp,function
	.thumb_func
_ulp:
	push	{r4, lr}
	ldr	r2, .L179
	and	r2, r2, r0
	ldr	r0, .L179+4
	add	r2, r2, r0
	cmp	r2, #0
	ble	.L173	@cond_branch
	add	r3, r2, #0
	mov	r4, #0
	b	.L174
.L180:
	.align	2, 0
.L179:
	.word	2146435072
	.word	-54525952
.L173:
	neg	r0, r2
	asr	r2, r0, #20
	cmp	r2, #19
	bgt	.L175	@cond_branch
	mov	r0, #128
	lsl	r0, r0, #12
	add	r3, r0, #0
	asr	r3, r3, r2
	mov	r4, #0
	b	.L174
.L175:
	mov	r3, #0
	sub	r2, r2, #20
	cmp	r2, #30
	bgt	.L177	@cond_branch
	mov	r0, #31
	sub	r0, r0, r2
	mov	r1, #1
	lsl	r1, r1, r0
	b	.L178
.L177:
	mov	r1, #1
.L178:
	add	r4, r1, #0
.L174:
	add	r1, r4, #0
	add	r0, r3, #0
	pop	{r4, pc}
.Lfe13:
	.size	 _ulp,.Lfe13-_ulp
	.align	2, 0
	.globl	_b2d
	.type	 _b2d,function
	.thumb_func
_b2d:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r8
	push	{r7}
	add	sp, sp, #-4
	add	r4, r1, #0
	mov	r1, #20
	add	r1, r1, r0
	mov	r8, r1
	ldr	r0, [r0, #16]
	lsl	r0, r0, #2
	add	r5, r1, r0
	sub	r5, r5, #4
	ldr	r2, [r5]
	add	r0, r2, #0
	str	r2, [sp]
	bl	_hi0bits
	add	r3, r0, #0
	mov	r0, #32
	sub	r0, r0, r3
	str	r0, [r4]
	ldr	r2, [sp]
	cmp	r3, #10
	bgt	.L182	@cond_branch
	mov	r0, #11
	sub	r0, r0, r3
	add	r1, r2, #0
	lsr	r1, r1, r0
	ldr	r0, .L192
	add	r6, r1, #0
	orr	r6, r6, r0
	cmp	r5, r8
	bls	.L183	@cond_branch
	sub	r5, r5, #4
	ldr	r1, [r5]
	b	.L184
.L193:
	.align	2, 0
.L192:
	.word	1072693248
.L183:
	mov	r1, #0
.L184:
	add	r0, r3, #0
	add	r0, r0, #21
	lsl	r2, r2, r0
	mov	r0, #11
	sub	r0, r0, r3
	lsr	r1, r1, r0
	add	r7, r2, #0
	orr	r7, r7, r1
	b	.L185
.L182:
	cmp	r5, r8
	bls	.L186	@cond_branch
	sub	r5, r5, #4
	ldr	r4, [r5]
	b	.L187
.L186:
	mov	r4, #0
.L187:
	sub	r3, r3, #11
	cmp	r3, #0
	beq	.L188	@cond_branch
	lsl	r2, r2, r3
	mov	r0, #32
	sub	r0, r0, r3
	add	r1, r4, #0
	lsr	r1, r1, r0
	ldr	r0, .L194
	orr	r1, r1, r0
	add	r6, r2, #0
	orr	r6, r6, r1
	cmp	r5, r8
	bls	.L189	@cond_branch
	sub	r5, r5, #4
	ldr	r2, [r5]
	b	.L190
.L195:
	.align	2, 0
.L194:
	.word	1072693248
.L189:
	mov	r2, #0
.L190:
	lsl	r4, r4, r3
	mov	r0, #32
	sub	r0, r0, r3
	lsr	r2, r2, r0
	add	r7, r4, #0
	orr	r7, r7, r2
	b	.L185
.L188:
	ldr	r0, .L196
	add	r6, r2, #0
	orr	r6, r6, r0
	add	r7, r4, #0
.L185:
	add	r1, r7, #0
	add	r0, r6, #0
	add	sp, sp, #4
	pop	{r3}
	mov	r8, r3
	pop	{r4, r5, r6, r7, pc}
.L197:
	.align	2, 0
.L196:
	.word	1072693248
.Lfe14:
	.size	 _b2d,.Lfe14-_b2d
	.align	2, 0
	.globl	_d2b
	.type	 _d2b,function
	.thumb_func
_d2b:
	push	{r4, r5, r6, r7, lr}
	mov	r7, sl
	mov	r6, r9
	mov	r5, r8
	push	{r5, r6, r7}
	add	sp, sp, #-8
	mov	r9, r3
	ldr	r3, [sp, #40]
	mov	sl, r3
	add	r5, r2, #0
	add	r4, r1, #0
	mov	r1, #1
	bl	_Balloc
	add	r6, r0, #0
	mov	r0, #20
	add	r0, r0, r6
	mov	r8, r0
	ldr	r2, .L208
	add	r1, r4, #0
	and	r2, r2, r1
	str	r2, [sp, #4]
	ldr	r0, .L208+4
	and	r4, r4, r0
	lsr	r7, r4, #20
	cmp	r7, #0
	beq	.L199	@cond_branch
	mov	r0, #128
	lsl	r0, r0, #13
	orr	r0, r0, r2
	str	r0, [sp, #4]
.L199:
	str	r5, [sp]
	cmp	r5, #0
	beq	.L200	@cond_branch
	mov	r0, sp
	bl	_lo0bits
	add	r2, r0, #0
	cmp	r2, #0
	beq	.L201	@cond_branch
	mov	r0, #32
	sub	r0, r0, r2
	ldr	r1, [sp, #4]
	lsl	r1, r1, r0
	ldr	r0, [sp]
	orr	r0, r0, r1
	str	r0, [r6, #20]
	ldr	r0, [sp, #4]
	lsr	r0, r0, r2
	str	r0, [sp, #4]
	b	.L202
.L209:
	.align	2, 0
.L208:
	.word	1048575
	.word	2147483647
.L201:
	ldr	r0, [sp]
	str	r0, [r6, #20]
.L202:
	ldr	r0, [sp, #4]
	mov	r1, r8
	str	r0, [r1, #4]
	mov	r1, #1
	cmp	r0, #0
	beq	.L203	@cond_branch
	mov	r1, #2
.L203:
	str	r1, [r6, #16]
	add	r4, r1, #0
	b	.L205
.L200:
	add	r0, sp, #4
	bl	_lo0bits
	add	r2, r0, #0
	ldr	r0, [sp, #4]
	str	r0, [r6, #20]
	mov	r0, #1
	str	r0, [r6, #16]
	mov	r4, #1
	add	r2, r2, #32
.L205:
	cmp	r7, #0
	beq	.L206	@cond_branch
	ldr	r3, .L210
	add	r0, r2, r3
	add	r0, r7, r0
	mov	r1, r9
	str	r0, [r1]
	mov	r0, #53
	sub	r0, r0, r2
	mov	r3, sl
	str	r0, [r3]
	b	.L207
.L211:
	.align	2, 0
.L210:
	.word	-1075
.L206:
	ldr	r1, .L212
	add	r0, r2, r1
	mov	r3, r9
	str	r0, [r3]
	lsl	r0, r4, #2
	add	r0, r0, r8
	sub	r0, r0, #4
	ldr	r0, [r0]
	bl	_hi0bits
	lsl	r1, r4, #5
	sub	r1, r1, r0
	mov	r0, sl
	str	r1, [r0]
.L207:
	add	r0, r6, #0
	add	sp, sp, #8
	pop	{r3, r4, r5}
	mov	r8, r3
	mov	r9, r4
	mov	sl, r5
	pop	{r4, r5, r6, r7, pc}
.L213:
	.align	2, 0
.L212:
	.word	-1074
.Lfe15:
	.size	 _d2b,.Lfe15-_d2b
	.align	2, 0
	.globl	_ratio
	.type	 _ratio,function
	.thumb_func
_ratio:
	push	{r4, r5, r6, r7, lr}
	add	sp, sp, #-16
	add	r4, r0, #0
	add	r5, r1, #0
	mov	r1, sp
	bl	_b2d
	str	r0, [sp, #8]
	str	r1, [sp, #12]
	add	r1, sp, #4
	add	r0, r5, #0
	bl	_b2d
	add	r7, r1, #0
	add	r6, r0, #0
	ldr	r2, [sp]
	ldr	r0, [sp, #4]
	sub	r2, r2, r0
	ldr	r0, [r4, #16]
	ldr	r1, [r5, #16]
	sub	r0, r0, r1
	lsl	r0, r0, #5
	add	r0, r2, r0
	cmp	r0, #0
	ble	.L215	@cond_branch
	lsl	r0, r0, #20
	ldr	r1, [sp, #8]
	add	r0, r1, r0
	str	r0, [sp, #8]
	b	.L216
.L215:
	lsl	r0, r0, #20
	sub	r6, r6, r0
.L216:
	ldr	r0, [sp, #8]		@ created by thumb_load_double_from_address
	ldr	r1, [sp, #12]		@ created by thumb_load_double_from_address
	add	r3, r7, #0
	add	r2, r6, #0
	bl	__divdf3
	add	sp, sp, #16
	pop	{r4, r5, r6, r7, pc}
.Lfe16:
	.size	 _ratio,.Lfe16-_ratio
	.globl	__mprec_tens
	.section .rodata
	.align	2, 0
	.type	 __mprec_tens,object
__mprec_tens:
	.long 0x3ff00000, 0x0	@ double 1.00000000000000000000e0
	.long 0x40240000, 0x0	@ double 1.00000000000000000000e1
	.long 0x40590000, 0x0	@ double 1.00000000000000000000e2
	.long 0x408f4000, 0x0	@ double 1.00000000000000000000e3
	.long 0x40c38800, 0x0	@ double 1.00000000000000000000e4
	.long 0x40f86a00, 0x0	@ double 1.00000000000000000000e5
	.long 0x412e8480, 0x0	@ double 1.00000000000000000000e6
	.long 0x416312d0, 0x0	@ double 1.00000000000000000000e7
	.long 0x4197d784, 0x0	@ double 1.00000000000000000000e8
	.long 0x41cdcd65, 0x0	@ double 1.00000000000000000000e9
	.long 0x4202a05f, 0x20000000	@ double 1.00000000000000000000e10
	.long 0x42374876, 0xe8000000	@ double 1.00000000000000000000e11
	.long 0x426d1a94, 0xa2000000	@ double 1.00000000000000000000e12
	.long 0x42a2309c, 0xe5400000	@ double 1.00000000000000000000e13
	.long 0x42d6bcc4, 0x1e900000	@ double 1.00000000000000000000e14
	.long 0x430c6bf5, 0x26340000	@ double 1.00000000000000000000e15
	.long 0x4341c379, 0x37e08000	@ double 1.00000000000000000000e16
	.long 0x43763457, 0x85d8a000	@ double 1.00000000000000000000e17
	.long 0x43abc16d, 0x674ec800	@ double 1.00000000000000000000e18
	.long 0x43e158e4, 0x60913d00	@ double 1.00000000000000000000e19
	.long 0x4415af1d, 0x78b58c40	@ double 1.00000000000000000000e20
	.long 0x444b1ae4, 0xd6e2ef50	@ double 1.00000000000000000000e21
	.long 0x4480f0cf, 0x64dd592	@ double 1.00000000000000000000e22
	.long 0x44b52d02, 0xc7e14af6	@ double 9.99999999999999916114e22
	.long 0x44ea7843, 0x79d99db4	@ double 9.99999999999999983223e23
	.size	 __mprec_tens,200
	.globl	__mprec_bigtens
	.align	2, 0
	.type	 __mprec_bigtens,object
__mprec_bigtens:
	.long 0x4341c379, 0x37e08000	@ double 1.00000000000000000000e16
	.long 0x4693b8b5, 0xb5056e17	@ double 1.00000000000000005366e32
	.long 0x4d384f03, 0xe93ff9f5	@ double 1.00000000000000002132e64
	.long 0x5a827748, 0xf9301d32	@ double 1.00000000000000007517e128
	.long 0x75154fdd, 0x7f73bf3c	@ double 1.00000000000000003013e256
	.size	 __mprec_bigtens,40
	.globl	__mprec_tinytens
	.align	2, 0
	.type	 __mprec_tinytens,object
__mprec_tinytens:
	.long 0x3c9cd2b2, 0x97d889bc	@ double 9.99999999999999979098e-17
	.long 0x3949f623, 0xd5a8a733	@ double 1.00000000000000005597e-32
	.long 0x32a50ffd, 0x44f4a73d	@ double 9.99999999999999965306e-65
	.long 0x255bba08, 0xcf8c979d	@ double 1.00000000000000005401e-128
	.long 0xac80628, 0x64ac6f43	@ double 9.99999999999999977328e-257
	.size	 __mprec_tinytens,40
.text
	.align	2, 0
	.globl	_mprec_log10
	.type	 _mprec_log10,function
	.thumb_func
_mprec_log10:
	push	{r4, lr}
	add	r4, r0, #0
	ldr	r1, .L225+4		@ created by thumb_load_double_from_address
	ldr	r0, .L225		@ created by thumb_load_double_from_address
	cmp	r4, #23
	bgt	.L218	@cond_branch
	ldr	r0, .L225+8
	lsl	r1, r4, #3
	add	r1, r1, r0
	ldr	r0, [r1]		@ created by thumb_load_double_from_address
	ldr	r1, [r1, #4]		@ created by thumb_load_double_from_address
	b	.L224
.L226:
	.align	2, 0
.L225:
	.long 0x3ff00000, 0x0	@ double 1.00000000000000000000e0
	.word	__mprec_tens
.L218:
	cmp	r4, #0
	ble	.L223	@cond_branch
.L221:
	ldr	r3, .L227+4		@ created by thumb_load_double_from_address
	ldr	r2, .L227		@ created by thumb_load_double_from_address
	bl	__muldf3
	sub	r4, r4, #1
	cmp	r4, #0
	bgt	.L221	@cond_branch
.L224:
.L223:
	pop	{r4, pc}
.L228:
	.align	2, 0
.L227:
	.long 0x40240000, 0x0	@ double 1.00000000000000000000e1
.Lfe17:
	.size	 _mprec_log10,.Lfe17-_mprec_log10
.text
	.align	2, 0
