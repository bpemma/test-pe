@ Generated by gcc 2.9-arm-000512 for Thumb/elf
	.code	16
.gcc2_compiled.:
.text
	.align	2, 0
	.globl	_memalign_r
	.type	 _memalign_r,function
	.thumb_func
_memalign_r:
	push	{r4, r5, r6, r7, lr}
	mov	r7, r9
	mov	r6, r8
	push	{r6, r7}
	mov	r9, r0
	add	r5, r1, #0
	add	r1, r2, #0
	cmp	r5, #8
	bhi	.L3	@cond_branch
	bl	_malloc_r
	b	.L13
.L3:
	cmp	r5, #15
	bhi	.L4	@cond_branch
	mov	r5, #16
.L4:
	add	r1, r1, #11
	cmp	r1, #22
	ble	.L5	@cond_branch
	mov	r0, #8
	neg	r0, r0
	mov	r8, r0
	mov	r2, r8
	and	r2, r2, r1
	mov	r8, r2
	b	.L6
.L5:
	mov	r0, #16
	mov	r8, r0
.L6:
	mov	r2, r8
	add	r1, r2, r5
	add	r1, r1, #16
	mov	r0, r9
	bl	_malloc_r
	add	r7, r0, #0
	cmp	r7, #0
	bne	.L7	@cond_branch
	mov	r0, #0
	b	.L12
.L7:
	mov	r0, r9
	bl	__malloc_lock
	add	r6, r7, #0
	sub	r6, r6, #8
	add	r0, r7, #0
	add	r1, r5, #0
	bl	__umodsi3
	cmp	r0, #0
	beq	.L9	@cond_branch
	add	r0, r7, r5
	sub	r0, r0, #1
	neg	r1, r5
	and	r0, r0, r1
	add	r4, r0, #0
	sub	r4, r4, #8
	sub	r0, r4, r6
	cmp	r0, #15
	bgt	.L10	@cond_branch
	add	r4, r4, r5
.L10:
	sub	r3, r4, r6
	ldr	r1, [r6, #4]
	mov	r0, #4
	neg	r0, r0
	and	r1, r1, r0
	sub	r1, r1, r3
	mov	r2, #1
	add	r0, r1, #0
	orr	r0, r0, r2
	str	r0, [r4, #4]
	add	r1, r4, r1
	ldr	r0, [r1, #4]
	orr	r0, r0, r2
	str	r0, [r1, #4]
	ldr	r0, [r6, #4]
	and	r0, r0, r2
	orr	r0, r0, r3
	str	r0, [r6, #4]
	mov	r0, r9
	add	r1, r7, #0
	bl	_free_r
	add	r6, r4, #0
.L9:
	ldr	r0, [r6, #4]
	mov	r1, #4
	neg	r1, r1
	and	r0, r0, r1
	mov	r1, r8
	sub	r0, r0, r1
	cmp	r0, #15
	ble	.L11	@cond_branch
	add	r1, r6, r1
	mov	r2, #1
	orr	r0, r0, r2
	str	r0, [r1, #4]
	ldr	r0, [r6, #4]
	and	r0, r0, r2
	mov	r2, r8
	orr	r0, r0, r2
	str	r0, [r6, #4]
	add	r1, r1, #8
	mov	r0, r9
	bl	_free_r
.L11:
	mov	r0, r9
	bl	__malloc_unlock
	add	r0, r6, #0
	add	r0, r0, #8
.L13:
.L12:
	pop	{r3, r4}
	mov	r8, r3
	mov	r9, r4
	pop	{r4, r5, r6, r7, pc}
.Lfe1:
	.size	 _memalign_r,.Lfe1-_memalign_r
.text
	.align	2, 0
